<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Slickflow.Engine</name>
    </assembly>
    <members>
        <member name="T:Slickflow.Engine.Business.Entity.ActivityInstanceEntity">
            <summary>
            活动实例的实体对象
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.JobInfoEntity">
            <summary>
            作业信息
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.LogEntity">
            <summary>
            日志记录实体
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.LogQueryEntity">
            <summary>
            日志查询实体
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.ProcessEntity">
            <summary>
            流程实体类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.ProcessFileEntity">
            <summary>
            流程文件实体对象
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.ProcessFilePool">
            <summary>
            泳道流程实体对象
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.ProcessFileQuery">
            <summary>
            流程xml文件查询实体
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.ProcessInstanceEntity">
            <summary>
            流程实例类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.ProcessInstanceQuery">
            <summary>
            流程实例查询实体
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.ProcessQuery">
            <summary>
            流程查询类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.ProcessVariableEntity">
            <summary>
            流程实体类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.ProcessVariableQuery">
            <summary>
            流程变量查询实体
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.ProcessVariableTaskView">
            <summary>
            流程变量的任务视图
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.QueryBase">
            <summary>
            查询基类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.Query`1">
            <summary>
            查询泛型类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.Table">
            <summary>
            映射数据库表对象
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.TaskEntity">
            <summary>
            任务实体对象
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.TaskEntrustedEntity">
            <summary>
            任务委托实体
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Business.Entity.TaskEntrustedEntity.TaskID">
            <summary>
            被委托任务ID
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.TaskQuery">
            <summary>
            任务查询实体对象
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.TaskReplacedEntity">
            <summary>
            任务取代实体
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Business.Entity.TaskReplacedEntity.ReplacedByUserID">
            <summary>
            任务被取代替换为新用户
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.TaskViewEntity">
            <summary>
            任务视图类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.TransitionInstanceEntity">
            <summary>
            节点转移类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Entity.TransitionInstanceQuery">
            <summary>
            转移查询实体
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Manager.ActivityInstanceManager">
            <summary>
            活动实例管理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetById(System.Int32)">
            <summary>
            根据ID获取活动实例
            </summary>
            <param name="activityInstanceID"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetById(System.Data.IDbConnection,System.Int32,System.Data.IDbTransaction)">
            <summary>
            根据ID获取活动实例
            </summary>
            <param name="conn">连接</param>
            <param name="activityInstanceID">活动实例ID</param>
            <param name="trans">事务</param>
            <returns>活动实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetRunningNode(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            获取流程当前运行节点信息
            </summary>
            <param name="runner">执行者</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetRunningNode(Slickflow.Engine.Common.WfAppRunner,Slickflow.Engine.Business.Entity.TaskViewEntity@)">
            <summary>
            获取流程当前运行节点信息
            </summary>
            <param name="runner">执行者</param>
            <param name="taskView">任务视图</param>
            <returns>活动实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetRunningNode(Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession,Slickflow.Engine.Business.Entity.TaskViewEntity@)">
            <summary>
            获取流程当前运行节点信息
            </summary>
            <param name="runner">执行者</param>
            <param name="session">数据库会话</param>
            <param name="taskView">任务视图</param>
            <returns>活动实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetBackSrcActivityInstance(System.Int32)">
            <summary>
            获取退回源活动实例
            </summary>
            <param name="currentActivityInstanceID">当前活动实例</param>
            <returns>退回源活动实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.IsMineTask(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String)">
            <summary>
            判断是否是某个用户的办理任务
            </summary>
            <param name="entity"></param>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.IncludeRunningState(Slickflow.Engine.Business.Entity.ActivityInstanceEntity)">
            <summary>
            判断节点是否处于运行状态
            </summary>
            <param name="activityInstance">活动实例</param>
            <returns>是否标志</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetActivityInstances(System.Int32,Slickflow.Data.IDbSession)">
            <summary>
            获取活动节点实例
            </summary>
            <param name="processInstanceID"></param>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetActivityInstanceLatest(System.Int32,System.String)">
            <summary>
            获取活动节点实例
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <param name="activityGUID">活动GUID</param>
            <returns>活动实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetActivityInstanceLatest(System.Int32,System.String,Slickflow.Data.IDbSession)">
            <summary>
            获取最近的节点实例
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <param name="activityGUID">活动GUID</param>
            <param name="session">数据会话</param>
            <returns>活动实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetActivityInstanceLatest(System.String,System.String,System.String)">
            <summary>
            获取最近的节点实例
            </summary>
            <param name="appInstanceID">应用实例ID</param>
            <param name="processGUID">流程GUID</param>
            <param name="activityGUID">活动GUID</param>
            <returns>活动实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetActivityInstanceList(System.String,System.String,System.String)">
            <summary>
            获取最近的节点实例
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">流程版本</param>
            <param name="activityGUID">活动GUID</param>
            <returns>活动实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetActivityRunning(System.Int32,System.String,Slickflow.Data.IDbSession)">
            <summary>
            获取运行状态的活动实例
            </summary>
            <param name="activityGUID">活动GUID</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="session">会话</param>
            <returns>活动实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetActivityByState(System.Int32,System.String,Slickflow.Engine.Common.ActivityStateEnum,Slickflow.Data.IDbSession)">
            <summary>
            根据状态获取活动实例
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <param name="activityGUID">活动GUID</param>
            <param name="activityState">活动状态</param>
            <param name="session">会话</param>
            <returns>活动实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetActivityInstanceListCompleted(System.String,System.String)">
            <summary>
            获取已经运行完成的节点
            </summary>
            <param name="appInstanceID">应用实例ID</param>
            <param name="processGUID">流程GUID</param>
            <returns>活动列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetPreviousActivityInstanceSimple(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String)">
            <summary>
            获取上一步已经完成活动的实例
            </summary>
            <param name="runningNode">运行节点</param>
            <param name="previousActivityGUID">活动GUID</param>
            <returns>活动实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetPreviousActivityInstanceSimple(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Data.IDbSession)">
            <summary>
            获取上一步已经完成活动的实例
            </summary>
            <param name="runningNode">运行节点</param>
            <param name="previousActivityGUID">活动GUID</param>
            <param name="session">数据会话</param>
            <returns>活动实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetActivityInstanceListCompletedSimple(System.Int32,System.String)">
            <summary>
            获取完成状态的活动实例
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <param name="activityGUID">活动GUID</param>
            <returns>活动实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetActivityInstanceListCompletedSimple(System.Int32,System.String,Slickflow.Data.IDbSession)">
            <summary>
            获取完成状态的活动实例
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <param name="activityGUID">活动GUID</param>
            <param name="session">数据会话</param>
            <returns>活动实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetByTask(System.Int32,Slickflow.Data.IDbSession)">
            <summary>
            由任务ID获取活动实例信息
            </summary>
            <param name="taskID">任务ID</param>
            <param name="session">会话</param>
            <returns>活动实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetByTask(System.Int32)">
            <summary>
            由任务ID获取活动实例信息
            </summary>
            <param name="taskID">任务ID</param>
            <returns>活动实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetRunningActivityInstanceList(System.String,System.String,System.String)">
            <summary>
            获取流程实例中运行的活动节点
            </summary>
            <param name="appInstanceID">应用实例ID</param>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <returns>活动实例列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetRunningActivityInstanceList(System.String,System.String,System.String,Slickflow.Data.IDbSession)">
            <summary>
            获取流程实例中运行的活动节点
            </summary>
            <param name="appInstanceID">应用实例ID</param>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <param name="session">数据库会话</param>
            <returns>活动实例列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetMultipleInstanceListCompleted(System.Int32)">
            <summary>
            获取主节点下已经完成的子节点列表
            </summary>
            <param name="mainActivityInstanceID">主活动实例ID</param>
            <returns>活动列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetMultipleInstanceListCompleted(System.Int32,Slickflow.Data.IDbSession)">
            <summary>
            获取主节点下已经完成的子节点列表
            </summary>
            <param name="mainActivityInstanceID">主活动实例ID</param>
            <param name="session">数据会话</param>
            <returns>活动列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetPreviousParallelMultipleInstanceListCompleted(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String)">
            <summary>
            获取已经完成的多实例子节点
            </summary>
            <param name="runningNode">当前运行节点</param>
            <param name="previousActivityGUID">前置活动GUID</param>
            <returns>子节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetPreviousParallelMultipleInstanceListCompleted(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Data.IDbSession)">
            <summary>
            获取已经完成的多实例子节点
            </summary>
            <param name="runningNode">当前运行节点</param>
            <param name="previousActivityGUID">前置活动GUID</param>
            <param name="session">会话</param>
            <returns>子节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.IsAssignedUserInActivityInstance(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.Int32)">
            <summary>
            判断用户是否是分配下来任务的用户
            </summary>
            <param name="entity">实体</param>
            <param name="userID">用户ID</param>
            <returns>是否</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.IsMultipleInstanceChildren(Slickflow.Engine.Business.Entity.ActivityInstanceEntity)">
            <summary>
            判断是否为会签实例节点
            </summary>
            <param name="child">活动实例</param>
            <returns>是否结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.FilteredActivityInstanceInTheSameBatch(System.Collections.Generic.List{Slickflow.Engine.Business.Entity.ActivityInstanceEntity})">
            <summary>
            过滤活动实例列表
            </summary>
            <param name="instanceList">实例列表</param>
            <returns>同一批次的实例列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetActivityMulitipleInstanceWithState(System.Int32,System.Int32,System.Nullable{System.Int16})">
            <summary>
            获取会签节点的多实例节点
            </summary>
            <param name="mainActivityInstanceID">会签节点</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="activityState">活动状态</param>
            <returns>活动实例列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetActivityMulitipleInstanceWithStateBatch(System.Int32,System.Int32,System.Nullable{System.Int16},Slickflow.Data.IDbSession)">
            <summary>
            获取同一批的主节点下的子节点列表记录
            包括：需要过滤回退后的回退标识类型的过滤
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <param name="mainActivityInstanceID">主节点ID</param>
            <param name="activityState">活动类型</param>
            <param name="session">数据会话</param>
            <returns>节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetActivityMulitipleInstanceWithState(System.Int32,System.Int32,System.Nullable{System.Int16},Slickflow.Data.IDbSession)">
            <summary>
            获取会签节点的多实例节点
            </summary>
            <param name="mainActivityInstanceID">会签节点</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="activityState">活动状态</param>
            <param name="session">session会话</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetGatewayInstanceCountByTransition(System.String,System.Int32,System.Int32,Slickflow.Data.IDbSession)">
            <summary>
            查询分支实例的个数
            </summary>
            <param name="splitActivityGUID">分支节点GUID</param>
            <param name="splitActivityInstanceID">分支节点活动实例ID</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="session">会话</param>
            <returns>有效分支转移个数</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetValidSplitedActivityInstanceList(System.Int32,System.Int32,Slickflow.Data.IDbSession)">
            <summary>
             获取有效的分支数目
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <param name="splitGatewayInstanceID">Split网关实例ID</param>
            <param name="session">会话</param>
            <returns>活动实例列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetValidActivityInstanceListOfMI(System.Int32,System.Int32)">
            <summary>
            获取有效的子节点列表
            </summary>
            <param name="mainActivityInstanceID">主节点ID</param>
            <param name="processInstanceID">流程实例ID</param>
            <returns>子节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetValidActivityInstanceListOfMI(System.Int32,System.Int32,Slickflow.Data.IDbSession)">
            <summary>
            获取有效的子节点列表
            </summary>
            <param name="mainActivityInstanceID">主节点ID</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="session">数据会话</param>
            <returns>子节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.CreateActivityInstanceObject(System.String,System.String,System.String,System.String,System.Int32,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            创建活动实例的对象
            </summary>
            <param name="appName">应用名称</param>
            <param name="appInstanceID">应用实例ID</param>
            <param name="appInstanceCode">应用实例代码</param>
            <param name="processGUID">流程GUID</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="activity">活动</param>
            <param name="runner">运行者</param>
            <returns>活动实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.CalculateActivityOverdueDateTime(System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.Boundary},System.DateTime)">
            <summary>
            计算活动节点过期时间
            XmlConvert.ToTimeSpan()
            https://stackoverflow.com/questions/12466188/how-do-i-convert-an-iso8601-timespan-to-a-c-sharp-timespan
            </summary>
            <param name="boundaryList">边界列表</param>
            <param name="createdDateTime">活动创建时间</param>
            <returns>过期时间</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.CreateActivityInstanceObject(Slickflow.Engine.Business.Entity.ActivityInstanceEntity)">
            <summary>
            根据主节点复制子节点
            </summary>
            <param name="main">活动实例</param>
            <returns>活动实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.CreateBackwardActivityInstanceObject(System.String,System.String,System.String,System.Int32,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Common.BackwardTypeEnum,System.Int32,System.Int32,Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            创建活动实例的对象
            </summary>
            <param name="appName">应用名称</param>
            <param name="appInstanceID">应用实例ID</param>
            <param name="appInstanceCode">应用实例代码</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="processGUID">流程GUID</param>
            <param name="activity">活动</param>
            <param name="backwardType">退回类型</param>
            <param name="backSrcActivityInstanceID">退回源活动实例ID</param>
            <param name="backOrgActivityInstanceID">最初活动实例ID</param>
            <param name="runner">执行者</param>
            <returns>活动实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.IncreaseTokensHad(System.Int32,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            更新活动节点的Token数目
            </summary>
            <param name="activityInstanceID">活动实例ID</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.Read(System.Int32,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            活动实例被读取
            </summary>
            <param name="activityInstanceID">活动实例ID</param>
            <param name="runner">执行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.SetActivityState(System.Int32,Slickflow.Engine.Common.ActivityStateEnum,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            设置活动实例状态
            </summary>
            <param name="activityInstanceID">活动实例ID</param>
            <param name="activityState">活动状态</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.Withdraw(System.Int32,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            撤销活动实例
            </summary>
            <param name="activityInstanceID">活动实例ID</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.SendBack(System.Int32,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            退回活动实例
            </summary>
            <param name="activityInstanceID">活动实例ID</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.EndActivityState(System.Int32,Slickflow.Engine.Common.ActivityStateEnum,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            设置活动结束状态
            </summary>
            <param name="activityInstanceID">活动实例ID</param>
            <param name="activityState">活动状态</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.Complete(System.Int32,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            活动实例完成
            </summary>
            <param name="activityInstanceID">活动实例ID</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.SetApprovalStatus(System.Int32,Slickflow.Data.IDbSession)">
            <summary>
            更新审批状态为同意
            </summary>
            <param name="activityInstanceID"></param>
            <param name="session"></param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.UpdateActivityInstanceBlockedBetweenSplitJoin(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Xpdl.IProcessModel,Slickflow.Data.IDbSession)">
            <summary>
            更新分支和合并之间的运行节点为阻止状态
            </summary>
            <param name="gatewayActivity">网关(合并)节点</param>
            <param name="gatewayInstance">网关(合并)实例</param>
            <param name="processModel">流程模型</param>
            <param name="session">数据会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.UpdateActivityInstanceBlockedBetweenSplitJoin(System.Int32,System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.Activity},Slickflow.Data.IDbSession)">
            <summary>
            更新活动里面的活动为阻止状态
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <param name="taskActivityList">任务节点列表</param>
            <param name="session">数据会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.Insert(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Data.IDbSession)">
            <summary>
            插入活动实例
            </summary>
            <param name="entity">实体</param>
            <param name="session">会话</param>
            <returns>新的自增长ID键值</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.Update(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Data.IDbSession)">
            <summary>
            更新活动实例
            </summary>
            <param name="entity">活动实例实体</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.Update(System.Data.IDbConnection,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.Data.IDbTransaction)">
            <summary>
            更新活动实例
            </summary>
            <param name="conn">链接</param>
            <param name="entity">实体</param>
            <param name="trans">事务</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.Cancel(System.Int32,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            取消节点运行
            </summary>
            <param name="activityInstanceID">活动实例</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.CancelUnCompletedMultipleInstance(System.Int32,Slickflow.Data.IDbSession,Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            更新会签节点中未办理完成的节点状态
            </summary>
            <param name="mainActivityInstanceID">主节点ID</param>
            <param name="session">会话</param>
            <param name="runner">执行者</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.WithdrawMainIncludedChildNodes(System.Int32,Slickflow.Data.IDbSession,Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            撤销主节点及其下面的多实例子节点
            </summary>
            <param name="mainActivityInstanceID">主节点ID</param>
            <param name="session">会话</param>
            <param name="runner">执行者</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.WithdrawMultipleInstance(System.Int32,Slickflow.Data.IDbSession,Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            更新会签办理节点的节点状态
            </summary>
            <param name="mainActivityInstanceID">主节点ID</param>
            <param name="session">会话</param>
            <param name="runner">执行者</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.Resuspend(System.Int32,Slickflow.Data.IDbSession,Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            重新使节点处于挂起状态
            说明：会签最后一个子节点撤销时候用到
            </summary>
            <param name="activityInstanceID">活动实例节点ID</param>
            <param name="session">会话</param>
            <param name="runner">执行者</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.Rerun(System.Int32,Slickflow.Data.IDbSession,Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            重新使节点处于挂起状态
            说明：会签最后一个子节点撤销时候用到
            </summary>
            <param name="activityInstanceID">活动实例节点ID</param>
            <param name="session">会话</param>
            <param name="runner">执行者</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.Delete(System.Int32,Slickflow.Data.IDbSession)">
            <summary>
            删除活动实例
            </summary>
            <param name="activityInstanceID">活动实例ID</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.Agree(System.Int32)">
            <summary>
            同意
            </summary>
            <param name="taskID">任务ID</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.Refuse(System.Int32)">
            <summary>
            拒绝
            </summary>
            <param name="taskID">任务ID</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.CheckActivityInstancePassedResult(System.Nullable{System.Int32},Slickflow.Data.IDbSession)">
            <summary>
             检查当前节点的通过类型
            </summary>
            <param name="taskID">任务ID</param>
            <param name="session">会话</param>
            <returns>通过结果对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.CheckMIPassRateInfo(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Data.IDbSession)">
            <summary>
            检查会签节点通过率的满足情况
            </summary>
            <param name="currentActivityInstance">当前审批节点</param>
            <param name="mainActivityInstance">主节点ID</param>
            <param name="session">会话</param>
            <returns>检验结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ActivityInstanceManager.GetMiApprovalThresholdStatus(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Data.IDbSession)">
            <summary>
            获取会签节点的审批通过率类型
            </summary>
            <param name="currentActivityInstance">当前活动实例</param>
            <param name="mainActivityInstance">主节点</param>
            <param name="session">会话</param>
            <returns>是否可以通过</returns>
        </member>
        <member name="T:Slickflow.Engine.Business.Manager.IXPDLStorage">
            <summary>
            流程定义数据库存储接口
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Manager.JobInfoManager">
            <summary>
            作业数据管理器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.JobInfoManager.GetJobSubscribedByTopic(System.String)">
            <summary>
            获取作业信息
            </summary>
            <param name="topic"></param>
            <returns>作业实体</returns>
        </member>
        <member name="T:Slickflow.Engine.Business.Manager.LogManager">
            <summary>
            日志处理记录类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.LogManager.Record(System.String,Slickflow.Engine.Common.LogEventType,Slickflow.Engine.Common.LogPriority,System.Object,System.Exception)">
            <summary>
            记录流程异常日志
            </summary>
            <param name="title">标题</param>
            <param name="eventType">事件类型</param>
            <param name="priority">优先级</param>
            <param name="extraObject">处理对象</param>
            <param name="e">异常</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.LogManager.Insert(System.Object)">
            <summary>
            插入流程日志数据
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.LogManager.RecordLog(System.String,Slickflow.Engine.Common.LogEventType,Slickflow.Engine.Common.LogPriority,System.Object,System.Exception)">
            <summary>
            记录流程异常日志
            </summary>
            <param name="title">标题</param>
            <param name="eventType">事件类型</param>
            <param name="priority">优先级</param>
            <param name="extraObject">处理对象</param>
            <param name="e">异常</param>
        </member>
        <member name="T:Slickflow.Engine.Business.Manager.ProcessInstanceException">
            <summary>
            流程实例异常类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Business.Manager.ProcessInstanceManager">
            <summary>
            流程实例管理者类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.GetProcessInstanceLatest(System.String,System.String,System.String)">
            <summary>
            获取当前运行的流程实例
            </summary>
            <param name="appInstanceID">应用ID</param>
            <param name="processGUID">流程GUID</param>
            <param name="version">流程版本</param>
            <returns>流程实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.GetProcessInstanceLatest(System.Data.IDbConnection,System.String,System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            获取当前运行的流程实例
            </summary>
            <param name="conn">链接</param>
            <param name="appInstanceID">应用ID</param>
            <param name="processGUID">流程GUID</param>
            <param name="version">流程版本</param>
            <param name="trans">事务</param>
            <returns>流程实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.GetById(System.Int32)">
            <summary>
            根据GUID获取流程实例数据
            </summary>
            <param name="processInstanceID"></param>
            <returns>流程实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.GetById(System.Data.IDbConnection,System.Int32,System.Data.IDbTransaction)">
            <summary>
            根据ID获取流程实例数据
            </summary>
            <param name="conn">连接</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="trans">事务</param>
            <returns>流程实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.GetByVersion(System.String,System.String)">
            <summary>
            获取流程实例
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <returns>流程实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.GetByActivity(System.Data.IDbConnection,System.Int32,System.Data.IDbTransaction)">
            <summary>
            根据活动实例查询流程实例
            </summary>
            <param name="conn">数据库链接</param>
            <param name="activityInstanceID">活动实例ID</param>
            <param name="trans">事务</param>
            <returns>流程实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.IsSubProcess(Slickflow.Engine.Business.Entity.ProcessInstanceEntity)">
            <summary>
            判断流程实例是否为子流程
            </summary>
            <param name="entity">流程实例</param>
            <returns>子流程标志</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.GetProcessInitiator(System.Int32)">
            <summary>
            获取流程的发起人
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <returns>流程发起人</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.GetProcessInitiator(System.Data.IDbConnection,System.Int32,System.Data.IDbTransaction)">
            <summary>
            获取流程的发起人
            </summary>
            <param name="conn">链接</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="trans">事务</param>
            <returns>流程发起人</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.GetProcessInstanceCurrent(System.String,System.String,System.String)">
            <summary>
            获取最近的流程运行实例
            </summary>
            <param name="appInstanceID">应用实例ID</param>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <returns>流程实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.GetProcessInstanceCurrent(System.Data.IDbConnection,System.String,System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            获取最近的流程运行实例
            </summary>
            <param name="conn">链接</param>
            <param name="appInstanceID">应用实例ID</param>
            <param name="processGUID">流程GUID</param>
            <param name="version">流程版本</param>
            <param name="trans">事务</param>
            <returns>流程实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.GetProcessInstance(System.String)">
            <summary>
            根据业务实例ID查询流程实例
            说明：此处appInstanceID 只有GUID类型，才确定唯一性，否则就加入ProcessGUID来确定唯一性
            </summary>
            <param name="appInstanceID">应用实例ID</param>
            <returns>流程实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.GetProcessInstance(System.Data.IDbConnection,System.String,System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            根据流程完成状态获取流程实例数据
            </summary>
            <param name="conn">链接</param>
            <param name="appInstanceID"></param>
            <param name="processGUID"></param>
            <param name="version">流程版本</param>
            <param name="trans">事务</param>
            <returns>流程实例列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.GetSubProcessInstance(System.Data.IDbConnection,System.String,System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            获取子流程数据
            </summary>
            <param name="conn">链接</param>
            <param name="appInstanceID"></param>
            <param name="processGUID"></param>
            <param name="subProcessGUID"></param>
            <param name="trans">事务</param>
            <returns>流程实例列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.GetRunningProcessInstance(System.String,System.String)">
            <summary>
            获取处于运行状态的流程实例
            </summary>
            <param name="appInstanceID">应用实例ID</param>
            <param name="processGUID">流程GUID</param>
            <returns>流程实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.GetProcessInstanceCount(System.String,System.String)">
            <summary>
            判断流程实例是否存在
            </summary>
            <param name="processGUID">流程GUId</param>
            <param name="version">版本</param>
            <returns>流程实例记录数</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.CheckSubProcessInstanceCompleted(System.Data.IDbConnection,System.Int32,System.String,System.Data.IDbTransaction)">
            <summary>
            检查子流程是否结束
            </summary>
            <param name="conn">链接</param>
            <param name="activityInstanceID">活动实例ID</param>
            <param name="activityGUID">活动GUID</param>
            <param name="trans">事务</param>
            <returns>是否结束标志</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.Insert(System.Data.IDbConnection,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.Data.IDbTransaction)">
            <summary>
            流程数据插入
            </summary>
            <param name="conn">链接</param>
            <param name="entity">流程实例实体</param>
            <param name="trans">事务</param>
            <returns>新实例ID</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.Update(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Data.IDbSession)">
            <summary>
            流程实例更新
            </summary>
            <param name="entity">实体</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.Update(Slickflow.Engine.Business.Entity.ProcessInstanceEntity)">
            <summary>
            流程实例更新
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.Update(System.Data.IDbConnection,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.Data.IDbTransaction)">
            <summary>
            流程数据插入
            </summary>
            <param name="conn">链接</param>
            <param name="entity">流程实例实体</param>
            <param name="trans">事务</param>
            <returns>新实例ID</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.CreateNewProcessInstanceObject(Slickflow.Engine.Common.WfAppRunner,Slickflow.Engine.Business.Entity.ProcessEntity,Slickflow.Engine.Xpdl.Node.SubProcessNode)">
            <summary>
            根据流程定义，创建新的流程实例
            </summary>
            <param name="runner">运行者</param>
            <param name="processEntity">流程定义</param>
            <param name="subProcessNode">子流程节点</param>
            <returns>流程实例的ID</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.CalculateOverdueDateTime(System.DateTime,System.String)">
            <summary>
            计算流程实例过期时间
            XmlConvert.ToTimeSpan()
            https://stackoverflow.com/questions/12466188/how-do-i-convert-an-iso8601-timespan-to-a-c-sharp-timespan
            </summary>
            <param name="current">当前时间</param>
            <param name="expression">表达式</param>
            <returns>过期时间</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.Complete(System.Int32,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            流程完成，设置流程的状态为完成
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.Suspend(System.Int32,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            挂起流程实例
            </summary>
            <param name="processInstanceID"></param>
            <param name="runner"></param>
            <param name="session"></param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.Resume(System.Int32,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            恢复流程实例
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.RecallSubProcess(System.Int32,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            恢复子流程
            </summary>
            <param name="invokedActivityInstanceID">激活活动实例ID</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.Reverse(System.Int32,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            返签流程，将流程状态置为返签，并修改流程未完成标志
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <param name="currentUser">当前用户</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.Cancel(Slickflow.Engine.Common.WfAppRunner,System.Data.IDbConnection)">
            <summary>
            流程的取消操作
            </summary>
            <param name="runner">运行者</param>
            <param name="conn">数据库链接</param>
            <returns>设置成功标识</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.Discard(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            废弃单据下所有流程的信息
            </summary>
            <param name="runner">运行者</param>
            <returns>设置成功标识</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.Terminate(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            流程终止操作
            </summary>
            <param name="runner">执行者</param>
            <returns>设置成功标识</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.Terminate(System.Data.IDbConnection,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            终结流程实例
            </summary>
            <param name="conn">链接</param>
            <param name="entity">流程实例</param>
            <param name="userID">用户ID</param>
            <param name="userName">用户名称</param>
            <param name="trans">事务</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.SetOverdue(System.Int32,System.DateTime,Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            设置流程过期时间
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <param name="overdueDateTime">过期时间</param>
            <param name="runner">当前运行用户</param>
            <returns>设置成功标识</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.Delete(System.Int32,System.Boolean)">
            <summary>
            删除不正常的流程实例（流程在取消状态，才可以进行删除！）
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <param name="isForced">不取消，直接删除</param>
            <returns>是否删除标识</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessInstanceManager.Delete(System.String,System.String)">
            <summary>
            删除流程实例包括其关联数据
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <returns>是否删除</returns>
        </member>
        <member name="T:Slickflow.Engine.Business.Manager.ProcessManager">
            <summary>
            流程定义管理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.GetByID(System.Int32)">
            <summary>
            根据ID获取流程实体
            </summary>
            <param name="id">主键ID</param>
            <returns>流程实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.GetByID(System.Data.IDbConnection,System.Int32,System.Data.IDbTransaction)">
            <summary>
            根据ID获取流程实体
            </summary>
            <param name="conn">链接</param>
            <param name="id">主键ID</param>
            <param name="trans">交易</param>
            <returns>流程实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.GetByVersion(System.String,System.String,System.Boolean)">
            <summary>
            根据流程GUID和版本标识获取流程
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">流程版本</param>
            <param name="throwException">是否抛出异常</param>
            <returns>流程实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.GetByVersion(System.Data.IDbConnection,System.String,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            根据版本选择流程
            </summary>
            <param name="conn">数据库链接</param>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <param name="throwException">抛出异常</param>
            <param name="trans">交易</param>
            <returns>流程实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.GetVersionUsing(System.String,System.Boolean)">
            <summary>
            获取当前使用的流程版本
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="isNotThrownException">是否抛出异常</param>
            <returns>流程实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.GetVersionUsing(System.Data.IDbConnection,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            获取当前使用的流程版本
            </summary>
            <param name="conn">数据库连接</param>
            <param name="processGUID">流程GUID</param>
            <param name="isNotThrownException">是否抛出异常</param>
            <param name="trans">事务</param>
            <returns>流程实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.GetByName(System.String,System.String)">
            <summary>
            根据流程名称和版本标识获取流程
            </summary>
            <param name="processName">流程名称</param>
            <param name="version">流程版本</param>
            <returns>流程实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.GetByCode(System.String,System.String)">
            <summary>
            根据流程名称和版本标识获取流程
            </summary>
            <param name="processCode">流程代码</param>
            <param name="version">流程版本</param>
            <returns>流程实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.GetByVersionInternal(System.Data.IDbConnection,System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            按照版本获取流程记录
            </summary>
            <param name="conn">链接</param>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <param name="trans">事务</param>
            <returns>流程实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.GetByMessage(System.String)">
            <summary>
            根据消息主题获取流程
            </summary>
            <param name="topic">消息表达式</param>
            <returns>流程实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.GetSingleByAppType(System.String,Slickflow.Data.IDbSession)">
            <summary>
            根据AppType获取流程记录
            </summary>
            <param name="appType"></param>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.GetAll">
            <summary>
            获取所有流程记录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.GetListSimple">
            <summary>
            获取基本属性的流程定义记录列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.Insert(Slickflow.Engine.Business.Entity.ProcessEntity)">
            <summary>
            新增流程记录
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.Insert(System.Data.IDbConnection,Slickflow.Engine.Business.Entity.ProcessEntity,System.Data.IDbTransaction)">
            <summary>
            新增流程记录
            </summary>
            <param name="conn"></param>
            <param name="entity"></param>
            <param name="trans"></param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.Update(Slickflow.Engine.Business.Entity.ProcessEntity)">
            <summary>
            更新流程记录
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.Update(System.Data.IDbConnection,Slickflow.Engine.Business.Entity.ProcessEntity,System.Data.IDbTransaction)">
            <summary>
            流程定义记录更新
            </summary>
            <param name="conn">链接</param>
            <param name="entity">实体</param>
            <param name="trans">事务</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.UpdateUsingState(System.String,System.String,System.Byte)">
            <summary>
            更新流程版本IsUsing=0
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <param name="usingState">是否启用1-using;0-unusing</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.Upgrade(System.String,System.String,System.String)">
            <summary>
            升级流程记录
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">流程版本</param>
            <param name="newVersion">新版本编号</param>
            <returns>新流程ID</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.UpgradePoolProcess(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.Data.IDbTransaction)">
            <summary>
            升级泳道流程记录
            </summary>
            <param name="conn">数据库链接</param>
            <param name="originProcessID">原流程ID</param>
            <param name="newProcessID">新流程ID</param>
            <param name="newVersion">新版本</param>
            <param name="trans">事务</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.Delete(System.String,System.String)">
            <summary>
            删除流程记录
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.Delete(System.Data.IDbConnection,System.String,System.Data.IDbTransaction)">
            <summary>
            删除流程记录
            </summary>
            <param name="conn">链接</param>
            <param name="processGUID">流程GUID</param>
            <param name="trans">事务</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.DeleteProcess(System.String,System.String)">
            <summary>
            删除流程记录
            </summary>
            <param name="processGUID">流程定义GUID</param>
            <param name="version">版本</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.CreateProcess(Slickflow.Engine.Business.Entity.ProcessEntity)">
            <summary>
            流程定义的创建方法
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.SaveProcessFile(Slickflow.Engine.Business.Entity.ProcessFileEntity)">
            <summary>
            保存XML文件
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.SaveProcessFileSingle(Slickflow.Engine.Business.Entity.ProcessFileEntity)">
            <summary>
            保存XML文件
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.SaveProcessFileWithPool(Slickflow.Engine.Business.Entity.ProcessFileEntity,System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            保存XML文件
            </summary>
            <param name="entity">实体</param>
            <param name="xmlDoc">流程XML文档</param>
            <param name="xmlNodeCollaboration">xml节点</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.SetProcessTimerType(System.String,System.String)">
            <summary>
            更新流程定时器信息
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">流程版本</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.GetPoolProcessList(System.Data.IDbConnection,System.Int32,System.Data.IDbTransaction)">
            <summary>
            或者主流程下的泳道流程列表
            </summary>
            <param name="conn">链接</param>
            <param name="packageID">主图形GUID</param>
            <param name="trans">事务</param>
            <returns>流程实体列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.ImportProcess(System.String)">
            <summary>
            导入XML文档生成流程记录
            </summary>
            <param name="xmlContent">XML文档</param>
            <returns>新流程ID</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.DeletePoolProcess(System.Data.IDbConnection,System.Int32,System.Collections.Generic.List{System.Int32},System.Data.IDbTransaction)">
            <summary>
            删除泳道流程记录
            </summary>
            <param name="conn">数据库链接</param>
            <param name="packageID">主流程ID</param>
            <param name="poolProcessIDs">泳道流程ID列表</param>
            <param name="trans">交易</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.DeletePoolProcess(System.Data.IDbConnection,System.Int32,System.Data.IDbTransaction)">
            <summary>
            删除泳道流程记录
            </summary>
            <param name="conn">数据库链接</param>
            <param name="packageID">主流程ID</param>
            <param name="trans">交易</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.GetProcessFile(System.String,System.String,Slickflow.Engine.Business.Manager.IXPDLStorage)">
            <summary>
            读取流程XML文件内容
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <param name="extStorage">存储</param>
            <returns>流程文件实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.GetProcessFileByID(System.Int32,Slickflow.Engine.Business.Manager.IXPDLStorage)">
            <summary>
            根据ID获取流程文件实体
            </summary>
            <param name="id">流程ID</param>
            <param name="extStorage">外部存储</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.FillProcessFileEntity(Slickflow.Engine.Business.Entity.ProcessEntity,Slickflow.Engine.Business.Manager.IXPDLStorage)">
            <summary>
            转换流程文件实体
            </summary>
            <param name="processEntity">流程实体</param>
            <param name="extStorage">外部存储</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessManager.GetProcessXmlDocument(System.String,System.String,Slickflow.Engine.Business.Manager.IXPDLStorage)">
            <summary>
            读取Xml文档
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <param name="extStorage">存储</param>
            <returns>Xml文档</returns>
        </member>
        <member name="T:Slickflow.Engine.Business.Manager.ProcessVariableManager">
            <summary>
            流程变量管理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessVariableManager.Insert(System.Data.IDbConnection,Slickflow.Engine.Business.Entity.ProcessVariableEntity,System.Data.IDbTransaction)">
            <summary>
            流程变量数据插入
            </summary>
            <param name="conn">链接</param>
            <param name="entity">流程变量实体</param>
            <param name="trans">事务</param>
            <returns>新实例ID</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessVariableManager.Update(System.Data.IDbConnection,Slickflow.Engine.Business.Entity.ProcessVariableEntity,System.Data.IDbTransaction)">
            <summary>
            流程实例更新
            </summary>
            <param name="conn">链接</param>
            <param name="entity">流程变量实体</param>
            <param name="trans">事务</param>
            <returns>新实例ID</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessVariableManager.DeleteVariable(System.Int32)">
            <summary>
            删除变量
            </summary>
            <param name="variableID">变量ID</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessVariableManager.SaveVariable(Slickflow.Engine.Business.Entity.ProcessVariableEntity)">
            <summary>
            设置变量
            </summary>
            <param name="entity">流程变量实体</param>
            <returns>实体ID</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessVariableManager.SaveVariable(System.Data.IDbConnection,Slickflow.Engine.Business.Entity.ProcessVariableEntity,System.Data.IDbTransaction)">
            <summary>
            设置变量
            </summary>
            <param name="conn">链接</param>
            <param name="entity">流程变量实体</param>
            <param name="trans">事务</param>
            <returns>实体ID</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessVariableManager.GetVariableList(System.Int32)">
            <summary>
            获取流程变量列表
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <returns>流程变量列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessVariableManager.GetVariableEntity(Slickflow.Engine.Business.Entity.ProcessVariableQuery)">
            <summary>
            获取流程变量实体
            </summary>
            <param name="query">变量查询</param>
            <returns>实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessVariableManager.GetVariableEntity(System.Int32)">
            <summary>
            获取流程变量实体
            </summary>
            <param name="variableID">流程变量ID</param>
            <returns>实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessVariableManager.GetVariableValue(Slickflow.Engine.Business.Entity.ProcessVariableQuery)">
            <summary>
            获取变量数值
            </summary>
            <param name="query">查询</param>
            <returns>变量的值</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessVariableManager.GetVariableValue(System.Data.IDbConnection,Slickflow.Engine.Business.Entity.ProcessVariableQuery,System.Data.IDbTransaction)">
            <summary>
            获取变量数值
            </summary>
            <param name="conn">链接串</param>
            <param name="query">查询</param>
            <param name="trans">事务</param>
            <returns>变量的值</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessVariableManager.Query(System.Data.IDbConnection,Slickflow.Engine.Business.Entity.ProcessVariableQuery,System.Data.IDbTransaction)">
            <summary>
            流程变量查询
            </summary>
            <param name="conn">链接</param>
            <param name="query">查询对象</param>
            <param name="trans">事务</param>
            <returns>流程变量实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessVariableManager.GetVariable(System.Data.IDbConnection,System.Int32,System.String,System.Data.IDbTransaction)">
            <summary>
            流程变量查询
            </summary>
            <param name="conn">链接</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="name">变量名称</param>
            <param name="trans">事务</param>
            <returns>流程变量实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessVariableManager.GetVariable(System.Data.IDbConnection,System.Int32,System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            流程变量查询
            </summary>
            <param name="conn">链接</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="activityGUID">活动GUID</param>
            <param name="name">变量名称</param>
            <param name="trans">事务</param>
            <returns>流程变量实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessVariableManager.GetVariableOfProcess(System.Data.IDbConnection,System.Int32,System.String,System.Data.IDbTransaction)">
            <summary>
            流程变量查询
            </summary>
            <param name="conn">链接</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="name">变量名称</param>
            <param name="trans">事务</param>
            <returns>流程变量实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessVariableManager.GetVariableOfActivity(System.Data.IDbConnection,System.Int32,System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            活动变量查询
            </summary>
            <param name="conn">链接</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="activityGUID">活动GUID</param>
            <param name="name">变量名称</param>
            <param name="trans">事务</param>
            <returns>流程变量实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.ProcessVariableManager.ValidateProcessVariable(System.Data.IDbConnection,System.Int32,System.String,System.Data.IDbTransaction)">
            <summary>
            验证触发表达式是否满足
            </summary>
            <param name="conn">链接</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="expression">表达式</param>
            <param name="trans">事务</param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Business.Manager.TaskManager">
            <summary>
            任务管理类：包括任务及任务视图对象
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetTaskView(System.Int32)">
            <summary>
            根据任务ID获取任务视图
            </summary>
            <param name="taskID">任务ID</param>
            <returns>任务视图</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetTaskView(System.Data.IDbConnection,System.Int32,System.Data.IDbTransaction)">
            <summary>
            根据任务ID获取任务视图
            </summary>
            <param name="conn">数据库链接</param>
            <param name="taskID">任务ID</param>
            <param name="trans">事务</param>
            <returns>任务视图</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetTask(System.Int32)">
            <summary>
            获取任务
            </summary>
            <param name="taskID">任务ID</param>
            <returns>任务实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetTask(System.Data.IDbConnection,System.Int32,System.Data.IDbTransaction)">
            <summary>
            获取任务
            </summary>
            <param name="conn">数据库链接</param>
            <param name="taskID">任务ID</param>
            <param name="trans">事务</param>
            <returns>任务实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetTaskByActivity(System.Data.IDbConnection,System.Int32,System.Int32,System.Data.IDbTransaction)">
            <summary>
            根据流程信息获取任务
            </summary>
            <param name="conn">链接</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="activityInstanceID">活动实例ID</param>
            <param name="trans">事务</param>
            <returns>任务实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetTaskViewByActivity(System.Int32,System.Int32)">
            <summary>
            根据流程信息获取任务
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <param name="activityInstanceID">活动实例ID</param>
            <returns>任务实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetTaskViewByActivity(System.Data.IDbConnection,System.Int32,System.Int32,System.Data.IDbTransaction)">
            <summary>
            根据流程信息获取任务
            </summary>
            <param name="conn">链接</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="activityInstanceID">活动实例ID</param>
            <param name="trans">事务</param>
            <returns>任务实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.IsLastTask(System.Int32)">
            <summary>
            判断任务是否是当前节点最后一个任务
            单一节点：返回True
            多实例节点：根据实例个数判断
            </summary>
            <param name="taskID">任务ID</param>
            <returns>是否最后一条任务</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetRunningTasks(Slickflow.Engine.Business.Entity.TaskQuery)">
            <summary>
            获取当前用户运行中的任务
            </summary>
            <param name="query"></param>
            <param name="allRowsCount">任务记录数</param>
            <returns>任务视图列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetReadyTasks(Slickflow.Engine.Business.Entity.TaskQuery)">
            <summary>
            获取当前用户待办的任务
            </summary>
            <param name="query">查询实体</param>
            <returns>任务列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetFirstRunningTask(System.Int32)">
            <summary>
            获取正在运行的任务
            </summary>
            <param name="activityInstanceID">活动实例ID</param>
            <returns>任务视图</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetCompletedTasks(Slickflow.Engine.Business.Entity.TaskQuery)">
            <summary>
            获取已经完成任务
            </summary>
            <param name="query">查询实体</param>
            <returns>任务列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetTasksPaged(Slickflow.Engine.Business.Entity.TaskQuery,System.Int32)">
            <summary>
            获取任务（分页）
            </summary>
            <param name="query">查询实体</param>
            <param name="activityState">活动状态</param>
            <returns>活动列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetTaskToDoListTop">
            <summary>
            Get Top 10 task todo list
            仅供用于数据展示使用
            </summary>
            <returns>task list</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetTaskDoneListTop">
            <summary>
            Get Top 10 task done list
            仅供用于数据展示使用
            </summary>
            <returns>task list</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetTaskOfMine(System.Data.IDbConnection,System.Int32,System.String,System.Data.IDbTransaction)">
            <summary>
            获取我的任务
            </summary>
            <param name="conn">数据库链接</param>
            <param name="activityInstanceID">活动实例ID</param>
            <param name="userID">用户ID</param>
            <param name="trans">数据库事务</param>
            <returns>任务视图实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetTaskOfMine(System.Data.IDbConnection,System.Int32,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            获取我的任务
            </summary>
            <param name="conn">数据库链接</param>
            <param name="activityInstanceID">活动实例ID</param>
            <param name="userID">用户ID</param>
            <param name="notThrowException">是否抛出异常</param>
            <param name="trans">数据库事务</param>
            <returns>任务视图实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetTaskOfMine(System.String,System.String,System.String)">
            <summary>
            根据应用实例、流程GUID，办理用户Id获取任务列表
            </summary>
            <param name="appInstanceID">App实例ID</param>
            <param name="processGUID">流程定义GUID</param>
            <param name="userID">用户Id</param>
            <returns>任务实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetTaskOfMine(System.Data.IDbConnection,System.String,System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            根据应用实例、流程GUID，办理用户Id获取任务列表
            </summary>
            <param name="conn">链接</param>
            <param name="appInstanceID">App实例ID</param>
            <param name="processGUID">流程定义GUID</param>
            <param name="userID">用户Id</param>
            <param name="trans">事务</param>
            <returns>任务实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetTaskOfMine(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            获取任务视图
            </summary>
            <param name="runner">当前运行者</param>
            <returns>任务视图</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetTaskOfMine(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            获取任务视图
            </summary>
            <param name="conn">链接</param>
            <param name="runner">当前运行者</param>
            <param name="trans">事务</param>
            <returns>任务视图</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.IsMine(Slickflow.Engine.Business.Entity.TaskViewEntity,System.String)">
            <summary>
            判断任务是否属于某个用户
            </summary>
            <param name="entity">任务</param>
            <param name="userID">用户Id</param>
            <returns>是否标志</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.CheckTaskStateInRunningState(Slickflow.Engine.Business.Entity.TaskViewEntity)">
            <summary>
            判断任务处于运行状态
            </summary>
            <param name="task">任务</param>
            <returns>是否可运行</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetReadyTaskOfApp(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            获取待办任务(业务实例)
            </summary>
            <param name="runner">运行者</param>
            <returns>任务列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GetTaskListEMailUnSent">
            <summary>
            获取未发送邮件通知的待办任务列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.Insert(Slickflow.Engine.Business.Entity.TaskEntity,Slickflow.Data.IDbSession)">
            <summary>
            插入任务数据
            </summary>
            <param name="entity">任务实体</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.Insert(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.PerformerList,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            插入任务数据
            </summary>
            <param name="activityInstance">活动实体</param>
            <param name="performers">执行者列表</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.Insert(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.Performer,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            插入任务数据
            </summary>
            <param name="activityInstance">活动实例</param>
            <param name="performer">执行者</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.Insert(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,System.String,System.String,System.String,Slickflow.Data.IDbSession,System.Nullable{System.Int32})">
            <summary>
            插入任务数据(创建任务)
            </summary>
            <param name="activityInstance">活动实例</param>
            <param name="performerID">执行者Id</param>
            <param name="performerName">执行者名称</param>
            <param name="runnerID">运行者ID</param>
            <param name="runnerName">运行者名称</param>
            <param name="session">会话</param>
            <param name="entrustedTaskID">被委托（原始）任务ID</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.Renew(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            重新生成任务(只限于会签多实例下的子节点)
            </summary>
            <param name="sourceActivityInstance">原活动实例</param>
            <param name="newInstance">新活动实例</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.Update(Slickflow.Engine.Business.Entity.TaskEntity,Slickflow.Data.IDbSession)">
            <summary>
            更新任务数据
            </summary>
            <param name="entity">任务实体</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.SetTaskType(System.Int32,Slickflow.Engine.Common.TaskTypeEnum,Slickflow.Data.IDbSession)">
            <summary>
            设置任务类型
            </summary>
            <param name="taskID">任务ID</param>
            <param name="taskType">任务类型</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.SetTaskRead(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            读取任务，设置任务为已读状态
            </summary>
            <param name="taskRunner">运行者实体</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.SetTaskEMailSent(System.Int32)">
            <summary>
            更新任务邮件发送状态
            </summary>
            <param name="taskID">任务ID</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.SetTaskState(Slickflow.Engine.Business.Entity.TaskEntity,System.String,System.String,Slickflow.Engine.Common.TaskStateEnum,Slickflow.Data.IDbSession)">
            <summary>
            设置任务状态
            </summary>
            <param name="task">任务实体</param>
            <param name="userID">用户ID</param>
            <param name="userName">用户名称</param>
            <param name="taskState">任务状态</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.EndTaskState(System.Int64,Slickflow.Engine.Common.TaskStateEnum,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            设置任务完成
            </summary>
            <param name="taskID">任务ID</param>
            <param name="taskState">任务状态</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.Complete(System.Int32,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            设置任务完成
            </summary>
            <param name="taskID">任务ID</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.Withdraw(System.Int64,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            设置任务撤销
            </summary>
            <param name="taskID">任务ID</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.SendBack(System.Int64,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            设置任务退回
            </summary>
            <param name="taskID">任务ID</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.Entrust(Slickflow.Engine.Business.Entity.TaskEntrustedEntity,System.Boolean)">
            <summary>
            创建新的委托任务
            </summary>
            <param name="entity">任务委托实体</param>
            <param name="cancalOriginalTask">是否取消原始任务</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.Replace(System.Int32,System.Collections.Generic.List{Slickflow.Engine.Business.Entity.TaskReplacedEntity},Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            取代当前活动下的任务办理人员
            </summary>
            <param name="activityInstanceID">活动ID</param>
            <param name="replaced">替代用户</param>
            <param name="runner">运行用户</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GenerateActivityAssignedUserIDs(System.Collections.Generic.List{Slickflow.Engine.Business.Entity.TaskReplacedEntity})">
            <summary>
            获取UserIds字符串
            </summary>
            <param name="userList"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.GenerateActivityAssignedUserNames(System.Collections.Generic.List{Slickflow.Engine.Business.Entity.TaskReplacedEntity})">
            <summary>
            获取UserNames字符串
            </summary>
            <param name="userList"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.CancelTask(System.Int32,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            取消任务办理
            </summary>
            <param name="activityInstanceID">活动实例id</param>
            <param name="runner">运行着</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TaskManager.Delete(System.Data.IDbConnection,System.Int64,System.Data.IDbTransaction)">
            <summary>
            任务删除
            </summary>
            <param name="conn">数据库连接</param>
            <param name="taskID">任务ID</param>
            <param name="trans">事务</param>
        </member>
        <member name="T:Slickflow.Engine.Business.Manager.TransitionInstanceManager">
            <summary>
            节点转移管理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TransitionInstanceManager.CreateTransitionInstanceObject(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.WfAppRunner,System.Byte)">
            <summary>
            创建转移实例数据
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivityInstance">来源活动实例</param>
            <param name="toActivityInstance">目的活动实例</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">飞越类型</param>
            <param name="runner">执行者</param>
            <param name="conditionParseResult">条件解析结果</param>
            <returns>转移实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TransitionInstanceManager.Insert(System.Data.IDbConnection,Slickflow.Engine.Business.Entity.TransitionInstanceEntity,System.Data.IDbTransaction)">
            <summary>
            插入方法
            </summary>
            <param name="conn">数据库连接</param>
            <param name="entity">实体</param>
            <param name="trans">事务</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TransitionInstanceManager.Delete(System.Data.IDbConnection,System.Int32,System.Data.IDbTransaction)">
            <summary>
            删除转移实例
            </summary>
            <param name="conn">数据库连接</param>
            <param name="transitionInstanceID">转移实例ID</param>
            <param name="trans">事务</param>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TransitionInstanceManager.GetById(System.Int32)">
            <summary>
            根据ID获取实例数据
            </summary>
            <param name="transitionInstanceID">转移ID</param>
            <returns>转移实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TransitionInstanceManager.GetEndTransition(System.String,System.String,System.String)">
            <summary>
            获取结束转移数据
            </summary>
            <param name="appName">应用名称</param>
            <param name="appInstanceID">应用实例ID</param>
            <param name="processGUID">流程GUID</param>
            <returns>转移实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TransitionInstanceManager.GetLastTaskTransition(System.String,System.String,System.String)">
            <summary>
            获取最后的转移实体数据
            </summary>
            <param name="appName">应用名称</param>
            <param name="appInstanceID">应用实例ID</param>
            <param name="processGUID">流程GUID</param>
            <returns>转移实体数据</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TransitionInstanceManager.GetWorkItemTransitonInstance(System.String,System.String)">
            <summary>
            获得去向节点是WorkItem类型的转移列表
            </summary>
            <param name="appInstanceID">应用ID</param>
            <param name="processGUID">流程GUID</param>
            <returns>转移实例列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TransitionInstanceManager.GetTransitonInstance(System.String,System.String,Slickflow.Engine.Common.ActivityTypeEnum)">
            <summary>
            根据去向节点类型选择转移数据
            </summary>
            <param name="appInstanceID">应用实例ID</param>
            <param name="processGUID">流程GUID</param>
            <param name="toActivityType">到的活动节点类型</param>
            <returns>转移实体列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TransitionInstanceManager.GetTransitionInstanceList(System.String,System.String,System.String)">
            <summary>
            获取转移数据列表
            </summary>
            <param name="appInstanceID">应用实例ID</param>
            <param name="processGUID">流程GUID</param>
            <param name="version">流程版本</param>
            <returns>转移实例列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TransitionInstanceManager.GetTransitionInstanceList(System.String,System.String,System.Int32)">
            <summary>
            获取转移数据列表
            </summary>
            <param name="appInstanceID">应用实例ID</param>
            <param name="processGUID">流程GUID</param>
            <param name="processInstanceID">流程实例ID</param>
            <returns>转移实例列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TransitionInstanceManager.GetTargetActivityInstanceList(System.Int32)">
            <summary>
            获取当前节点的下一步已经发出的活动实例列表
            </summary>
            <param name="fromActivityInstanceID">起始活动实例ID</param>
            <returns>下一步活动实例列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TransitionInstanceManager.GetTargetActivityInstanceList(System.Int32,Slickflow.Data.IDbSession)">
            <summary>
            获取当前节点的下一步已经发出的活动实例列表
            </summary>
            <param name="fromActivityInstanceID">起始活动实例ID</param>
            <param name="session">数据会话</param>
            <returns>下一步活动实例列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TransitionInstanceManager.GetTargetActivityInstanceIDs(System.Int32,Slickflow.Data.IDbSession)">
            <summary>
            遍历下一步活动实例的ID
            </summary>
            <param name="fromActivityInstanceID">起始活动实例ID</param>
            <param name="session">数据会话</param>
            <returns>下一步活动实例ID列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Business.Manager.TransitionInstanceManager.IsTransiionInstancedAndConditionParsedOK(System.String,System.Collections.Generic.IList{Slickflow.Engine.Business.Entity.TransitionInstanceEntity})">
            <summary>
            判读定义的Transition是否已经被实例化执行
            </summary>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionInstanceList">转移实例列表</param>
            <returns>布尔值</returns>
        </member>
        <member name="T:Slickflow.Engine.Common.ActionParameterInternal">
            <summary>
            调用外部API的参数封装类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.ActivityResource">
            <summary>
            活动上的资源类
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.ActivityResource.AppRunner">
            <summary>
            当前流程执行用户
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.ActivityResource.NextActivityPerformers">
            <summary>
            带有执行人员信息的下一步节点列表
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.ActivityResource.ConditionKeyValuePair">
            <summary>
            条件Key-Value对
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Common.ActivityResource.#ctor(Slickflow.Engine.Common.WfAppRunner,System.Collections.Generic.IDictionary{System.String,Slickflow.Engine.Common.PerformerList},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            构造函数
            </summary>
            <param name="runner">运行者</param>
            <param name="nextActivityPerformers">下一步步骤人员列表</param>
            <param name="conditionKeyValuePair">条件参数</param>
        </member>
        <member name="M:Slickflow.Engine.Common.ActivityResource.GetPreviousPerformerList(System.Collections.Generic.IList{Slickflow.Engine.Common.KeyValuePairWrapper},System.String)">
            <summary>
            获取特定步骤的办理人员列表
            </summary>
            <param name="previousActivityPerformers">上一步办理人员列表</param>
            <param name="activityGUID">节点GUID</param>
            <returns>办理人员列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Common.ActivityResource.CreateNextActivityPerformers(System.String,System.String,System.String)">
            <summary>
            创建下一步活动执行者列表
            </summary>
            <param name="activityGUID">活动节点GUID</param>
            <param name="userID">用户ID</param>
            <param name="userName">用户名称</param>
            <returns>步骤执行者列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Common.ActivityResource.CreateNextActivityPerformers(System.Collections.Generic.IList{Slickflow.Engine.Common.NodeView},System.String,System.String)">
            <summary>
            创建下一步活动执行者列表
            </summary>
            <param name="nextActivityTree">活动节点列表</param>
            <param name="userID">用户ID</param>
            <param name="userName">用户名称</param>
            <returns>步骤执行者列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Common.ActivityResource.CreateNextActivityPerformers(System.String,System.Collections.Generic.IList{Slickflow.Module.Resource.Role})">
            <summary>
            创建下一步活动执行者列表
            </summary>
            <param name="activityGUID">活动节点GUID</param>
            <param name="roleList">角色列表</param>
            <returns>步骤执行者列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Common.ActivityResource.CreateNextActivityPerformers(System.Collections.Generic.IDictionary{System.String,Slickflow.Engine.Common.PerformerList},System.String,System.Collections.Generic.IList{Slickflow.Module.Resource.Role})">
            <summary>
            创建下一步活动执行者列表
            </summary>
            <param name="nextActivityPerformers">下一步活动人员列表</param>
            <param name="activityGUID">活动节点GUID</param>
            <param name="roleList">角色列表</param>
        </member>
        <member name="M:Slickflow.Engine.Common.ActivityResource.CreateNextActivityPerformers(System.String,Slickflow.Engine.Common.PerformerList)">
            <summary>
            创建下一步活动执行者列表
            </summary>
            <param name="activityGUID">活动节点GUID</param>
            <param name="performerList">执行者列表</param>
            <returns>步骤执行者列表</returns>
        </member>
        <member name="T:Slickflow.Engine.Common.ActivityStateEnum">
            <summary>
            节点运行状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ActivityStateEnum.Ready">
            <summary>
            准备状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ActivityStateEnum.Running">
            <summary>
            运行状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ActivityStateEnum.Completed">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ActivityStateEnum.Suspended">
            <summary>
            挂起
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ActivityStateEnum.Withdrawed">
            <summary>
            撤销状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ActivityStateEnum.Sendbacked">
            <summary>
            退回状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ActivityStateEnum.Cancelled">
            <summary>
            系统内部标志取消
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ActivityStateEnum.Terminated">
            <summary>
            非正常结束（比如超时自动终结）
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.ActivityTypeEnum">
            <summary>
            活动类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ActivityTypeEnum.Unknown">
            <summary>
            未知类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ActivityTypeEnum.StartNode">
            <summary>
            开始事件节点
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ActivityTypeEnum.EndNode">
            <summary>
            结束事件节点
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ActivityTypeEnum.IntermediateNode">
            <summary>
            中间事件节点
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ActivityTypeEnum.TaskNode">
            <summary>
            人工任务节点
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ActivityTypeEnum.SubProcessNode">
            <summary>
            子流程节点
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ActivityTypeEnum.MultiSignNode">
            <summary>
            多实例节点
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ActivityTypeEnum.GatewayNode">
            <summary>
            网关节点
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ActivityTypeEnum.ServiceNode">
            <summary>
            代码服务节点
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ActivityTypeEnum.ScriptNode">
            <summary>
            脚本节点
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.ApprovalStatusEnum">
            <summary>
            节点运行状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ApprovalStatusEnum.Refused">
            <summary>
            拒绝
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ApprovalStatusEnum.Null">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ApprovalStatusEnum.Agreed">
            <summary>
            同意
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.WithdrawOperationTypeEnum">
            <summary>
            撤销操作处理类型
            MIS: Multiple Instance Sequence 多实例串行
            MIP: Multiple Instance Parallel 多实例并行
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.WithdrawOperationTypeEnum.Default">
            <summary>
            缺省值
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.WithdrawOperationTypeEnum.Normal">
            <summary>
            普通模式
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.WithdrawOperationTypeEnum.MISFirstOneIsRunning">
            <summary>
            第一个多实例子节点的场景
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.WithdrawOperationTypeEnum.MISOneIsRunning">
            <summary>
            串行多实例节点的中间节点
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.WithdrawOperationTypeEnum.MISPreviousIsLastOne">
            <summary>
            当前运行节点上一步是最后一个多实例子节点的场景
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.WithdrawOperationTypeEnum.MIPAllIsInReadyState">
            <summary>
            并行多实例刚发出(子节点全部处于待办状态)
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.WithdrawOperationTypeEnum.MIPSeveralIsRunning">
            <summary>
            并行多实例中间节点，有已经完成的
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.WithdrawOperationTypeEnum.MIPPreviousIsLastOne">
            <summary>
            当前运行节点上一步是最后一个多实例子节点的场景
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.WithdrawOperationTypeEnum.GatewayFollowedByParalleledNodes">
            <summary>
            前置网关引起的多个并行节点存在，不是会签多实例节点
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.WithdrawOperationTypeEnum.ExistedComplexParalleledNodes">
            <summary>
            其它复杂模式的多个并行节点存在
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.SendBackOperationTypeEnum">
            <summary>
            退回操作处理类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.SendBackOperationTypeEnum.Default">
            <summary>
            缺省值
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.SendBackOperationTypeEnum.Normal">
            <summary>
            普通模式
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.SendBackOperationTypeEnum.MultipleInstance">
            <summary>
            多实例节点模式
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.SendBackOperationTypeEnum.MISFirstOneIsRunning">
            <summary>
            第一个多实例子节点的场景
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.SendBackOperationTypeEnum.MISOneIsRunning">
            <summary>
            串行多实例节点的中间节点
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.SendBackOperationTypeEnum.MISPreviousIsLastOne">
            <summary>
            当前运行节点上一步是最后一个多实例子节点的场景
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.SendBackOperationTypeEnum.MIPAllIsInReadyState">
            <summary>
            并行多实例刚发出(子节点全部处于待办状态)
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.SendBackOperationTypeEnum.MIPOneIsRunning">
            <summary>
            并行多实例中间节点，只有一个是运行状态，其他的是待办状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.SendBackOperationTypeEnum.MIPSeveralIsRunning">
            <summary>
            并行多实例中间节点，有已经完成的
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.SendBackOperationTypeEnum.MIPAllIsInCompletedState">
            <summary>
            当前运行节点上一步是最后一个多实例子节点的场景
            此时并行多实例节点状态完成
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.SendBackOperationTypeEnum.NormalParalleledRunningNodesQuiredByTaskID">
            <summary>
            多个并行节点存在，但不是会签等多实例节点
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.SendBackOperationTypeEnum.GatewayFollowedByParalleledNodes">
            <summary>
            多个并行节点存在，但不是会签多实例节点
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.SendBackOperationTypeEnum.ExistedComplexParalleledNodes">
            <summary>
            其它复杂模式的多个并行节点存在
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.BackwardTypeEnum">
            <summary>
            节点退回枚举类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.BackwardTypeEnum.Withdrawed">
            <summary>
            撤销
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.BackwardTypeEnum.Sendback">
            <summary>
            退回
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.BackwardTypeEnum.Reversed">
            <summary>
            返签
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.BoundaryTypeEnum">
            <summary>
            Event Boundary Type
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.ConditionParseResultEnum">
            <summary>
            条件解析结果的枚举类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ConditionParseResultEnum.NotPassed">
            <summary>
            未通过
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ConditionParseResultEnum.Passed">
            <summary>
            满足条件
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.ConditionTypeEnum">
            <summary>
            条件类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ConditionTypeEnum.Expression">
            <summary>
            表达式
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ConditionTypeEnum.Rule">
            <summary>
            规则
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.ControlParameterSheet">
            <summary>
            动态变量控制列表清单
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.CrossOverGatewayDetail">
            <summary>
            跨网关对象封装
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.CurrentRunningNodeMap">
            <summary>
            当前运行节点Map信息
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Common.CurrentRunningNodeMap.Instance(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.Boolean,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.Collections.Generic.IList{Slickflow.Engine.Common.NodeView})">
            <summary>
            创建实例方法
            </summary>
            <param name="isMine"></param>
            <param name="previousActivityInstance"></param>
            <param name="nextActivityTree"></param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Common.CurrentRunningNodeMapComplex">
            <summary>
            当前流程运行节点的Map信息
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Common.CurrentRunningNodeMapComplex.Instance(Slickflow.Engine.Business.Entity.TaskViewEntity,System.Collections.Generic.IList{Slickflow.Engine.Business.Entity.ActivityInstanceEntity},System.Collections.Generic.IList{Slickflow.Engine.Common.NodeView})">
            <summary>
            创建实例
            </summary>
            <param name="taskView"></param>
            <param name="previousActivityInstance"></param>
            <param name="nextActivityTree"></param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Common.DLRuntimeInteroperationException">
            <summary>
            动态语言运行类交互异常类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Common.DLRuntimeInteroperationException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:Slickflow.Engine.Common.DLRuntimeInteroperationException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message">消息</param>
            <param name="ex">异常</param>
        </member>
        <member name="T:Slickflow.Engine.Common.EventTriggerEnum">
            <summary>
            Event Trigger Type
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.EventTriggerEnum.None">
            <summary>
            空白
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.EventTriggerEnum.Timer">
            <summary>
            定时
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.EventTriggerEnum.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.EventTriggerEnum.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.EventTriggerEnum.Escalation">
            <summary>
            升级
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.EventTriggerEnum.Cancel">
            <summary>
            取消
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.EventTriggerEnum.Compensation">
            <summary>
            补偿
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.EventTriggerEnum.Conditional">
            <summary>
            条件
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.EventTriggerEnum.Link">
            <summary>
            链接
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.EventTriggerEnum.Signal">
            <summary>
            信号
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.EventTriggerEnum.Terminate">
            <summary>
            终结
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.FlowTypeEnum">
            <summary>
            转移类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.FlowTypeEnum.Forward">
            <summary>
            前行
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.FlowTypeEnum.Backward">
            <summary>
            后退
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.GatewayDirectionEnum">
            <summary>
            流程分支路由选择
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.GatewayDirectionEnum.None">
            <summary>
            未指定
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.GatewayDirectionEnum.OrSplit">
            <summary>
            或分支
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.GatewayDirectionEnum.XOrSplit">
            <summary>
            异或分支
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.GatewayDirectionEnum.AndSplit">
            <summary>
            并行分支
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.GatewayDirectionEnum.AndSplitMI">
            <summary>
            多实例并行分支
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.GatewayDirectionEnum.ApprovalOrSplit">
            <summary>
            审核网关分支
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.GatewayDirectionEnum.OrJoin">
            <summary>
            或合并
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.GatewayDirectionEnum.XOrJoin">
            <summary>
            异或合并
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.GatewayDirectionEnum.EOrJoin">
            <summary>
            增强或合并
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.GatewayDirectionEnum.AndJoin">
            <summary>
            并行合并
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.GatewayDirectionEnum.AndJoinMI">
            <summary>
            与合并(多实例)
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.GatewayJoinPassEnum">
            <summary>
            合并通过类型设置
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.GatewayJoinPassEnum.None">
            <summary>
            空白
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.GatewayJoinPassEnum.Count">
            <summary>
            满足分支数目，才可以通过
            branches count for merging pass
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.GatewayJoinPassEnum.Forced">
            <summary>
            满足强制必须合并分支，才可以通过
            the forced branch to merge passing
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.GatewaySplitJoinTypeEnum">
            <summary>
            路由分支或合并类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.GatewaySplitJoinTypeEnum.Split">
            <summary>
            分支类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.GatewaySplitJoinTypeEnum.Join">
            <summary>
            合并类型
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.ImplementationTypeEnum">
            <summary>
            任务实现类型的枚举类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ImplementationTypeEnum.Manual">
            <summary>
            人工参与
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ImplementationTypeEnum.Plugin">
            <summary>
            插件方式执行
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ImplementationTypeEnum.Script">
            <summary>
            脚本方式
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ImplementationTypeEnum.Automantic">
            <summary>
            自动类型
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.JobTimerStatusEnum">
            <summary>
            作业定时器状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.JobTimerStatusEnum.None">
            <summary>
            空
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.JobTimerStatusEnum.Ready">
            <summary>
            预备
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.JobTimerStatusEnum.Completed">
            <summary>
            关闭
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.JobTimerTypeEnum">
            <summary>
            作业定时器类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.JobTimerTypeEnum.None">
            <summary>
            空
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.JobTimerTypeEnum.Timer">
            <summary>
            定时
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.JobTimerTypeEnum.Conditional">
            <summary>
            条件
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.JobTimerTypeEnum.EMail">
            <summary>
            邮件
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.JobTimerTypeEnum.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.JumpOptionEnum">
            <summary>
            跳转选项
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.JumpOptionEnum.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.JumpOptionEnum.Startup">
            <summary>
            流程发起位置
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.JumpOptionEnum.End">
            <summary>
            流程结束位置
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.KeyValuePairWrapper">
            <summary>
            序列化Key-Value(WebAPI)
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.LogEventType">
            <summary>
            日志事件类型
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.LogPriority">
            <summary>
            日志优先级
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.MessageDirectionEnum">
            <summary>
            消息接收类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.MessageDirectionEnum.None">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.MessageDirectionEnum.Catch">
            <summary>
            捕获消息
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.MessageDirectionEnum.Throw">
            <summary>
            抛出消息
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.NextPerformerIntTypeEnum">
            <summary>
            下一步办理用户指定类型
            内部使用的执行用户操作类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.NextPerformerIntTypeEnum.Specific">
            <summary>
            明确指定步骤和角色列表
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.NextPerformerIntTypeEnum.Definition">
            <summary>
            读取节点定义来源
            包括系统定义的角色及用户列表
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.NextPerformerIntTypeEnum.Single">
            <summary>
            模拟使用单一用户进行的测试
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.NextPerformerIntTypeEnum.Traced">
            <summary>
            已经流转过得上一步，用于退回
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.NextStepInfo">
            <summary>
            下一步的步骤信息
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.NextStepInfo.Message">
            <summary>
            步骤消息描述
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.NextStepInfo.NextActivityRoleUserTree">
            <summary>
            下一步活动角色用户树
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.NextStepInfo.NextActivityPerformers">
            <summary>
            下一步活动预选执行用户
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Common.NextStepUtility.DeserializeNextStepPerformers(System.String)">
            <summary>
            根据文本内容反序列化下一步人员列表
            </summary>
            <param name="jsonNextStep">json格式的步骤文本</param>
            <returns>下一步步骤对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Common.NextStepUtility.SerializeNextStepPerformers(System.Collections.Generic.IDictionary{System.String,Slickflow.Engine.Common.PerformerList})">
            <summary>
            反序列化步骤人员列表
            </summary>
            <param name="nextSteps">下一步步骤对象</param>
            <returns>json格式的步骤文本</returns>
        </member>
        <member name="M:Slickflow.Engine.Common.NextStepUtility.CreateNextStepPerformerList(System.String,System.String,System.String)">
            <summary>
            生成下一步人员列表
            </summary>
            <param name="activityGUID">活动GUID</param>
            <param name="userID">用户ID</param>
            <param name="userName">用户名称</param>
            <returns>步骤列表</returns>
        </member>
        <member name="T:Slickflow.Engine.Common.NodeImage">
            <summary>
            流转信息
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.NodeImage.ID">
            <summary>
            节点实例ID
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.NodeImage.ActivityName">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.NodePassedResult">
            <summary>
            节点通过类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.NodePassedResult.NodePassedType">
            <summary>
            节点通过类型熟悉
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Common.NodePassedResult.#ctor(Slickflow.Engine.Common.NodePassedTypeEnum)">
            <summary>
            构造函数
            </summary>
            <param name="passedType">通过类型</param>
        </member>
        <member name="M:Slickflow.Engine.Common.NodePassedResult.Create(Slickflow.Engine.Common.NodePassedTypeEnum)">
            <summary>
            创建方法
            </summary>
            <param name="passedType">通过类型</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Common.NodePassedResult.CreateByApprovalStatus(System.Int16)">
            <summary>
            根据审批状态创建结果对象
            </summary>
            <param name="approvalStatus">审批状态</param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Common.NodePassedTypeEnum">
            <summary>
            节点通过类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.NodePassedTypeEnum.Default">
            <summary>
            缺省状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.NodePassedTypeEnum.Passed">
            <summary>
            允许通过
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.NodePassedTypeEnum.NotPassed">
            <summary>
            拒绝状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.NodePassedTypeEnum.NeedToBeMoreApproved">
            <summary>
            需要更多审批同意
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.NodeView">
            <summary>
            工作流流转节点的视图对象
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.NodeView.ActivityGUID">
            <summary>
            活动节点GUID
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.NodeView.ActivityName">
            <summary>
            活动节点名称
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.NodeView.ActivityType">
            <summary>
            活动类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.NodeView.ActivityCode">
            <summary>
            活动节点编码
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.NodeView.ActivityUrl">
            <summary>
            页面地址
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.NodeView.MyProperties">
            <summary>
            活动关联的自定义属性
            JSON数据格式
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.PackageTypeEnum">
            <summary>
            流程类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.PackageTypeEnum.Package">
            <summary>
            协作流程包 Collaboration Package
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.PackageTypeEnum.Pool">
            <summary>
            泳道流程 Pool Process
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.Partaker">
            <summary>
            Partaker entity
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.PartakerTypeEnum">
            <summary>
            Partaker Type
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.PartakerTypeEnum.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.PartakerTypeEnum.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.Performer">
            <summary>
            任务的执行者对象
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.PerformerList">
            <summary>
            执行者列表类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.PerformerBuilder">
            <summary>
            执行者构造类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Common.PerformerBuilder.CreatePerformerList(System.String,System.String)">
            <summary>
            创建活动节点执行者列表
            </summary>
            <param name="userID">用户ID</param>
            <param name="userName">用户名称</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Common.PerformerBuilder.CreatePerformerList(System.Collections.Generic.IList{Slickflow.Module.Resource.Role})">
            <summary>
            创建活动节点执行者列表
            </summary>
            <param name="roleList">角色列表</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Common.PerformerBuilder.GenerateActivityAssignedUserIDs(Slickflow.Engine.Common.PerformerList)">
            <summary>
            生成任务办理人ID字符串列表
            </summary>
            <param name="performerList">操作者列表</param>
            <returns>ID字符串列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Common.PerformerBuilder.GenerateActivityAssignedUserNames(Slickflow.Engine.Common.PerformerList)">
            <summary>
            生成办理人名称的字符串列表
            </summary>
            <param name="performerList">操作者列表</param>
            <returns>ID字符串列表</returns>
        </member>
        <member name="T:Slickflow.Engine.Common.PreviousStepInfo">
            <summary>
            上一步活动信息
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.PreviousStepInfo.PreviousActivityRoleUserTree">
            <summary>
            下一步活动角色用户树
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.PreviousStepInfo.HasGatewayPassed">
            <summary>
            是否经历过网关节点
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.ProcessStartTypeEnum">
            <summary>
            流程启动类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ProcessStartTypeEnum.None">
            <summary>
            默认空白
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ProcessStartTypeEnum.Timer">
            <summary>
            定时启动
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ProcessStartTypeEnum.Message">
            <summary>
            消息启动
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.ProcessEndTypeEnum">
            <summary>
            流程结束类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ProcessEndTypeEnum.None">
            <summary>
            默认空白
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ProcessEndTypeEnum.Timer">
            <summary>
            定时结束
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ProcessEndTypeEnum.Message">
            <summary>
            消息结束
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.ProcessStateEnum">
            <summary>
            流程状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ProcessStateEnum.NotStart">
            <summary>
            未启动，流程记录为空
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ProcessStateEnum.Ready">
            <summary>
            准备状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ProcessStateEnum.Running">
            <summary>
            运行状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ProcessStateEnum.Completed">
            <summary>
            完成
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ProcessStateEnum.Suspended">
            <summary>
            挂起
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ProcessStateEnum.Canceled">
            <summary>
            取消
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ProcessStateEnum.Discarded">
            <summary>
            废弃
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ProcessStateEnum.Terminated">
            <summary>
            自然终止（比如超期）
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.ProcessVariableTypeEnum">
            <summary>
            变量范围类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ProcessVariableTypeEnum.Process">
            <summary>
            流程
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ProcessVariableTypeEnum.Activity">
            <summary>
            活动
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.ReceiverTypeEnum">
            <summary>
            接受者类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ReceiverTypeEnum.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ReceiverTypeEnum.Superior">
            <summary>
            上级
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ReceiverTypeEnum.Compeer">
            <summary>
            同级
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ReceiverTypeEnum.Subordinate">
            <summary>
            下属
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.ReceiverTypeEnum.ProcessInitiator">
            <summary>
            流程发起人
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.SignForwardStepInfo">
            <summary>
            上一步活动信息
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.SignForwardStepInfo.SignForwardRoleUserTree">
            <summary>
            下一步活动角色用户树
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.SubInfo">
            <summary>
            子流程对象
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.SubProcessTypeEnum">
            <summary>
            子流程类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.SubProcessTypeEnum.None">
            <summary>
            未指定类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.SubProcessTypeEnum.Nested">
            <summary>
            嵌入式类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.SubProcessTypeEnum.Referenced">
            <summary>
            外部引用类型
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.TaskEMailSentStatusEnum">
            <summary>
            邮件发送状态类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TaskEMailSentStatusEnum.UnSent">
            <summary>
            未发送
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TaskEMailSentStatusEnum.Sent">
            <summary>
            发送(smtp不保证一定发送成功）
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.TaskStateEnum">
            <summary>
            任务状态类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TaskStateEnum.Waiting">
            <summary>
            等待办理
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TaskStateEnum.Reading">
            <summary>
            办理状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TaskStateEnum.Completed">
            <summary>
            正常完成
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TaskStateEnum.Withdrawed">
            <summary>
            撤销
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TaskStateEnum.SendBacked">
            <summary>
            退回
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TaskStateEnum.Closed">
            <summary>
            多人可以办理，当别人办理完后，置关闭状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TaskStateEnum.Canceled">
            <summary>
            没有办理，直接取消
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.TaskTypeEnum">
            <summary>
            任务类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TaskTypeEnum.Manual">
            <summary>
            人工
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TaskTypeEnum.Automantic">
            <summary>
            自动化
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TransitionDirectionTypeEnum.Forward">
            <summary>
            前进方向
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TransitionDirectionTypeEnum.Bidirection">
            <summary>
            可双向
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TransitionDirectionTypeEnum.Loop">
            <summary>
            子循环
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TransitionFlyingTypeEnum.NotFlying">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TransitionFlyingTypeEnum.ForwardFlying">
            <summary>
            向前（跳转）
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TransitionFlyingTypeEnum.BackwardFlying">
            <summary>
            向后（跳转）
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.TransitionImage">
            <summary>
            转移信息
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.TransitionImage.ID">
            <summary>
            转移实例ID
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.TransitionImage.TransitionGUID">
            <summary>
            转移GUID
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.TransitionTypeEnum">
            <summary>
            转移类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TransitionTypeEnum.Forward">
            <summary>
            前行
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TransitionTypeEnum.Withdrawed">
            <summary>
            撤销
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TransitionTypeEnum.Sendback">
            <summary>
            退回
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TransitionTypeEnum.Reversed">
            <summary>
            返签
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TransitionTypeEnum.Backward">
            <summary>
            后退
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.TransitionTypeEnum.Loop">
            <summary>
            自身循环
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.WfAppRunner">
            <summary>
            流程执行人(业务应用的办理者)
            说明：WfAppRunner是流程流转参数的传递对象，传递引擎执行需要的业务数据、资源数据和流程定义数据等。
            WfAppRunner数据格式：
            {
                "UserID":"10",
                "UserName":"Long",
                "AppName":"SamplePrice",
                "AppInstanceID":"100",
                "ProcessGUID":"072af8c3-482a-4b1c-890b-685ce2fcc75d"
            }
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.WfAppRunner.AppName">
            <summary>
            业务数据：应用名称
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.WfAppRunner.AppInstanceID">
            <summary>
            业务数据：应用实例ID（比如单据票据编号）
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.WfAppRunner.AppInstanceCode">
            <summary>
            业务数据：应用实例ID（比如单据票据代码）
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.WfAppRunner.ProcessGUID">
            <summary>
            流程数据：流程GUID
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.WfAppRunner.ProcessCode">
            <summary>
            流程数据：流程代码
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.WfAppRunner.Version">
            <summary>
            流程数据：流程版本
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.WfAppRunner.UserID">
            <summary>
            用户数据：用户ID
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.WfAppRunner.UserName">
            <summary>
            流程数据：用户名称
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.WfAppRunner.CompanyID">
            <summary>
            公司ID
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.WfAppRunner.TaskID">
            <summary>
            流程数据：待办任务ID
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.WfAppRunner.ActivityInstanceID">
            <summary>
            流程数据：活动实例ID
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.WfAppRunner.ApprovalStatus">
            <summary>
            审批结果状态
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.WfAppRunner.Conditions">
            <summary>
            流程数据：条件参数
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.WfAppRunner.DynamicVariables">
            <summary>
            流程数据：动态变量
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.WfAppRunner.ControlParameterSheet">
            <summary>
            流程数据：控制参数
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.WfAppRunner.NextActivityPerformers">
            <summary>
            流程数据：下一步办理人员列表
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.WfAppRunner.NextPerformerType">
            <summary>
            流程数据：下一步执行类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.WfAppRunner.DelegateEventList">
            <summary>
            委托事件
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Common.WfAppRunner.MessageTopic">
            <summary>
            用于消息启动时的主题
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.WfBackwardTaskReceiver">
            <summary>
            流程返签、撤销和退回接收人的实体对象
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Common.WfBackwardTaskReceiver.Instance(System.String,System.String,System.String)">
            <summary>
            构造WfBackwardReceiver实例
            </summary>
            <param name="userID">用户ID</param>
            <param name="userName">用户名称</param>
            <param name="backwardToActivityName">活动名称</param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Common.WfDefine">
            <summary>
            常用定义类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.WorkflowException">
            <summary>
            流程业务数据访问异常类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.WfXpdlException">
            <summary>
            工作流xml定义文件异常类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.WorkItemTypeEnum">
            <summary>
            工作项类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.WorkItemTypeEnum.NonWorkItem">
            <summary>
            非工作项StartNode, EndNode, GatewayNode, IntermediateNode
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Common.WorkItemTypeEnum.IsWorkItem">
            <summary>
            工作项TaskNode, MultipleInstanceNode
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Common.XmlDefinitionException">
            <summary>
            XML 文件定义异常类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Config.WfConfig">
            <summary>
            Workflow Configuration
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Config.WfConfig.EXPIRED_DAYS">
            <summary>
            BPMN file cache expired days
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Config.WfConfig.EXPIRED_DAYS_ENABLED">
            <summary>
            BPMN file cache enabled true/false
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Config.WfConfig.EXTERNAL_SERVICE_FILE_PATH">
            <summary>
            Local Service File Path
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Core.ActivityForwardContext">
            <summary>
            活动节点执行上下文对象
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.ActivityForwardContext.#ctor(Slickflow.Engine.Xpdl.IProcessModel,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Common.ActivityResource,System.Boolean)">
            <summary>
            开始节点的构造执行上下文对象
            </summary>
            <param name="processModel">流程模型</param>
            <param name="processInstance">流程实例</param>
            <param name="activity">活动</param>
            <param name="activityResource">活动资源</param>
            <param name="isNotParsedByTransition">非解析流转</param>
        </member>
        <member name="M:Slickflow.Engine.Core.ActivityForwardContext.#ctor(Slickflow.Engine.Business.Entity.TaskViewEntity,Slickflow.Engine.Xpdl.IProcessModel,Slickflow.Engine.Common.ActivityResource,System.Boolean,Slickflow.Data.IDbSession)">
            <summary>
            任务执行的上下文对象
            </summary>
            <param name="taskView"></param>
            <param name="processModel">流程模型</param>
            <param name="activityResource">活动资源</param>
            <param name="isNotParsedByTransition">非解析流转</param>
            <param name="session">数据会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.ActivityForwardContext.#ctor(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Xpdl.IProcessModel,Slickflow.Engine.Common.ActivityResource,System.Boolean,Slickflow.Data.IDbSession)">
            <summary>
            Interrupt事件类型活动实例执行上下文对象
            </summary>
            <param name="activityInstance">活动实例</param>
            <param name="processModel">流程模型</param>
            <param name="activityResource">活动资源</param>
            <param name="isNotParsedByTransition">非解析流转</param>
            <param name="session">数据会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.ActivityForwardContext.CreateStartupContext(Slickflow.Engine.Xpdl.IProcessModel,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Common.ActivityResource)">
            <summary>
            启动流程的上下文对象
            </summary>
            <param name="processModel"></param>
            <param name="processInstance"></param>
            <param name="activity"></param>
            <param name="activityResource"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Core.ActivityForwardContext.CreateRunningContextByTask(Slickflow.Engine.Business.Entity.TaskViewEntity,Slickflow.Engine.Xpdl.IProcessModel,Slickflow.Engine.Common.ActivityResource,System.Boolean,Slickflow.Data.IDbSession)">
            <summary>
            创建任务执行上下文对象
            </summary>
            <param name="taskView">任务</param>
            <param name="processModel">流程模型</param>
            <param name="activityResource">活动资源</param>
            <param name="isNotParsedForward">不需要解析的流转</param>
            <param name="session">数据会话</param>
            <returns>活动上下文</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.ActivityForwardContext.CreateRunningContextByActivity(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Xpdl.IProcessModel,Slickflow.Engine.Common.ActivityResource,System.Boolean,Slickflow.Data.IDbSession)">
            <summary>
            Interrupt事件类型创建活动执行上下文对象
            </summary>
            <param name="activityInstance">活动实例</param>
            <param name="processModel">流程模型</param>
            <param name="activityResource">活动资源</param>
            <param name="isNotParsedForward">不需要解析的流转</param>
            <param name="session">数据会话</param>
            <returns>活动上下文</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.ActivityForwardContext.CreateJumpforwardContext(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Xpdl.IProcessModel,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Common.ActivityResource)">
            <summary>
            创建流程跳转上下文对象
            </summary>
            <param name="jumpforwardActivity">跳转节点</param>
            <param name="processModel">流程模型</param>
            <param name="processInstance">活动实例</param>
            <param name="activityResource">活动资源</param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Core.BackwardContext">
            <summary>
            流程回退处理时的上下文对象
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Core.Event.WfEventArgs">
            <summary>
            工作流Event
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Event.WfEventArgs.WfExecutedResult">
            <summary>
            工作项执行结果
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Core.Parser.NextStepParser">
            <summary>
            下一步的步骤列表读取类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Parser.NextStepParser.GetNextStepInfo(Slickflow.Module.Resource.IResourceService,Slickflow.Engine.Common.WfAppRunner,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            流程下一步信息获取
            </summary>
            <param name="resourceService">资源服务</param>
            <param name="runner">当前运行用户</param>
            <param name="condition">条件</param>
            <returns>下一步信息</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Parser.NextStepParser.GetNextActivityPerformersPriliminary(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            获取预选步骤人员列表
            </summary>
            <param name="runner">当前运行用户</param>
            <returns>步骤预选人员列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Parser.NextStepParser.GetNextActivityRoleUserTree(Slickflow.Module.Resource.IResourceService,Slickflow.Engine.Common.WfAppRunner,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            根据应用获取流程下一步节点列表，包含角色用户
            </summary>
            <param name="resourceService">资源服务</param>
            <param name="runner">应用执行人</param>
            <param name="condition">条件</param>
            <returns>节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Parser.NextStepParser.AppendUserList(System.Collections.Generic.IList{Slickflow.Module.Resource.User},Slickflow.Module.Resource.User)">
            <summary>
            增加单个用户
            </summary>
            <param name="existUserList">用户列表</param>
            <param name="user">追加用户</param>
            <returns>用户列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Parser.NextStepParser.AppendUserList(System.Collections.Generic.IList{Slickflow.Module.Resource.User},System.Collections.Generic.IList{Slickflow.Module.Resource.User})">
            <summary>
            构造用户列表
            </summary>
            <param name="existUserList">用户列表</param>
            <param name="newUserList">追加用户列表</param>
            <returns>用户列表</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Parser.PreviousStepChecker">
            <summary>
            上一步活动节点检查器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Parser.PreviousStepChecker.GetPreviousActivityTree(System.Int32,System.Boolean@)">
            <summary>
            获取上一步节点树
            </summary>
            <param name="taskID">任务ID</param>
            <param name="hasGatewayPassed">是否经过网关</param>
            <returns>上一步步骤列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Parser.PreviousStepChecker.GetPreviousActivityTree(Slickflow.Engine.Common.WfAppRunner,System.Boolean@)">
            <summary>
            获取上一步节点树
            </summary>
            <param name="runner">运行者</param>
            <param name="hasGatewayPassed">是否经过网关</param>
            <returns>上一步步骤列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Parser.PreviousStepChecker.GetPreviousActivityTree(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.Boolean@)">
            <summary>
            获取上一步节点树
            </summary>
            <param name="runningNode">运行活动</param>
            <param name="hasGatewayPassed">是否经过网关</param>
            <returns>上一步步骤列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Parser.PreviousStepChecker.AppendNodeViewList(System.Collections.Generic.IList{Slickflow.Engine.Common.NodeView},Slickflow.Engine.Xpdl.Entity.Activity,System.String,System.String)">
            <summary>
            封装节点列表
            </summary>
            <param name="nodeList">节点列表</param>
            <param name="activity">活动</param>
            <param name="userID">用户ID</param>
            <param name="userName">用户名称</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Parser.PreviousStepChecker.AppendUserList(System.Collections.Generic.IList{Slickflow.Module.Resource.User},Slickflow.Module.Resource.User)">
            <summary>
            增加单个用户
            </summary>
            <param name="existUserList">用户列表</param>
            <param name="user">追加用户</param>
            <returns>用户列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Parser.PreviousStepChecker.GetPreviousActivityList(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Xpdl.IProcessModel,System.Boolean@)">
            <summary>
            获取当前运行节点的上一步节点列表
            （包括多实例节点类型）
            1. 多实例节点内部使用CompleteOrder数值递减；
               (其中涉及到多实例节点的主节点跨越模式)
            2. 普通节点模式按照是否有Gateway节点递归回溯；
            </summary>
            <param name="runningNode">运行节点</param>
            <param name="processModel">流程模型</param>
            <param name="hasGatewayPassed">是否经过网关节点</param>
            <returns>上一步活动列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Parser.PreviousStepChecker.GetPreviousOfMultipleInstanceNode(System.Int32,System.Int32,System.Single)">
            <summary>
            查询实例节点的前置节点
            </summary>
            <param name="mainActivityInstanceID">主节点实例ID</param>
            <param name="activityInstanceID">活动实例ID</param>
            <param name="completeOrder">完成顺序</param>
            <returns>活动实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Parser.PreviousStepChecker.GetPreviousActivityInstanceList(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.Boolean,System.Boolean@)">
            <summary>
            读取节点的上一步节点信息
            </summary>
            <param name="runningNode">当前节点</param>
            <param name="isLookUpBackSource">是否退回</param>
            <param name="hasPassedGatewayNode">是否经由路由节点</param>
            <returns>活动实例列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Parser.PreviousStepChecker.GetPreviousOfGatewayActivityInstance(System.Collections.Generic.IList{Slickflow.Engine.Business.Entity.TransitionInstanceEntity},System.Int32,System.Collections.Generic.IList{Slickflow.Engine.Business.Entity.ActivityInstanceEntity})">
            <summary>
            获取网关节点前的节点
            </summary>
            <param name="transitionList">转移列表</param>
            <param name="toActivityInstanceID">流转到的活动实例ID</param>
            <param name="previousActivityInstanceList">前节点实例列表</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Parser.SignForwardStepMaker">
            <summary>
            上一步活动节点检查器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Parser.SignForwardStepMaker.GetSignForwardStepInfo(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            流程下一步信息获取
            </summary>
            <param name="runner">当前运行用户</param>
            <returns>下一步信息</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Parser.SignForwardStepMaker.GetSignForwardRoleUserTree(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            根据应用获取流程下一步节点列表，包含角色用户
            </summary>
            <param name="runner">应用执行人</param>
            <returns>节点列表</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.ActionExecutor">
            <summary>
            Action 执行器类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ActionExecutor.ExecteActionList(System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.Action},Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            Action 的执行方法
            </summary>
            <param name="actionList">操作列表</param>
            <param name="delegateService">参数列表</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ActionExecutor.ExecteActionListBefore(System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.Action},Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            触发前执行外部操作的方法
            </summary>
            <param name="actionList">操作列表</param>
            <param name="delegateService">委托服务</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ActionExecutor.ExecteActionListAfter(System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.Action},Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            触发后执行外部操作的方法
            </summary>
            <param name="actionList">操作列表</param>
            <param name="delegateService">委托服务</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ActionExecutor.Execute(Slickflow.Engine.Xpdl.Entity.Action,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            执行外部服务实现类
            </summary>
            <param name="action">操作</param>
            <param name="delegateService">委托服务类</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ActionExecutor.ExecuteLocalService(Slickflow.Engine.Xpdl.Entity.Action,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            执行外部方法
            </summary>
            <param name="action">Action实体</param>
            <param name="delegateService">委托服务</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ActionExecutor.ExecuteWebApiMethod(Slickflow.Engine.Xpdl.Entity.Action,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            执行外部方法
            </summary>
            <param name="action">Action实体</param>
            <param name="delegateService">委托服务</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ActionExecutor.ExecuteSQLMethod(Slickflow.Engine.Xpdl.Entity.Action,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            执行外部方法
            </summary>
            <param name="action">Action实体</param>
            <param name="delegateService">委托服务</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ActionExecutor.ExecuteStoreProcedureMethod(Slickflow.Engine.Xpdl.Entity.Action,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            执行外部方法
            </summary>
            <param name="action">Action实体</param>
            <param name="delegateService">委托服务</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ActionExecutor.ExecutePythonMethod(Slickflow.Engine.Xpdl.Entity.Action,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            执行外部方法
            SetVariable:
            https://stackoverflow.com/questions/26426955/setting-and-getting-variables-in-net-hosted-ironpython-script/45734097
            </summary>
            <param name="action">Action实体</param>
            <param name="delegateService">委托服务</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ActionExecutor.ExecuteCSharpLibraryMethod(Slickflow.Engine.Xpdl.Entity.Action,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            执行插件方法
            </summary>
            <param name="action">Action实体</param>
            <param name="delegateService">委托服务</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ActionExecutor.CompositeJsonValue(System.String,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            构造最终对象的Json字符串
            </summary>
            <param name="arguments">参数列表</param>
            <param name="delegateService">委托服务</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ActionExecutor.FormatJsonStringIfSimple(System.String)">
            <summary>
            如果是简单字符串, 加双引号
            jack => "jack"
            </summary>
            <param name="jsonValue">字符串</param>
            <returns>变换格式后的字符串</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ActionExecutor.CompositeSqlParametersValue(System.String,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            构造最终对象的Json字符串
            </summary>
            <param name="arguments">参数列表</param>
            <param name="delegateService">委托服务</param>
            <returns>动态参数列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ActionExecutor.CompositeKeyValue(System.String,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            构造最终对象的Json字符串
            </summary>
            <param name="arguments">参数列表</param>
            <param name="delegateService">委托服务</param>
            <returns>字典列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ActionExecutor.CompositeParameterValues(System.String,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            构造可变数值列表
            </summary>
            <param name="arguments">参数列表</param>
            <param name="delegateService">委托服务</param>
            <returns>参数列表</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Conditional.NodeMediatorInterConditional">
            <summary>
            中间事件节点(条件)处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Conditional.NodeMediatorInterConditional.ExecuteWorkItem">
            <summary>
            执行方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Conditional.NodeMediatorInterConditional.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            自动完成
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="toActivity">目标活动</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>网关执行结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Conditional.NodeMediatorInterConditionalGo">
            <summary>
            中间事件节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Conditional.NodeMediatorInterConditionalGo.ExecuteWorkItem">
            <summary>
            执行方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Conditional.NodeMediatorInterConditionalGo.CheckBeingExecutedInfo(Slickflow.Data.IDbSession)">
            <summary>
            检查节点运行条件是否满足
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Conditional.NodeMediatorInterConditionalGo.CompleteWorkItem(System.Nullable{System.Int32},Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            完成任务实例
            </summary>
            <param name="taskID">任务视图</param>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>        
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Conditional.NodeMediatorInterConditionalGo.CreateActivityTaskTransitionInstance(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            创建活动任务转移实例数据
            </summary>
            <param name="toActivity">活动</param>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">开始活动实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Conditional.NodeMediatorStartConditional">
            <summary>
            开始节点执行器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Conditional.NodeMediatorStartConditional.ExecuteWorkItem">
            <summary>
            执行开始节点
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Conditional.NodeMediatorStartConditional.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            置开始节点为结束状态
            </summary>
            <param name="processInstance"></param>
            <param name="activityResource"></param>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorEndMsgCatch">
            <summary>
            结束节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorEndMsgCatch.ExecuteWorkItem">
            <summary>
            节点内部业务逻辑执行
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorEndMsgCatch.ContinueMainProcessRunning(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Data.IDbSession)">
            <summary>
            继续执行主流程
            </summary>
            <param name="processInstance">子流程实例</param>
            <param name="session">数据库会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorEndMsgCatch.FillNextActivityPerformersByRoleList(System.Int32,System.String,Slickflow.Data.IDbSession)">
            <summary>
            使用流程定义资源添加角色用户
            </summary>
            <param name="mainActivityInstanceID">主流程节点实例ID</param>
            <param name="mainActivityGUID">主流程节点GUID</param>
            <param name="session">数据库会话</param>
            <returns>执行用户</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorEndMsgCatch.CreateActivityTaskTransitionInstance(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            结束节点活动及转移实例化，没有任务数据
            </summary>
            <param name="toActivity">当前Activity</param>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">活动资源</param>
            <param name="session">Session</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorEndMsgThrow">
            <summary>
            结束节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorEndMsgThrow.ExecuteWorkItem">
            <summary>
            节点内部业务逻辑执行
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorEndMsgThrow.ContinueMainProcessRunning(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Data.IDbSession)">
            <summary>
            继续执行主流程
            </summary>
            <param name="processInstance">子流程实例</param>
            <param name="session">数据库会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorEndMsgThrow.FillNextActivityPerformersByRoleList(System.Int32,System.String,Slickflow.Data.IDbSession)">
            <summary>
            使用流程定义资源添加角色用户
            </summary>
            <param name="mainActivityInstanceID">主流程节点实例ID</param>
            <param name="mainActivityGUID">主流程节点GUID</param>
            <param name="session">数据库会话</param>
            <returns>执行用户</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorEndMsgThrow.CreateActivityTaskTransitionInstance(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            结束节点活动及转移实例化，没有任务数据
            </summary>
            <param name="toActivity">当前Activity</param>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">活动资源</param>
            <param name="session">Session</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorInterMessageGo">
            <summary>
            中间事件节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorInterMessageGo.ExecuteWorkItem">
            <summary>
            执行方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorInterMessageGo.CompleteWorkItem(System.Nullable{System.Int32},Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            完成任务实例
            </summary>
            <param name="taskID">任务视图</param>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>        
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorInterMessageGo.CreateActivityTaskTransitionInstance(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            创建活动任务转移实例数据
            </summary>
            <param name="toActivity">活动</param>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">开始活动实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorInterMsgCatch">
            <summary>
            中间事件节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorInterMsgCatch.ExecuteWorkItem">
            <summary>
            执行方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorInterMsgCatch.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            自动完成
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="toActivity">目标活动</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>网关执行结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorInterMsgCatchContinue">
            <summary>
            中间事件节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorInterMsgCatchContinue.ExecuteWorkItem">
            <summary>
            执行方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorInterMsgCatchContinue.CompleteWorkItem(Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            完成节点实例
            </summary>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>        
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorInterMsgThrow">
            <summary>
            中间事件节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorInterMsgThrow.ExecuteWorkItem">
            <summary>
            执行方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorInterMsgThrow.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            自动完成
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="toActivity">目标活动</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>网关执行结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorStartMsgCatch">
            <summary>
            开始节点执行器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorStartMsgCatch.ExecuteWorkItem">
            <summary>
            执行开始节点
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorStartMsgCatch.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            置开始节点为结束状态
            </summary>
            <param name="processInstance"></param>
            <param name="activityResource"></param>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorStartMsgThrow">
            <summary>
            开始节点执行器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorStartMsgThrow.ExecuteWorkItem">
            <summary>
            执行开始节点
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorStartMsgThrow.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            置开始节点为结束状态
            </summary>
            <param name="processInstance"></param>
            <param name="activityResource"></param>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorStartSignalCatch">
            <summary>
            开始节点执行器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorStartSignalCatch.ExecuteWorkItem">
            <summary>
            执行开始节点
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Message.NodeMediatorStartSignalCatch.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            置开始节点为结束状态
            </summary>
            <param name="processInstance"></param>
            <param name="activityResource"></param>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEnd">
            <summary>
            结束节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEnd.ExecuteWorkItem">
            <summary>
            节点内部业务逻辑执行
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEnd.ContinueMainProcessRunning(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Data.IDbSession)">
            <summary>
            继续执行主流程
            </summary>
            <param name="processInstance">子流程实例</param>
            <param name="session">数据库会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEnd.FillNextActivityPerformersByRoleList(System.Int32,System.String,Slickflow.Data.IDbSession)">
            <summary>
            使用流程定义资源添加角色用户
            </summary>
            <param name="mainActivityInstanceID">主流程节点实例ID</param>
            <param name="mainActivityGUID">主流程节点GUID</param>
            <param name="session">数据库会话</param>
            <returns>执行用户</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEnd.CreateActivityTaskTransitionInstance(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            结束节点活动及转移实例化，没有任务数据
            </summary>
            <param name="toActivity">当前Activity</param>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">活动资源</param>
            <param name="session">Session</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent">
            <summary>
            逻辑控制节点执行器
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent._activityFowardContext">
            <summary>
            活动上下文
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent.ActivityForwardContext">
            <summary>
            活动上下文
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent._eventActivity">
            <summary>
            事件活动
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent.EventActivity">
            <summary>
            事件活动
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent._processModel">
            <summary>
            流程模型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent.ProcessModel">
            <summary>
            流程模型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent._session">
            <summary>
            数据会话
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent.Session">
            <summary>
            数据会话
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent.EventActivityInstance">
            <summary>
            事件活动实例
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent.activityInstanceManager">
            <summary>
            活动实例管理
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent.ActivityInstanceManager">
            <summary>
            活动实例管理
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent.#ctor(Slickflow.Engine.Core.ActivityForwardContext,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Xpdl.IProcessModel,Slickflow.Data.IDbSession)">
            <summary>
            构造函数
            </summary>
            <param name="forwardContext">上下文</param>
            <param name="eActivity">活动</param>
            <param name="processModel">流程模型</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent.ExecteActionList(System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.Action},Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            执行外部操作的方法
            </summary>
            <param name="actionList">操作列表</param>
            <param name="delegateService">委托方法</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent.GetDelegateService">
            <summary>
            获取委托服务
            </summary>
            <returns>委托服务类</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent.OnBeforeExecuteWorkItem">
            <summary>
            触发前执行
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent.OnExecutingServiceItem">
            <summary>
            执行代码自动服务内容
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent.OnAfterExecuteWorkItem">
            <summary>
            触发后执行
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent.CreateActivityInstanceObject(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            创建节点对象
            </summary>
            <param name="activity">活动</param>
            <param name="processInstance">流程实例</param>
            <param name="runner">运行者</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent.InsertActivityInstance(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Data.IDbSession)">
            <summary>
            插入实例数据
            </summary>
            <param name="activityInstance">活动资源</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent.InsertTransitionInstance(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            插入连线实例的方法
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivityInstance">来源活动实例</param>
            <param name="toActivityInstance">目的活动实例</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">飞跃类型</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>新转移实例ID</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorEvent.CompleteActivityInstance(System.Int32,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            节点对象的完成方法
            </summary>
            <param name="ActivityInstanceID">活动实例ID</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.NodeMediatorIntermediate">
            <summary>
            中间事件节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorIntermediate.ExecuteWorkItem">
            <summary>
            执行方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorIntermediate.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            自动完成
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="toActivity">目标活动</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>网关执行结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.NodeMediatorScript">
            <summary>
            任务节点执行器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorScript.ExecuteWorkItem">
            <summary>
            执行自动服务节点
            1. 当设置任务完成时，同时设置活动完成
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorScript.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            自动完成
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="toActivity">目标活动</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>网关执行结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.NodeMediatorService">
            <summary>
            任务节点执行器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorService.ExecuteWorkItem">
            <summary>
            执行自动服务节点
            1. 当设置任务完成时，同时设置活动完成
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorService.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            自动完成
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="toActivity">目标活动</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>网关执行结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.NodeMediatorStart">
            <summary>
            开始节点执行器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorStart.ExecuteWorkItem">
            <summary>
            执行开始节点
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.NodeMediatorStart.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            置开始节点为结束状态
            </summary>
            <param name="processInstance"></param>
            <param name="activityResource"></param>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Signal.NodeMediatorEndSignalCatch">
            <summary>
            信号结束节点的Catch类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Signal.NodeMediatorEndSignalCatch.ExecuteWorkItem">
            <summary>
            节点内部业务逻辑执行
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Signal.NodeMediatorEndSignalThrow">
            <summary>
            结束节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Signal.NodeMediatorEndSignalThrow.ExecuteWorkItem">
            <summary>
            节点内部业务逻辑执行
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Signal.NodeMediatorEndSignalThrow.CreateActivityTaskTransitionInstance(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            结束节点活动及转移实例化，没有任务数据
            </summary>
            <param name="toActivity">当前Activity</param>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">活动资源</param>
            <param name="session">Session</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Signal.NodeMediatorInterSignalCatch">
            <summary>
            中间事件节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Signal.NodeMediatorInterSignalCatch.ExecuteWorkItem">
            <summary>
            执行方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Signal.NodeMediatorInterSignalCatch.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            自动完成
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="toActivity">目标活动</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>网关执行结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Signal.NodeMediatorInterSignalCatchContinue">
            <summary>
            中间事件节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Signal.NodeMediatorInterSignalCatchContinue.ExecuteWorkItem">
            <summary>
            执行方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Signal.NodeMediatorInterSignalCatchContinue.CompleteWorkItem(Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            完成节点实例
            </summary>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>        
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Signal.NodeMediatorInterSignalThrow">
            <summary>
            中间事件节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Signal.NodeMediatorInterSignalThrow.ExecuteWorkItem">
            <summary>
            执行方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Signal.NodeMediatorInterSignalThrow.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            自动完成
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="toActivity">目标活动</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>网关执行结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Signal.NodeMediatorStartSignalThrow">
            <summary>
            开始节点执行器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Signal.NodeMediatorStartSignalThrow.ExecuteWorkItem">
            <summary>
            执行开始节点
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Signal.NodeMediatorStartSignalThrow.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            置开始节点为结束状态
            </summary>
            <param name="processInstance"></param>
            <param name="activityResource"></param>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Timer.NodeMediatorEndTimer">
            <summary>
            结束节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Timer.NodeMediatorEndTimer.ExecuteWorkItem">
            <summary>
            节点内部业务逻辑执行
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Timer.NodeMediatorEndTimer.ContinueMainProcessRunning(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Data.IDbSession)">
            <summary>
            继续执行主流程
            </summary>
            <param name="processInstance">子流程实例</param>
            <param name="session">数据库会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Timer.NodeMediatorEndTimer.FillNextActivityPerformersByRoleList(System.Int32,System.String,Slickflow.Data.IDbSession)">
            <summary>
            使用流程定义资源添加角色用户
            </summary>
            <param name="mainActivityInstanceID">主流程节点实例ID</param>
            <param name="mainActivityGUID">主流程节点GUID</param>
            <param name="session">数据库会话</param>
            <returns>执行用户</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Timer.NodeMediatorEndTimer.CreateActivityTaskTransitionInstance(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            结束节点活动及转移实例化，没有任务数据
            </summary>
            <param name="toActivity">当前Activity</param>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">活动资源</param>
            <param name="session">Session</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Timer.NodeMediatorInterTimer">
            <summary>
            中间事件节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Timer.NodeMediatorInterTimer.ExecuteWorkItem">
            <summary>
            执行方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Timer.NodeMediatorInterTimer.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            自动完成
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="toActivity">目标活动</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>网关执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Timer.NodeMediatorInterTimer.CalcDataTimeFromVariable(Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            计算延迟时间
            </summary>
            <param name="timerActivity">活动</param>
            <returns>延迟时间</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Timer.NodeMediatorInterTimerGo">
            <summary>
            中间事件节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Timer.NodeMediatorInterTimerGo.ExecuteWorkItem">
            <summary>
            执行方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Timer.NodeMediatorInterTimerGo.CheckBeingExecutedInfo">
            <summary>
            检查节点运行条件是否满足
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Timer.NodeMediatorInterTimerGo.CompleteWorkItem(System.Nullable{System.Int32},Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            完成任务实例
            </summary>
            <param name="taskID">任务视图</param>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>        
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Timer.NodeMediatorInterTimerGo.CreateActivityTaskTransitionInstance(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            创建活动任务转移实例数据
            </summary>
            <param name="toActivity">活动</param>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">开始活动实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Event.Timer.NodeMediatorStartTimer">
            <summary>
            开始节点执行器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Timer.NodeMediatorStartTimer.ExecuteWorkItem">
            <summary>
            执行开始节点
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Event.Timer.NodeMediatorStartTimer.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            置开始节点为结束状态
            </summary>
            <param name="processInstance"></param>
            <param name="activityResource"></param>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorAndJoin">
            <summary>
            AndJoin 节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorAndJoin.GetTokensRequired">
            <summary>
            计算汇合Token数目
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorAndJoin.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            自动完成
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>网关执行结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorAndJoinMI">
            <summary>
            AndJoin 节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorAndJoinMI.GetTokensRequired(System.String,System.Int32,Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            获取需要的Token数目
            </summary>
            <param name="appInstanceID">应用实例ID</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="joinNode">汇合节点</param>
            <returns>令牌数目</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorAndJoinMI.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            自动完成
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>网关执行结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorAndSplit">
            <summary>
            AndSplit 节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorAndSplit.#ctor(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Xpdl.IProcessModel,Slickflow.Data.IDbSession)">
            <summary>
            构造函数
            </summary>
            <param name="activity"></param>
            <param name="processModel"></param>
            <param name="session"></param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorAndSplit.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            自动完成
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>网关执行结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorAndSplitMI">
            <summary>
            多实例与分支节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorAndSplitMI.#ctor(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Xpdl.IProcessModel,Slickflow.Data.IDbSession)">
            <summary>
            构造函数
            </summary>
            <param name="activity"></param>
            <param name="processModel"></param>
            <param name="session"></param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorAndSplitMI.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            自动完成
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>网关执行结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorApprovalOrSplit">
            <summary>
            AOrSplit 节点处理类
            审批网关
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorApprovalOrSplit.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            自动完成
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>网关执行结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorEOrJoin">
            <summary>
            OrJoin 节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorEOrJoin.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            EOrJoin合并时的节点完成方法
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorEOrJoin.CompleteAutomaticallyByTokensCount(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            EOrJoin合并时的节点完成方法
            前端动态传递要合并的Tokens的数目
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorEOrJoin.CompleteAutomaticallyByForcedBranchesCount(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            EOrJoin合并时的节点完成方法
            根据前置转移上定义的是否强制分支来判断完成合并节点
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorEOrJoin.CompleteAutomaticallyInternal(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.Int32,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            EOrJoin合并时的节点完成方法
            内部执行逻辑
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="tokensCountRequired">合并要求的Token数目</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorGateway">
            <summary>
            逻辑控制节点执行器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorGateway.CreateActivityInstanceObject(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            创建节点对象
            </summary>
            <param name="activity">活动</param>
            <param name="processInstance">流程实例</param>
            <param name="runner">运行者</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorGateway.InsertActivityInstance(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Data.IDbSession)">
            <summary>
            插入实例数据
            </summary>
            <param name="activityInstance">活动资源</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorGateway.InsertTransitionInstance(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            插入连线实例的方法
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivityInstance">来源活动实例</param>
            <param name="toActivityInstance">目的活动实例</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">飞跃类型</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>新转移实例ID</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorGateway.CompleteActivityInstance(System.Int32,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            节点对象的完成方法
            </summary>
            <param name="ActivityInstanceID">活动实例ID</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorOrJoin">
            <summary>
            OrJoin 节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorOrJoin.GetTokensRequired(System.Int32,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Data.IDbSession)">
            <summary>
            计算需要的汇合Token数目
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <param name="gatewayActivity">网关活动</param>
            <param name="session">会话</param>
            <returns>Token数目</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorOrJoin.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            OrJoin合并时的节点完成方法
            1. 如果有满足条件的OrJoin前驱转移，则会重新生成新的OrJoin节点实例
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorOrSplit">
            <summary>
            OrSplit 节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorOrSplit.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            自动完成
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>网关执行结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorXOrJoin">
            <summary>
            XOrJoin 节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorXOrJoin.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            自动完成
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>网关执行结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorXOrSplit">
            <summary>
            XOrSplit 节点处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.Gateway.NodeMediatorXOrSplit.CompleteAutomaticlly(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            自动完成
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
            <returns>网关执行结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.ICompleteAutomaticlly">
            <summary>
            路由接口
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.ICompleteGatewayAutomaticlly">
            <summary>
            网关接口
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.LinkContext">
            <summary>
            节点连接线
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.LinkContext.FromActivity">
            <summary>
            起始节点定义
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.LinkContext.FromActivityInstance">
            <summary>
            起始节点实例
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.LinkContext.ToActivity">
            <summary>
            到达节点定义
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.LinkContext.ToActivityInstance">
            <summary>
            到达节点实例
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.NodeAutoExecutedResult">
            <summary>
            Gateway执行结果类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.NodeAutoExecutedStatus">
            <summary>
            网关执行结果状态类
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.NodeAutoExecutedStatus.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.NodeAutoExecutedStatus.Successed">
            <summary>
            执行成功
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.NodeAutoExecutedStatus.Failed">
            <summary>
            发生错误
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.NodeAutoExecutedStatus.WaitingForOthersJoin">
            <summary>
            等待其它需要合并的分支
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.NodeAutoExecutedStatus.FallBehindOfXOrJoin">
            <summary>
            后进的节点，不参与XOrJoin节点的运行
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.NodeAutoExecutedStatus.NotForcedBrancheWhenEOrJoin">
            <summary>
            不是强制分支(EOrJoin)
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.NodeMediator">
            <summary>
            节点执行器的抽象类
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.NodeMediator._activityForwardContext">
            <summary>
            活动上下文
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.NodeMediator.ActivityForwardContext">
            <summary>
            活动上下文
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.NodeMediator._backwardContext">
            <summary>
            退回上下文
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.NodeMediator.BackwardContext">
            <summary>
            退回上下文
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.NodeMediator._session">
            <summary>
            数据库会话
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.NodeMediator.Session">
            <summary>
            数据库会话
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.NodeMediator._linkContext">
            <summary>
            节点间连线
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.NodeMediator.LinkContext">
            <summary>
            节点间连线
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.NodeMediator.activityInstanceManager">
            <summary>
            活动节点实例管理对象
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.NodeMediator.ActivityInstanceManager">
            <summary>
            活动实例管理
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.NodeMediator.taskManager">
            <summary>
            任务管理
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.NodeMediator.TaskManager">
            <summary>
            任务管理
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.NodeMediator.processInstanceManager">
            <summary>
            流程实例管理
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.NodeMediator.ProcessInstanceManager">
            <summary>
            流程实例管理
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.NodeMediator._wfNodeMediatedResult">
            <summary>
            节点执行结果
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.NodeMediator.WfNodeMediatedResult">
            <summary>
            节点执行结果
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.NodeMediator._returnDataContext">
            <summary>
            返回上下文
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Pattern.NodeMediator.ReturnDataContext">
            <summary>
            返回上下文
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Pattern.NodeMediator._delegateService">
            <summary>
            委托服务
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.ExecuteWorkItem">
            <summary>
            执行节点方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.#ctor(Slickflow.Engine.Core.ActivityForwardContext,Slickflow.Data.IDbSession)">
            <summary>
            向前流转时的NodeMediator的构造函数
            </summary>
            <param name="forwardContext">前进上下文</param>
            <param name="session">Session</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.#ctor(Slickflow.Engine.Core.BackwardContext,Slickflow.Data.IDbSession)">
            <summary>
            退回处理时的NodeMediator的构造函数
            </summary>
            <param name="backwardContext">退回上下文</param>
            <param name="session">Session</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.GetDelegateService">
            <summary>
            获取委托服务
            </summary>
            <returns>委托服务实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.IsNotNodeMediatorStart(Slickflow.Engine.Core.Pattern.NodeMediator)">
            <summary>
            判断是否是起始类型的节点
            </summary>
            <param name="nodeMediator">节点监督器</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.OnBeforeExecuteWorkItem">
            <summary>
            触发前执行
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.OnAfterExecuteWorkItem">
            <summary>
            触发后执行
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.OnExecutingServiceItem">
            <summary>
            执行代码自动服务内容
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.ContinueForwardCurrentNode(System.Boolean,Slickflow.Data.IDbSession)">
            <summary>
            遍历执行当前节点后面的节点
            正常运行：需要走Transition的解析流转
            其它方式为直接指定：比如跳转，返送等，不需要解析，不能等同于正常流转解析
            </summary>
            <param name="isNotParsedByTransition">不需要走解析流转</param>
            <param name="session">数据会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.ContinueForwardCurrentNodeRecurisivly(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Xpdl.Schedule.NextActivityComponent,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Collections.Generic.List{Slickflow.Engine.Core.Result.WfNodeMediatedResult}@)">
            <summary>
            递归执行节点
            1)创建普通节点的任务
            2)创建会签节点的任务
            </summary>
            <param name="fromActivity">起始活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="isNotParsedForward">是否跳跃</param>
            <param name="root">根节点</param>
            <param name="conditionKeyValuePair">条件key-value</param>
            <param name="mediatorResult">执行结果的返回列表</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.IsWaitingOneOfJoin(Slickflow.Engine.Xpdl.Entity.GatewayDetail)">
            <summary>
            判断是否是合并情况
            </summary>
            <param name="gatewayDetail"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.CreateActivityTaskTransitionInstance(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            创建工作项及转移数据
            </summary>
            <param name="toActivity">活动</param>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">活动资源</param>
            <param name="session">Session</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.CreateNewTask(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            创建任务的虚方法
            1. 对于自动执行的工作项，无需重写该方法
            2. 对于人工执行的工作项，需要重写该方法，插入待办的任务数据
            </summary>
            <param name="activityResource">活动资源</param>
            <param name="toActivityInstance">活动实例</param>
            <param name="session">Session</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.CreateActivityInstanceObject(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            创建节点对象
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="activity">活动</param>
            <param name="runner">执行者</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.InsertActivityInstance(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Data.IDbSession)">
            <summary>
            插入实例数据
            </summary>
            <param name="activityInstance">活动资源</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.CompleteActivityInstance(System.Int32,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            节点对象的完成方法
            </summary>
            <param name="ActivityInstanceID">活动实例ID</param>
            <param name="runner">运行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.CreateMultipleInstance(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            会签类型的主节点, 多实例节点处理
            创建会签节点的主节点，以及会签主节点下的实例子节点记录
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="toActivity">活动</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="activityResource">资源</param>
            <param name="flyingType">跳跃类型</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.CreateBackwardToActivityInstanceObject(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Common.BackwardTypeEnum,System.Int32,System.Int32,Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            创建退回类型的活动实例对象
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="backwardType">退回类型</param>
            <param name="backSrcActivityInstanceID">退回的活动实例ID</param>
            <param name="backOrgActivityInstanceID">初始办理活动实例ID</param>
            <param name="runner">登录用户</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.InsertTransitionInstance(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            插入连线实例的方法
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="transitionGUID">转移ID</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="toActivityInstance">到达活动实例</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="runner">执行者</param>
            <param name="session">Session</param>
            <returns>新转移实例ID</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.GenerateActivityAssignedUserInfo(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.ActivityResource)">
            <summary>
            生成活动用户分配信息
            </summary>
            <param name="toActivityInstance">下一步活动实例</param>
            <param name="activityResource">活动资源</param>
            <returns>下一步活动实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.AntiGenerateActivityPerformerList(Slickflow.Engine.Business.Entity.ActivityInstanceEntity)">
            <summary>
            由节点分配的人员信息生成PerformerList数据结构
            </summary>
            <param name="activityInstance">活动实例</param>
            <returns>人员列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediator.GetNodeMediatedMessage">
            <summary>
            根据节点执行结果类型，生成消息
            </summary>
            <returns>消息内容</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.NodeMediatorBackward">
            <summary>
            退回处理时的节点调节器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorBackward.CreateBackwardActivityTaskTransitionInstance(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.BackwardTypeEnum,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            创建退回时的流转节点对象、任务和转移数据
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">运行节点实例</param>
            <param name="backwardType">退回类型</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">资源</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorBackward.CreateBackwardActivityTaskRepeatedSignTogetherMultipleInstance(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.BackwardTypeEnum,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            退回是会签情况下的处理：
            要退回的节点是会签节点
            1) 全部实例化会签节点下的多实例节点
            2) 只取得办理完成的节点，而且保证CompleteOrder的唯一性
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="backwardToTaskActvity">退回到的活动节点</param>
            <param name="fromActivityInstance">运行节点</param>
            <param name="backwardType">退回类型</param>
            <param name="previousMainInstance">前主节点实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">资源</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorBackward.CreateBackwardActivityTaskOfInnerMultipleInstance(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.BackwardTypeEnum,System.Int32,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            创建多实例节点之间回滚时的活动实例，任务数据
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="originalBackwardToActivityInstance">原始退回到的节点实例</param>
            <param name="backwardType">退回类型</param>
            <param name="backSrcActivityInstanceID">源退回节点实例ID</param>
            <param name="activityResource">资源</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorBackward.CreateBackwardActivityTaskTransitionOfLastMultipleInstance(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.BackwardTypeEnum,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            最后一个会签多实例子节点的撤销操作
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">运行节点</param>
            <param name="originalBackwardToActivityInstance">初始退回到的节点实例</param>
            <param name="backwardType">退回类型</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">资源</param>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.NodeMediatorFactory">
            <summary>
            节点执行器的工厂类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorFactory.CreateNodeMediator(Slickflow.Engine.Core.ActivityForwardContext,Slickflow.Data.IDbSession)">
            <summary>
            创建节点执行器的抽象类
            </summary>
            <param name="forwardContext">活动上下文</param>
            <param name="session">会话</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorFactory.ThrowUncerternXmlNodeTypeException(System.String,System.String,System.String)">
            <summary>
            抛出异常信息
            </summary>
            <param name="activityType">活动类型</param>
            <param name="triggerType">触发类型</param>
            <param name="throwCatchDirection">throw/catch类型</param>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorFactory.CreateNodeMediatorGateway(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Xpdl.IProcessModel,Slickflow.Data.IDbSession)">
            <summary>
            创建Gateway节点处理类实例
            </summary>
            <param name="gActivity">节点</param>
            <param name="processModel">流程模型类</param>
            <param name="session">会话</param>
            <returns>Gateway节点处理实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorFactory.CreateNodeMediatorEvent(Slickflow.Engine.Core.ActivityForwardContext,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Xpdl.IProcessModel,Slickflow.Data.IDbSession)">
            <summary>
            创建中间事件节点处理类实例
            </summary>
            <param name="forwardContext">活动上下文</param>
            <param name="eventActivity">节点</param>
            <param name="processModel">流程模型类</param>
            <param name="session">会话</param>
            <returns>Gateway节点处理实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorFactory.CreateNodeMediatorEnd(Slickflow.Engine.Core.ActivityForwardContext,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Data.IDbSession)">
            <summary>
            创建结束事件节点处理类实例
            </summary>
            <param name="forwardContext">活动上下文</param>
            <param name="endActivity">节点</param>
            <param name="session">会话</param>
            <returns>节点处理实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorFactory.CreateNodeMediatorSubProcess(Slickflow.Engine.Core.ActivityForwardContext,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Data.IDbSession)">
            <summary>
            创建子流程节点处理类实例
            </summary>
            <param name="forwardContext">活动上下文</param>
            <param name="activity">活动节点</param>
            <param name="session">会话</param>
            <returns>节点处理实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorFactory.CreateNodeMediatorSubProcess(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Data.IDbSession)">
            <summary>
            创建子流程节点处理类实例
            </summary>
            <param name="activity">活动节点</param>
            <param name="session">会话</param>
            <returns>节点处理实例</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.NodeMediatorMultiSignCreator">
            <summary>
            多实例节点场景的创建器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorMultiSignCreator.ExecuteWorkItem">
            <summary>
            执行普通任务节点
            1. 当设置任务完成时，同时设置活动完成
            2. 当实例化活动数据时，产生新的任务数据
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorMultiSignCreator.CreateActivityTaskTransitionInstance(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            创建活动任务转移实例数据
            </summary>
            <param name="toActivity">活动</param>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">开始活动实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.NodeMediatorMultiSignForward">
            <summary>
            加签子节点执行
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorMultiSignForward.ExecuteWorkItem">
            <summary>
            执行普通任务节点
            1. 当设置任务完成时，同时设置活动完成
            2. 当实例化活动数据时，产生新的任务数据
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorMultiSignForward.CompleteWorkItem(System.Nullable{System.Int32},Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            完成任务实例
            </summary>
            <param name="taskID">任务视图</param>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>        
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.NodeMediatorMultiSignTogether">
            <summary>
            会签子节点执行
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorMultiSignTogether.ExecuteWorkItem">
            <summary>
            执行普通任务节点
            1. 当设置任务完成时，同时设置活动完成
            2. 当实例化活动数据时，产生新的任务数据
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorMultiSignTogether.CompleteWorkItem(System.Nullable{System.Int32},Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            完成任务实例
            </summary>
            <param name="taskID">任务视图</param>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>        
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.NodeMediatorRevise">
            <summary>
            流程修订的具体执行类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorRevise.ExecuteWorkItem">
            <summary>
            执行普通任务节点
            1. 当设置任务完成时，同时设置活动完成
            2. 当实例化活动数据时，产生新的任务数据
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorRevise.CompleteWorkItem(System.Nullable{System.Int32},Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            完成任务实例
            </summary>
            <param name="taskID">任务视图</param>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>        
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorRevise.CloneChildNodeOfMI(Slickflow.Engine.Common.PerformerList,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Data.IDbSession)">
            <summary>
            复制多实例子节点数据
            </summary>
            <param name="plist">执行人员列表</param>
            <param name="mainActivityInstance">主节点</param>
            <param name="session">数据会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorRevise.IsTaskExisted(System.Collections.Generic.List{Slickflow.Engine.Business.Entity.ActivityInstanceEntity},System.String)">
            <summary>
            判断活动实例是否已经存在
            </summary>
            <param name="childNodeOfMI">活动实例列表</param>
            <param name="userID">用户ID</param>
            <returns>存在标记</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorRevise.CloneChildNodeOfAndSplitMI(Slickflow.Engine.Common.PerformerList,System.String,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Data.IDbSession)">
            <summary>
            复制并行分支多实例节点数据
            </summary>
            <param name="plist">执行人员列表</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="gatewayActivityInstance">网关活动实例</param>
            <param name="toActivityInstance">多实例分支节点</param>
            <param name="session">数据会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.NodeMediatorSignForward">
            <summary>
            加签主节点执行器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorSignForward.ExecuteWorkItem">
            <summary>
            执行方法
            生成加签记录，包括作者本人，以及发送给的加签人
            加签主节点及其加签实例子节点记录生成
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorSignForward.UpgradeToMainSignForwardNode(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Xpdl.Common.SignForwardTypeEnum)">
            <summary>
            升级当前节点为加签主节点
            </summary>
            <param name="currentActivityInstance">当前活动实例</param>
            <param name="signForwardType">加签类型</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorSignForward.CreateSignForwardTasks(Slickflow.Engine.Common.ActivityResource)">
            <summary>
            创建加签节点记录
            </summary>
            <param name="activityResource"></param>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.NodeMediatorSubProcess">
            <summary>
            子流程节点执行器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorSubProcess.ExecuteWorkItem">
            <summary>
            执行子流程节点
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorSubProcess.CompleteWorkItem(System.Nullable{System.Int32},Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            完成任务实例
            </summary>
            <param name="taskID">任务ID</param>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorSubProcess.CreateActivityTaskTransitionInstance(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            创建活动任务转移数据
            </summary>
            <param name="toActivity">目的活动</param>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">来源活动实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">飞跃类型</param>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorSubProcess.CreateSubProcessNode(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Engine.Common.Performer,Slickflow.Data.IDbSession)">
            <summary>
            创建子流程节点数据以及子流程记录
            </summary>
            <param name="toActivity">目的活动</param>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">来源活动实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">飞跃类型</param>
            <param name="activityResource">活动资源</param>
            <param name="performer">执行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorSubProcess.CreateMultipleInstance(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            会签类型的主节点, 多实例节点处理
            </summary>
            <param name="toActivity">目的活动</param>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">来源活动实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">飞跃类型</param>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorSubProcess.CreateSubProcessRunner(Slickflow.Engine.Common.WfAppRunner,Slickflow.Engine.Common.Performer,Slickflow.Data.IDbSession)">
            <summary>
            创建子流程时，重新生成runner信息
            </summary>
            <param name="runner">运行者</param>
            <param name="performer">下一步执行者</param>
            <param name="session">会话</param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.NodeMediatorSubProcessNested">
            <summary>
            子流程节点执行器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorSubProcessNested.ExecuteWorkItem">
            <summary>
            执行子流程节点
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorSubProcessNested.CompleteWorkItem(System.Nullable{System.Int32},Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            完成任务实例
            </summary>
            <param name="taskID">任务ID</param>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorSubProcessNested.CreateActivityTaskTransitionInstance(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            创建活动任务转移数据
            </summary>
            <param name="toActivity">目的活动</param>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">来源活动实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">飞跃类型</param>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorSubProcessNested.CreateSubProcessNode(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Engine.Common.Performer,Slickflow.Data.IDbSession)">
            <summary>
            创建子流程节点数据以及子流程记录
            </summary>
            <param name="toActivity">目的活动</param>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">来源活动实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">飞跃类型</param>
            <param name="activityResource">活动资源</param>
            <param name="performer">执行者</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorSubProcessNested.CreateMultipleInstance(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            会签类型的主节点, 多实例节点处理
            </summary>
            <param name="toActivity">目的活动</param>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">来源活动实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">飞跃类型</param>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorSubProcessNested.CreateSubProcessRunner(Slickflow.Engine.Common.WfAppRunner,Slickflow.Engine.Common.Performer,Slickflow.Data.IDbSession)">
            <summary>
            创建子流程时，重新生成runner信息
            </summary>
            <param name="runner">运行者</param>
            <param name="performer">下一步执行者</param>
            <param name="session">会话</param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.NodeMediatorTask">
            <summary>
            任务节点执行器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorTask.ExecuteWorkItem">
            <summary>
            执行普通任务节点
            1. 当设置任务完成时，同时设置活动完成
            2. 当实例化活动数据时，产生新的任务数据
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorTask.CompleteWorkItem(System.Nullable{System.Int32},Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            完成节点实例
            </summary>
            <param name="taskID">任务视图</param>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>        
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorTask.CreateActivityTaskTransitionInstance(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            创建活动任务转移实例数据
            </summary>
            <param name="toActivity">活动</param>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">开始活动实例</param>
            <param name="transitionGUID">转移GUID</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">活动资源</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.NodeMediatorTask.WriteBackSrcOrgInformation(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Data.IDbSession)">
            <summary>
            维护多次退回时的源节点信息
            </summary>
            <param name="toActivityInstance">目的节点</param>
            <param name="fromActivityInstance">开始节点</param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ScriptExecutor.ExecuteScriptList(System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.ScriptDetail},Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            Action 的执行方法
            </summary>
            <param name="scriptList">操作列表</param>
            <param name="delegateService">参数列表</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ScriptExecutor.Execute(Slickflow.Engine.Xpdl.Entity.ScriptDetail,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            执行外部服务实现类
            </summary>
            <param name="script">操作</param>
            <param name="delegateService">委托服务类</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ScriptExecutor.ExecutePythonMethod(Slickflow.Engine.Xpdl.Entity.ScriptDetail,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            执行外部方法
            SetVariable:
            https://stackoverflow.com/questions/26426955/setting-and-getting-variables-in-net-hosted-ironpython-script/45734097
            </summary>
            <param name="script">Action实体</param>
            <param name="delegateService">委托服务</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ScriptExecutor.ExecuteSQLMethod(Slickflow.Engine.Xpdl.Entity.ScriptDetail,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            执行外部方法
            </summary>
            <param name="script">Action实体</param>
            <param name="delegateService">委托服务</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Pattern.ServiceExecutor">
            <summary>
            自动服务方法类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ServiceExecutor.ExecuteServiceList(System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.ServiceDetail},Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            Action 的执行方法
            </summary>
            <param name="serviceList">操作列表</param>
            <param name="delegateService">参数列表</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ServiceExecutor.Execute(Slickflow.Engine.Xpdl.Entity.ServiceDetail,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            执行外部服务实现类
            </summary>
            <param name="service">操作</param>
            <param name="delegateService">委托服务类</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ServiceExecutor.ExecuteLocalService(Slickflow.Engine.Xpdl.Entity.ServiceDetail,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            执行外部方法
            </summary>
            <param name="service">Action实体</param>
            <param name="delegateService">委托服务</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ServiceExecutor.ExecuteWebApiMethod(Slickflow.Engine.Xpdl.Entity.ServiceDetail,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            执行外部方法
            </summary>
            <param name="service">Action实体</param>
            <param name="delegateService">委托服务</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ServiceExecutor.ExecuteStoreProcedureMethod(Slickflow.Engine.Xpdl.Entity.ServiceDetail,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            执行外部方法
            </summary>
            <param name="service">Action实体</param>
            <param name="delegateService">委托服务</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Pattern.ServiceExecutor.ExecuteCSharpLibraryMethod(Slickflow.Engine.Xpdl.Entity.ServiceDetail,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            执行插件方法
            </summary>
            <param name="service">Action实体</param>
            <param name="delegateService">委托服务</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Result.WfExecutedResult">
            <summary>
            执行结果对象封装
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Result.WfExecutedResult.Default">
            <summary>
            缺省方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Result.WfExecutedStatus">
            <summary>
            状态执行枚举类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Result.WfExecutedStatus.Default">
            <summary>
            缺省状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Result.WfExecutedStatus.Success">
            <summary>
            成功状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Result.WfExecutedStatus.Failed">
            <summary>
            执行失败状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Result.WfExecutedStatus.Exception">
            <summary>
            异常状态
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Core.Result.WfExceptionType">
            <summary>
            异常类型类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Core.Result.WfNodeMediatedResult">
            <summary>
            活动节点执行结果
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Result.WfNodeMediatedResult.Feedback">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Result.WfNodeMediatedResult.CreateNodeMediatedResultWithException(Slickflow.Engine.Core.Result.WfNodeMediatedFeedback)">
            <summary>
            创建NodeMediatedResult 对象
            </summary>
            <param name="feedback"></param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Core.Result.WfNodeMediatedFeedback">
            <summary>
            执行反馈枚举
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Result.WfNodeMediatedFeedback.ForwardToNextSequenceTask">
            <summary>
            串行会(加)签，设置下一个执行节点的任务进入运行状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Result.WfNodeMediatedFeedback.WaitingForCompletedMore">
            <summary>
            并行会(加)签，等待节点到达足够多的完成比例
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Result.WfNodeMediatedFeedback.NotEnoughApprovalBranchesCount">
            <summary>
            会(加)签时，没有达到通过率要求
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Result.WfNodeMediatedFeedback.NeedOtherGatewayBranchesToJoin">
            <summary>
            并行汇合需要其它分支
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Result.WfNodeMediatedFeedback.OrJoinOneBranchHasBeenFinishedWaittingOthers">
            <summary>
            OrJoin场景，第一个满足条件的分支完成，其后的被阻止
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Result.WfNodeMediatedFeedback.IntermediateEventFailed">
            <summary>
            中间事件处理节点异常
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Result.WfNodeMediatedFeedback.OtherUnknownReasonToDebug">
            <summary>
            其它未知因素需调试
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Core.Result.WfNodeMediatedFeedback.UnknownNodeTypeToWatch">
            <summary>
            未知类型的节点需监视
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Core.ReturnDataContext">
            <summary>
            回退返回的参数类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Core.Runtime.WfRuntimeException">
            <summary>
            流程运行时异常类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Core.Runtime.WfRuntimeManager">
            <summary>
            流程运行时管理
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Core.Runtime.WfRuntimeManager.WfExecutedResult">
            <summary>
            流程执行结果对象
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManager.Execute(Slickflow.Data.IDbSession)">
            <summary>
            执行方法
            </summary>
            <returns>执行状态</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Slickflow.Engine.Core.Runtime.WfRuntimeManager.Callback(Slickflow.Engine.Core.Result.WfExecutedResult)" -->
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManager.RegisterEvent(System.EventHandler{Slickflow.Engine.Core.Event.WfEventArgs},System.EventHandler{Slickflow.Engine.Core.Event.WfEventArgs})">
            <summary>
            绑定事件
            </summary>
            <param name="executing">执行事件</param>
            <param name="executed">执行完成事件</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManager.UnRegiesterEvent(System.EventHandler{Slickflow.Engine.Core.Event.WfEventArgs},System.EventHandler{Slickflow.Engine.Core.Event.WfEventArgs})">
            <summary>
            解除绑定事件
            </summary>
            <param name="executing">执行事件</param>
            <param name="executed">执行完成事件</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Runtime.WfRuntimeManagerClose">
            <summary>
            跳转方式的处理
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerClose.ExecuteInstanceImp(Slickflow.Data.IDbSession)">
            <summary>
            跳转执行方法
            </summary>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Runtime.WfRuntimeManagerFactory">
            <summary>
            运行时的创建类
            静态方法：创建执行实例的运行者对象
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerFactory.CreateRuntimeInstanceStartup(Slickflow.Engine.Common.WfAppRunner,Slickflow.Engine.Core.Result.WfExecutedResult@)">
            <summary>
            启动流程
            </summary>
            <param name="runner">执行者</param>
            <param name="result">结果对象</param>
            <returns>运行时实例对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerFactory.CreateRuntimeInstanceStartupSub(Slickflow.Engine.Common.WfAppRunner,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Xpdl.Node.SubProcessNode,Slickflow.Engine.Common.PerformerList,Slickflow.Data.IDbSession,Slickflow.Engine.Core.Result.WfExecutedResult@)">
            <summary>
            子流程启动
            </summary>
            <param name="runner">运行者</param>
            <param name="processInstance">父流程</param>
            <param name="subProcessNode">子流程节点</param>
            <param name="performerList">执行者列表</param>
            <param name="session">数据库会话</param>
            <param name="result">运行结果</param>
            <returns>运行时管理器</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerFactory.CreateRuntimeInstanceAppRunning(Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession,Slickflow.Engine.Core.Result.WfExecutedResult@)">
            <summary>
            创建运行时实例对象
            </summary>
            <param name="runner">执行者</param>
            <param name="session">数据库会话</param>
            <param name="result">结果对象</param>
            <returns>运行时实例对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerFactory.CreateRuntimeInstanceRunAuto(Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession,Slickflow.Engine.Core.Result.WfExecutedResult@)">
            <summary>
            创建运行时实例对象
            </summary>
            <param name="runner">执行者</param>
            <param name="session">数据库会话</param>
            <param name="result">结果对象</param>
            <returns>运行时实例对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerFactory.CreateRuntimeInstanceJump(Slickflow.Engine.Common.WfAppRunner,Slickflow.Engine.Core.Result.WfExecutedResult@)">
            <summary>
            创建跳转实例信息
            </summary>
            <param name="runner">执行者</param>
            <param name="result">结果对象</param>
            <returns>运行时实例对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerFactory.CreateRuntimeInstanceReject(Slickflow.Engine.Common.WfAppRunner,Slickflow.Engine.Core.Result.WfExecutedResult@)">
            <summary>
            跳转到流程发起节点
            </summary>
            <param name="runner">当前运行用户</param>
            <param name="result">运行结果</param>
            <returns>运行时对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerFactory.CreateRuntimeInstanceClose(Slickflow.Engine.Common.WfAppRunner,Slickflow.Engine.Core.Result.WfExecutedResult@)">
            <summary>
            跳转到结束节点
            </summary>
            <param name="runner">当前运行用户</param>
            <param name="result">运行结果</param>
            <returns>运行时对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerFactory.CreateRuntimeInstanceSendBack(Slickflow.Engine.Common.WfAppRunner,Slickflow.Engine.Core.Result.WfExecutedResult@)">
            <summary>
            退回操作
            </summary>
            <param name="runner">执行者</param>
            <param name="result">结果对象</param>
            <returns>运行时实例对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerFactory.IsInvalidStepsInPrevousActivityList(System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.Activity},System.Collections.Generic.IDictionary{System.String,Slickflow.Engine.Common.PerformerList},System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.Activity})">
            <summary>
            判断传递的步骤是否在列表中
            </summary>
            <param name="previousActivityList">步骤列表</param>
            <param name="steps">要检查的步骤</param>
            <param name="sendbackPreviousActivityList">要退回的节点列表</param>
            <returns>是否没有包含</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerFactory.FilterPreviousActivityList(System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.Activity},System.Collections.Generic.IList{Slickflow.Engine.Business.Entity.ActivityInstanceEntity})">
            <summary>
            过滤前置节点
            流转历史数据
            </summary>
            <param name="previousActivityList">解析出的前置节点列表</param>
            <param name="previousActivityInstanceList">实际流转的前置节点列表</param>
            <returns>过滤后的节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerFactory.CreateRuntimeInstanceWithdraw(Slickflow.Engine.Common.WfAppRunner,Slickflow.Engine.Core.Result.WfExecutedResult@)">
            <summary>
            创建撤销处理运行时
            </summary>
            <param name="runner">撤销人</param>
            <param name="result">创建结果</param>
            <returns>运行时管理器</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerFactory.CreateRuntimeInstanceResend(Slickflow.Engine.Common.WfAppRunner,Slickflow.Engine.Core.Result.WfExecutedResult@)">
            <summary>
            返送操作
            </summary>
            <param name="runner">执行者</param>
            <param name="result">结果对象</param>
            <returns>运行时实例对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerFactory.CreateRuntimeInstanceRevise(Slickflow.Engine.Common.WfAppRunner,Slickflow.Engine.Core.Result.WfExecutedResult@)">
            <summary>
            修订操作
            </summary>
            <param name="runner">执行者</param>
            <param name="result">结果对象</param>
            <returns>运行时实例对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerFactory.CreateRuntimeInstanceReverse(Slickflow.Engine.Common.WfAppRunner,Slickflow.Engine.Core.Result.WfExecutedResult@)">
            <summary>
            流程返签，先检查约束条件，然后调用wfruntimeinstance执行
            </summary>
            <param name="runner">执行者</param>
            <param name="result">结果对象</param>
            <returns>运行时实例对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerFactory.CreateRuntimeInstanceSignForward(Slickflow.Engine.Common.WfAppRunner,Slickflow.Engine.Core.Result.WfExecutedResult@)">
            <summary>
            加签操作
            </summary>
            <param name="runner">执行者</param>
            <param name="result">结果对象</param>
            <returns>运行时实例对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerFactory.RegisterEvent(Slickflow.Engine.Core.Runtime.WfRuntimeManager,System.EventHandler{Slickflow.Engine.Core.Event.WfEventArgs},System.EventHandler{Slickflow.Engine.Core.Event.WfEventArgs})">
            <summary>
            事件注册
            </summary>
            <param name="runtimeInstance">运行时</param>
            <param name="executing">执行事件</param>
            <param name="executed">完成事件</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerFactory.UnregisterEvent(Slickflow.Engine.Core.Runtime.WfRuntimeManager,System.EventHandler{Slickflow.Engine.Core.Event.WfEventArgs},System.EventHandler{Slickflow.Engine.Core.Event.WfEventArgs})">
            <summary>
            事件注销
            </summary>
            <param name="runtimeInstance">运行时</param>
            <param name="executing">执行事件</param>
            <param name="executed">完成事件</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Runtime.WfRuntimeManagerJump">
            <summary>
            跳转方式的处理
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerJump.ExecuteInstanceImp(Slickflow.Data.IDbSession)">
            <summary>
            跳转执行方法
            </summary>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Runtime.WfRuntimeManagerReject">
            <summary>
            驳回处理
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerReject.ExecuteInstanceImp(Slickflow.Data.IDbSession)">
            <summary>
            跳转执行方法
            </summary>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Runtime.WfRuntimeManagerResend">
            <summary>
            返送回的处理
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerResend.ExecuteInstanceImp(Slickflow.Data.IDbSession)">
            <summary>
            退回操作的处理逻辑
            </summary>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Runtime.WfRuntimeManagerReverse">
            <summary>
            流程返签时的运行时
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerReverse.ExecuteInstanceImp(Slickflow.Data.IDbSession)">
            <summary>
            返签执行方法
            </summary>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Runtime.WfRuntimeManagerRevise">
            <summary>
            流程重新修订处理类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerRevise.ExecuteInstanceImp(Slickflow.Data.IDbSession)">
            <summary>
            修订操作的处理逻辑
            </summary>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Runtime.WfRuntimeManagerRun">
            <summary>
            应用执行运行时
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerRun.ExecuteInstanceImp(Slickflow.Data.IDbSession)">
            <summary>
            运行执行方法
            </summary>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerRun.OnProcessRunning(Slickflow.Data.IDbSession)">
            <summary>
            执行流程完成事件
            </summary>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerRun.OnProcessCompleted(Slickflow.Data.IDbSession)">
            <summary>
            执行流程完成事件
            </summary>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Runtime.WfRuntimeManagerSendBack">
            <summary>
            退回流程运行时
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerSendBack.ExecuteInstanceImp(Slickflow.Data.IDbSession)">
            <summary>
            退回操作的处理逻辑
            </summary>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerSendBack.DistributeEachPerformerTask(Slickflow.Engine.Core.SendBack.SendBackOperation,Slickflow.Engine.Common.PerformerList,Slickflow.Data.IDbSession)">
            <summary>
            给执行者生成任务
            </summary>
            <param name="sendbackOperation">退回类型</param>
            <param name="performerList"></param>
            <param name="session">会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerSendBack.SetRunningNodeSendBack(Slickflow.Data.IDbSession)">
            <summary>
            更新当前运行节点状态为退回状态
            </summary>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Runtime.WfRuntimeManagerSignForward">
            <summary>
            加签执行运行时
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerSignForward.ExecuteInstanceImp(Slickflow.Data.IDbSession)">
            <summary>
            加签执行方法
            </summary>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Runtime.WfRuntimeManagerStartup">
            <summary>
            流程启动运行时
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerStartup.ExecuteInstanceImp(Slickflow.Data.IDbSession)">
            <summary>
            启动执行方法
            </summary>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.Runtime.WfRuntimeManagerStartupSub">
            <summary>
            流程启动运行时
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.Runtime.WfRuntimeManagerStartupSub.ExecuteInstanceImp(Slickflow.Data.IDbSession)">
            <summary>
            启动执行方法
            </summary>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.SendBack.NodeSendBack">
            <summary>
            节点退回器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.SendBack.NodeSendBack.#ctor(Slickflow.Engine.Core.SendBack.SendBackOperation,Slickflow.Data.IDbSession)">
            <summary>
            构造函数
            </summary>
            <param name="sendbackOperation">退回选项</param>
            <param name="session">数据会话</param>
        </member>
        <member name="M:Slickflow.Engine.Core.SendBack.NodeSendBack.CreateBackwardToActivityInstanceObject(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Common.BackwardTypeEnum,System.Int32,System.Int32,Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            创建退回类型的活动实例对象
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="backwardType">退回类型</param>
            <param name="backSrcActivityInstanceID">退回的活动实例ID</param>
            <param name="backOrgActivityInstanceID">初始办理活动实例ID</param>
            <param name="runner">登录用户</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Core.SendBack.NodeSendBack.CreateNewTask(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            创建任务的虚方法
            1. 对于自动执行的工作项，无需重写该方法
            2. 对于人工执行的工作项，需要重写该方法，插入待办的任务数据
            </summary>
            <param name="activityResource">活动资源</param>
            <param name="toActivityInstance">活动实例</param>
            <param name="session">Session</param>
        </member>
        <member name="M:Slickflow.Engine.Core.SendBack.NodeSendBack.InsertTransitionInstance(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            插入连线实例的方法
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">起始活动实例</param>
            <param name="toActivityInstance">到达活动实例</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="runner">执行者</param>
            <param name="session">Session</param>
            <returns>新转移实例ID</returns>
        </member>
        <member name="M:Slickflow.Engine.Core.SendBack.NodeSendBack.CreateBackwardActivityTaskTransitionInstance(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Common.BackwardTypeEnum,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            创建退回时的流转节点对象、任务和转移数据
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">运行节点实例</param>
            <param name="backwardToTaskActivity">退回到的节点</param>
            <param name="backwardType">退回类型</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">资源</param>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.SendBack.NodeSendBackFactory">
            <summary>
            创建退回节点处理器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.SendBack.NodeSendBackFactory.CreateNodeReverter(Slickflow.Engine.Core.SendBack.SendBackOperation,Slickflow.Data.IDbSession)">
            <summary>
            创建方法
            </summary>
            <param name="sendbackOperation">退回选项</param>
            <param name="session">会话</param>
            <returns>退回器</returns>
        </member>
        <member name="T:Slickflow.Engine.Core.SendBack.NodeSendBackMIP">
            <summary>
            当前节点是并行会签模式下的退回处理
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.SendBack.NodeSendBackMIP.Execute">
            <summary>
            执行退回方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.SendBack.NodeSendBackMIP.CreateBackwardActivityTaskTransitionOfLastMultipleInstance(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.BackwardTypeEnum,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            最后一个会签多实例子节点的撤销操作
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">运行节点</param>
            <param name="originalBackwardToActivityInstance">初始退回到的节点实例</param>
            <param name="backwardType">退回类型</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">资源</param>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.SendBack.NodeSendBackMIS">
            <summary>
            串行会签内部退回处理
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.SendBack.NodeSendBackMIS.Execute">
            <summary>
            执行退回操作
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.SendBack.NodeSendBackMIS.CreateBackwardActivityTaskOfInnerMultipleInstance(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.BackwardTypeEnum,System.Int32,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            创建多实例节点之间回滚时的活动实例，任务数据
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="originalBackwardToActivityInstance">原始退回到的节点实例</param>
            <param name="backwardType">退回类型</param>
            <param name="backSrcActivityInstanceID">源退回节点实例ID</param>
            <param name="activityResource">资源</param>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.SendBack.NodeSendBackMISReady">
            <summary>
            任务类型的退回处理器
            串行会签，第一个节点处于待办
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.SendBack.NodeSendBackMISReady.Execute">
            <summary>
            执行退回操作
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.SendBack.NodeSendBackMISReady.CreateBackwardActivityTaskTransitionOfLastMultipleInstance(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.BackwardTypeEnum,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            最后一个会签多实例子节点的撤销操作
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">运行节点</param>
            <param name="originalBackwardToActivityInstance">初始退回到的节点实例</param>
            <param name="backwardType">退回类型</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">资源</param>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.SendBack.NodeSendBackTask">
            <summary>
            任务类型的退回处理器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.SendBack.NodeSendBackTask.Execute">
            <summary>
            执行退回操作
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.SendBack.NodeSendBackTask.CancelBrothersNode(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.WfAppRunner,Slickflow.Data.IDbSession)">
            <summary>
            取消相邻分支节点
            </summary>
            <param name="toActivity">退回到的节点</param>
            <param name="fromActivityInstance">退回前的运行节点</param>
            <param name="runner">运行者</param>
            <param name="session">数据会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.SendBack.NodeSendBackToMIPPrevious">
            <summary>
            当前运行节点的前置节点是并行会签节点的退回处理
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.SendBack.NodeSendBackToMIPPrevious.Execute">
            <summary>
            执行退回方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.SendBack.NodeSendBackToMIPPrevious.CreateBackwardActivityTaskTransitionOfLastMultipleInstance(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.BackwardTypeEnum,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            最后一个会签多实例子节点的撤销操作
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">运行节点</param>
            <param name="originalBackwardToActivityInstance">初始退回到的节点实例</param>
            <param name="backwardType">退回类型</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">资源</param>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.SendBack.NodeSendBackToMISPrevious">
            <summary>
            会签类型的退回处理器
            最后一个会签多实例子节点的撤销操作
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.SendBack.NodeSendBackToMISPrevious.Execute">
            <summary>
            执行退回方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Core.SendBack.NodeSendBackToMISPrevious.CreateBackwardActivityTaskTransitionOfLastMultipleInstance(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Common.BackwardTypeEnum,Slickflow.Engine.Common.TransitionTypeEnum,Slickflow.Engine.Common.TransitionFlyingTypeEnum,Slickflow.Engine.Common.ActivityResource,Slickflow.Data.IDbSession)">
            <summary>
            最后一个会签多实例子节点的撤销操作
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="fromActivityInstance">运行节点</param>
            <param name="originalBackwardToActivityInstance">初始退回到的节点实例</param>
            <param name="backwardType">退回类型</param>
            <param name="transitionType">转移类型</param>
            <param name="flyingType">跳跃类型</param>
            <param name="activityResource">资源</param>
            <param name="session">会话</param>
        </member>
        <member name="T:Slickflow.Engine.Core.SendBack.SendBackOperation">
            <summary>
            退回操作类型
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Delegate.ActivityDelegateService">
            <summary>
            活动委托服务类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Delegate.ActivityDelegateService.#ctor(Slickflow.Data.IDbSession,Slickflow.Engine.Delegate.DelegateContext)">
            <summary>
            构造方法
            </summary>
            <param name="session">会话</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:Slickflow.Engine.Delegate.ActivityDelegateService.GetInstance``1(System.Int32)">
            <summary>
            查询实例
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="id">实体主键ID</param>
            <returns>实体</returns>
        </member>
        <member name="T:Slickflow.Engine.Delegate.DelegateContext">
            <summary>
            代理执行上下文
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Delegate.DelegateExecutor">
            <summary>
            委托代理执行器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateExecutor.InvokeExternalDelegate(Slickflow.Data.IDbSession,Slickflow.Engine.Delegate.EventFireTypeEnum,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Core.ActivityForwardContext)">
            <summary>
            调用外部业务应用的程序方法
            </summary>
            <param name="session">数据会话</param>
            <param name="eventType">事件类型</param>
            <param name="currentActivity">当前活动节点</param>
            <param name="context">活动上下文</param>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateExecutor.InvokeExternalDelegate(Slickflow.Data.IDbSession,Slickflow.Engine.Delegate.EventFireTypeEnum,Slickflow.Engine.Delegate.DelegateEventList,System.Int32)">
            <summary>
            调用外部业务应用的程序方法
            </summary>
            <param name="session">数据会话</param>
            <param name="eventType">事件类型</param>
            <param name="eventList">事件列表</param>
            <param name="processInstanceID">流程实例ID</param>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateExecutor.InvokeExternalDelegate(Slickflow.Data.IDbSession,Slickflow.Engine.Delegate.EventFireTypeEnum,Slickflow.Engine.Delegate.DelegateEventList,Slickflow.Engine.Delegate.DelegateContext)">
            <summary>
            调用外部业务应用的程序方法
            </summary>
            <param name="session">数据会话</param>
            <param name="eventType">事件类型</param>
            <param name="eventList">事件列表</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateExecutor.Execute(Slickflow.Data.IDbSession,Slickflow.Engine.Delegate.DelegateContext,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Slickflow.Engine.Delegate.EventFireTypeEnum,System.Func{Slickflow.Engine.Delegate.DelegateContext,Slickflow.Engine.Delegate.IDelegateService,System.Boolean}}})">
            <summary>
            执行委托列表方法
            </summary>
            <param name="session">数据会话</param>
            <param name="context">上下文</param>
            <param name="eventList">事件列表</param>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateExecutor.Execute(Slickflow.Data.IDbSession,Slickflow.Engine.Delegate.DelegateContext,System.Collections.Generic.KeyValuePair{Slickflow.Engine.Delegate.EventFireTypeEnum,System.Func{Slickflow.Engine.Delegate.DelegateContext,Slickflow.Engine.Delegate.IDelegateService,System.Boolean}})">
            <summary>
            执行委托方法
            </summary>
            <param name="session">数据会话</param>
            <param name="context">上下文</param>
            <param name="item">事件</param>
            <returns>执行结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Delegate.DelegateScopeTypeEnum">
            <summary>
            委托类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.DelegateScopeTypeEnum.Process">
            <summary>
            流程级别
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.DelegateScopeTypeEnum.Activity">
            <summary>
            活动级别
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Delegate.DelegateServiceBase">
            <summary>
            委托服务基类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateServiceBase.#ctor(Slickflow.Data.IDbSession,Slickflow.Engine.Delegate.DelegateContext)">
            <summary>
            构造方法
            </summary>
            <param name="session">会话</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateServiceBase.GetProcessInstanceID">
            <summary>
            读取实例主键ID
            </summary>
            <returns>主键ID</returns>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateServiceBase.GetSession">
            <summary>
            获取Session
            </summary>
            <returns>会话</returns>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateServiceBase.GetCondition(System.String)">
            <summary>
            获取条件参数数值
            </summary>
            <param name="name">参数名称</param>
            <returns>参数数值</returns>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateServiceBase.SetCondition(System.String,System.String)">
            <summary>
            设置条件
            </summary>
            <param name="name">名称</param>
            <param name="value">数值</param>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateServiceBase.SetActivityResource(Slickflow.Engine.Common.ActivityResource)">
            <summary>
            设置活动资源
            </summary>
            <param name="activityResource">资源</param>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateServiceBase.SaveVariable(Slickflow.Engine.Common.ProcessVariableTypeEnum,System.String,System.String)">
            <summary>
            设置变量
            </summary>
            <param name="name">名称</param>
            <param name="value">数值</param>
            <param name="variableType">变量类型</param>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateServiceBase.GetVariable(Slickflow.Engine.Common.ProcessVariableTypeEnum,System.String)">
            <summary>
            获取变量
            </summary>
            <param name="name">名称</param>
            <param name="variableType">变量类型</param>
            <returns>数值</returns>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateServiceBase.GetVariableThroughly(System.String)">
            <summary>
            获取变量内容
            </summary>
            <param name="name">变量名称</param>
            <returns>变量内容</returns>
        </member>
        <member name="T:Slickflow.Engine.Delegate.DelegateServiceFactory">
            <summary>
            委托服务创建类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateServiceFactory.CreateDelegateService(Slickflow.Engine.Delegate.DelegateScopeTypeEnum,Slickflow.Data.IDbSession,Slickflow.Engine.Delegate.DelegateContext)">
            <summary>
            创建委托服务
            </summary>
            <param name="scopeType">委托类型</param>
            <param name="session">数据会话</param>
            <param name="context">上下文</param>
            <returns>委托服务</returns>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateUtil.CompositeJsonValue(System.String,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            构造最终对象的Json字符串
            </summary>
            <param name="arguments">参数列表</param>
            <param name="delegateService">委托服务</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateUtil.FormatJsonStringIfSimple(System.String)">
            <summary>
            如果是简单字符串, 加双引号
            jack => "jack"
            </summary>
            <param name="jsonValue">字符串</param>
            <returns>变换格式后的字符串</returns>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateUtil.CompositeSqlParametersValue(System.String,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            构造最终对象的Json字符串
            </summary>
            <param name="arguments">参数列表</param>
            <param name="delegateService">委托服务</param>
            <returns>动态参数列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateUtil.CompositeKeyValue(System.String,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            构造最终对象的Json字符串
            </summary>
            <param name="arguments">参数列表</param>
            <param name="delegateService">委托服务</param>
            <returns>字典列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Delegate.DelegateUtil.CompositeParameterValues(System.String,Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            构造可变数值列表
            </summary>
            <param name="arguments">参数列表</param>
            <param name="delegateService">委托服务</param>
            <returns>参数列表</returns>
        </member>
        <member name="T:Slickflow.Engine.Delegate.EventFireTypeEnum">
            <summary>
             外部事件交互触发类型
             1. 流程事件：
             流程启动->流程运行->流程结束
             2. 活动事件：
             活动创建->活动执行->活动完成
             3. 任务：
             分配->完成
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.None">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessStarting">
            <summary>
            流程正在执行启动
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessStarted">
            <summary>
            流程完成启动
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessRunning">
            <summary>
            流程正在运行(通常由节点迁移来代表运行)
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessContinued">
            <summary>
            流程运行完某个节点(通常由节点迁移来代表运行)
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessCompleted">
            <summary>
            结束流程(流程状态为[完成]状态)
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessWithdrawing">
            <summary>
            流程撤销回上一步骤
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessWithdrawn">
            <summary>
            流程已经撤销到上一步骤
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessSendBacking">
            <summary>
            流程退回上一步骤
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessSendBacked">
            <summary>
            流程已经退回到上一步骤
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessResending">
            <summary>
            流程返送
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessResent">
            <summary>
            流程已经返送
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessReversing">
            <summary>
            流程返签
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessReversed">
            <summary>
            流程已经返签
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessJumping">
            <summary>
            流程跳转中
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessJumped">
            <summary>
            流程已经跳转
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessSignForwarding">
            <summary>
            流程加签
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessSignForwarded">
            <summary>
            流程已经加签
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessRevising">
            <summary>
            流程修订中
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessRevised">
            <summary>
            流程已经修订
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessRejecting">
            <summary>
            流程驳回中
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessRejected">
            <summary>
            流程已经驳回
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessClosing">
            <summary>
            流程关闭中
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnProcessClosed">
            <summary>
            流程已经关闭
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnActivityCreated">
            <summary>
            下一步节点已经创建
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnActivityExecuting">
            <summary>
            节点正在运行
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnActivityExecuted">
            <summary>
            节点运行方法结束
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnActivityCompleted">
            <summary>
            节点完成(节点状态为[完成]状态)
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnTaskCreaed">
            <summary>
            任务记录已经创建(用于邮件消息通知)
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnTaskCompleted">
            <summary>
            任务已经完成(用于邮件消息通知)
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnSuccess">
            <summary>
            成功执行
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnError">
            <summary>
            错误发生
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Delegate.EventFireTypeEnum.OnWarning">
            <summary>
            有警告异常信息
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Delegate.IExternable">
            <summary>
            可外部执行接口
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Delegate.ExternalServiceBase">
            <summary>
            外部服务基类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Delegate.ExternalServiceBase.Executable(Slickflow.Engine.Delegate.IDelegateService)">
            <summary>
            设置委托服务
            </summary>
            <param name="delegateService">委托服务</param>
        </member>
        <member name="T:Slickflow.Engine.Delegate.IDelegateService">
            <summary>
            委托接口
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Delegate.DelegateEventList">
            <summary>
            委托事件列表
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Delegate.IExternalService">
            <summary>
            外部服务接口
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Delegate.ProcessDelegateService">
            <summary>
            流程委托服务类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Delegate.ProcessDelegateService.#ctor(Slickflow.Data.IDbSession,Slickflow.Engine.Delegate.DelegateContext)">
            <summary>
            构造方法
            </summary>
            <param name="session">会话</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:Slickflow.Engine.Delegate.ProcessDelegateService.GetInstance``1(System.Int32)">
            <summary>
            查询实例
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="id">实体主键ID</param>
            <returns>实体</returns>
        </member>
        <member name="T:Slickflow.Engine.Essential.MessageDelegateService">
            <summary>
            消息队列中的消息委托函数
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Essential.MessageDelegateService.PublishMessage(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity)">
            <summary>
            构建要发布的消息
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="throwActivity">消息活动</param>
            <param name="throwActivityInstance">消息活动实例</param>
        </member>
        <member name="M:Slickflow.Engine.Essential.MessageDelegateService.ConsumeMessage(Slickflow.Module.Essential.Entity.MessageEntity)">
            <summary>
            消息消费函数
            </summary>
            <param name="entity">消息实体对象</param>
            <returns>消费结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Essential.MessageDelegateService.GetRunnerFromMessagExchange(Slickflow.Engine.Essential.MessageRunnerView)">
            <summary>
            从消息视图中封装运行者对象
            </summary>
            <param name="msgRunnerView">消息视图</param>
            <returns>运行者对象</returns>
        </member>
        <member name="T:Slickflow.Engine.Essential.MessageRunnerView">
            <summary>
            消息运行者对象视图
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Essential.MessageRunnerView.ProcessEntity">
            <summary>
            目标流程实体
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Essential.MessageRunnerView.ActivityEntity">
            <summary>
            目标节点实体
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Essential.MessageRunnerView.WfAppRunner">
            <summary>
            当前运行者身份
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Essential.SignalDelegateService">
            <summary>
            消息队列中的信号委托函数
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Essential.SignalDelegateService.PublishSignal(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity)">
            <summary>
            构建要发布的消息
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="throwActivity">消息活动</param>
            <param name="throwActivityInstance">消息活动实例</param>
        </member>
        <member name="M:Slickflow.Engine.Essential.SignalDelegateService.ConsumeSignal(Slickflow.Module.Essential.Entity.SignalEntity)">
            <summary>
            消息消费函数
            </summary>
            <param name="entity">消息实体对象</param>
            <returns>消费结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Essential.SignalDelegateService.GetStartRunnerFromSignalExchange(Slickflow.Engine.Essential.SignalRunnerView,Slickflow.Engine.Business.Entity.JobInfoEntity)">
            <summary>
            开始开始节点的运行者信息
            </summary>
            <param name="msgRunnerView">消息视图</param>
            <param name="jobInfo">作业信息</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Essential.SignalDelegateService.RunProcessSignalCatchEventOneByOne(Slickflow.Engine.Essential.SignalRunnerView,Slickflow.Engine.Business.Entity.JobInfoEntity)">
            <summary>
            运行属于SignalCatch节点的流程
            </summary>
            <param name="signalRunner"></param>
            <param name="jobInfo"></param>
        </member>
        <member name="M:Slickflow.Engine.Essential.SignalDelegateService.GetRunnerFromActivityInstance(Slickflow.Engine.Essential.SignalRunnerView,Slickflow.Engine.Business.Entity.JobInfoEntity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity)">
            <summary>
            开始开始节点的运行者信息
            </summary>
            <param name="signalRunner">消息视图</param>
            <param name="jobInfo">作业信息</param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Essential.SignalRunnerView">
            <summary>
            信号运行者对象视图
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Essential.SignalRunnerView.ProcessEntity">
            <summary>
            目标流程实体
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Essential.SignalRunnerView.ActivityEntity">
            <summary>
            目标节点实体
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Essential.SignalRunnerView.WfAppRunner">
            <summary>
            当前运行者身份
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Essential.WfMessageDelegationException">
            <summary>
            消息代理服务异常类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Essential.WfMessageDelegationException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:Slickflow.Engine.Essential.WfMessageDelegationException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message">消息</param>
            <param name="ex">异常</param>
        </member>
        <member name="T:Slickflow.Engine.Essential.WfSignalDelegationException">
            <summary>
            消息代理服务异常类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Essential.WfSignalDelegationException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:Slickflow.Engine.Essential.WfSignalDelegationException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message">消息</param>
            <param name="ex">异常</param>
        </member>
        <member name="T:Slickflow.Engine.Service.IWorkflowService">
            <summary>
            工作流服务接口
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Service.WorkflowService">
            <summary>
            流程运行流转服务(执行部分)
            </summary>
            <summary>
            流程定义数据服务类
            </summary>
            <summary>
            工作流服务(数据查询)
            </summary>
            <summary>
            链式接口服务类
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Service.WorkflowService.ResourceService">
            <summary>
            资源服务接口
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetFirstActivity(System.String,System.String)">
            <summary>
            获取流程的第一个可办理节点
            </summary>
            <param name="processGUID">流程定义GUID</param>
            <param name="version">版本</param>
            <returns>活动</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetTaskActivityList(System.String,System.String)">
            <summary>
            获取任务类型的节点列表
            </summary>
            <param name="processGUID">流程定义GUID</param>
            <param name="version">版本</param>
            <returns>活动列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetTaskActivityList(System.Int32)">
            <summary>
            获取任务类型的节点列表
            </summary>
            <param name="processID">流程主键ID</param>
            <returns>活动列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetAllTaskActivityList(System.String,System.String)">
            <summary>
            获取全部任务类型的节点列表（包含会签和子流程）
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <returns>活动列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetNextActivity(System.String,System.String,System.String)">
            <summary>
            获取当前节点的下一个节点信息
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <param name="activityGUID">活动GUID</param>
            <returns>活动</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetNextActivity(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            获取当前节点的下一个节点信息
            </summary>
            <param name="processGUID">流程定义GUID</param>
            <param name="version">版本</param>
            <param name="activityGUID">活动定义GUID</param>
            <param name="condition">条件</param>
            <returns>节点视图</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetNextActivity(Slickflow.Engine.Common.WfAppRunner,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            简单模式：根据应用获取流程下一步节点(不考虑有多个后续节点的情况）
            </summary>
            <param name="runner">运行者</param>
            <param name="condition">条件</param>
            <returns>节点视图</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetNextActivity(System.Int32,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            简单模式：根据应用获取流程下一步节点(不考虑有多个后续节点的情况）
            </summary>
            <param name="taskID">任务ID</param>
            <param name="condition">条件</param>
            <returns>获取下一步节点</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetNextActivityTree(Slickflow.Engine.Common.WfAppRunner,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            根据应用获取流程下一步节点列表
            </summary>
            <param name="runner">应用执行人</param>
            <param name="condition">条件</param>
            <returns>节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetNextActivityTreeAsync(Slickflow.Engine.Common.WfAppRunner,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            根据应用获取流程下一步节点列表
            </summary>
            <param name="runner">应用执行人</param>
            <param name="condition">条件</param>
            <returns>节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetNextActivityTree(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Collections.Generic.IDictionary{System.String,System.String},System.Data.IDbTransaction)">
            <summary>
            根据应用获取流程下一步节点列表
            </summary>
            <param name="conn">数据库链接</param>
            <param name="runner">应用执行人</param>
            <param name="condition">条件</param>
            <param name="trans">事务或交易</param>
            <returns>节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetNextActivityTreeAsync(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Collections.Generic.IDictionary{System.String,System.String},System.Data.IDbTransaction)">
            <summary>
            根据应用获取流程下一步节点列表
            </summary>
            <param name="conn">数据库链接</param>
            <param name="runner">应用执行人</param>
            <param name="condition">条件</param>
            <param name="trans">事务或交易</param>
            <returns>节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetNextActivityTree(System.Int32,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            获取下一步活动列表树
            </summary>
            <param name="taskID">任务ID</param>
            <param name="condition">条件</param>
            <returns>下一步列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetNextActivityTreeAsync(System.Int32,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            获取下一步活动列表树
            </summary>
            <param name="taskID">任务ID</param>
            <param name="condition">条件</param>
            <returns>下一步列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetNextActivityRoleUserTree(Slickflow.Engine.Common.WfAppRunner,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            根据应用获取流程下一步节点列表，包含角色用户
            </summary>
            <param name="runner">应用执行人</param>
            <param name="condition">条件</param>
            <returns>节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetNextActivityRoleUserTreeAsync(Slickflow.Engine.Common.WfAppRunner,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            根据应用获取流程下一步节点列表，包含角色用户
            </summary>
            <param name="runner">应用执行人</param>
            <param name="condition">条件</param>
            <returns>节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetNextStepInfo(Slickflow.Engine.Common.WfAppRunner,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            根据应用获取流程下一步节点列表，包含角色用户
            包含：
            1) 网关下一步添加人员的预加载用户列表；
            2) 会签模式的下一步添加人员的预加载用户列表；
            </summary>
            <param name="runner">应用执行人</param>
            <param name="condition">条件</param>
            <returns>节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetNextStepInfoAsync(Slickflow.Engine.Common.WfAppRunner,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            异步获取下一步列表
            </summary>
            <param name="runner">应用执行人</param>
            <param name="condition">条件</param>
            <returns>节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetFirstActivityRoleUserTree(Slickflow.Engine.Common.WfAppRunner,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            流程启动时获取开始节点下一步的节点角色人员列表
            统一整合到: GetNextActivityRoleUserTree()
            </summary>
            <param name="runner">应用执行人</param>
            <param name="condition">条件</param>
            <returns>节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetFirstActivityRoleUserTreeAsync(Slickflow.Engine.Common.WfAppRunner,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            流程启动时获取开始节点下一步的节点角色人员列表
            统一整合到: GetNextActivityRoleUserTree()
            </summary>
            <param name="runner">应用执行人</param>
            <param name="condition">条件</param>
            <returns>节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetActivityInstanceCompleted(System.Int32)">
            <summary>
            获取已经完成的节点
            </summary>
            <param name="taskID">任务ID</param>
            <returns>节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetActivityInstanceCompleted(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            获取已经完成的节点记录
            </summary>
            <param name="runner">运行者</param>
            <returns>节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetTransitionInstanceList(Slickflow.Engine.Business.Entity.TransitionInstanceQuery)">
            <summary>
            获取转移实例记录
            </summary>
            <param name="query">查询实体</param>
            <returns>转移列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetActivityEntity(System.String,System.String,System.String)">
            <summary>
            获取当前活动实体
            </summary>
            <param name="processGUID">流程定义GUID</param>
            <param name="version">版本</param>
            <param name="activityGUID">活动GUID</param>
            <returns>活动</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetActivityRoles(System.String,System.String,System.String)">
            <summary>
            获取活动节点下的角色数据
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <param name="activityGUID">活动GUID</param>
            <returns>角色列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetPreviousActivityTree(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            获取上一步节点信息
            </summary>
            <param name="runner">当前运行用户</param>
            <returns>上一步步骤列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetPreviousActivityTreeAsync(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            获取上一步节点信息
            </summary>
            <param name="runner">当前运行用户</param>
            <returns>上一步步骤列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetPreviousStepInfo(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            获取上一步节点信息
            </summary>
            <param name="runner">运行者</param>
            <returns>上一步信息</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetPreviousStepInfoAsync(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            异步获取上一步节点信息
            </summary>
            <param name="runner">运行者</param>
            <returns>上一步信息</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetSignForwardStepInfo(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            获取加签步骤人员信息
            </summary>
            <param name="runner">运行者</param>
            <returns>加签步骤信息</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Start">
            <summary>
            流程启动
            编码示例：
            var wfResult = wfService.CreateRunner(runner.UserID, runner.UserName)
                            .UseApp(runner.AppInstanceID, runner.AppName, runner.AppInstanceCode)
                            .UseProcess(runner.ProcessGUID, runner.Version)
                            .Start();
            </summary>
            <returns>执行结果</returns>
        </member>
        <member name="F:Slickflow.Engine.Service.WorkflowService.startLock">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Start(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            启动流程
            编码示例：
            var wfResult = wfService.CreateRunner(runner.UserID, runner.UserName)
                            .UseApp(runner.AppInstanceID, runner.AppName, runner.AppInstanceCode)
                            .UseProcess(runner.ProcessGUID, runner.Version)
                            .Start(conn, trans);
            </summary>
            <param name="conn">连接</param>
            <param name="trans">事务</param>
            <returns>启动结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.StartProcess(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            启动流程
            </summary>
            <param name="runner">启动人</param>
            <returns>启动结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.StartProcessAsync(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            异步启动流程
            </summary>
            <param name="runner">启动人</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.StartProcess(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            流程启动
            </summary>
            <param name="conn">连接</param>
            <param name="runner">启动人</param>
            <param name="trans">事务</param>
            <returns>启动结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.StartProcessAsync(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            异步流程启动
            </summary>
            <param name="conn">连接</param>
            <param name="runner">启动人</param>
            <param name="trans">事务</param>
            <returns>启动结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.StartByMessage">
            <summary>
            消息启动流程
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.StartByMessage(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            消息启动流程
            </summary>
            <param name="conn">连接</param>
            <param name="trans">事务</param>
            <returns>启动结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.StartProcessByMessage(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            启动流程
            </summary>
            <param name="runner">启动人</param>
            <returns>启动结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.StartProcessByMessageAsync(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            异步消息启动流程
            </summary>
            <param name="runner">启动人</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.StartProcessByMessage(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            流程启动
            </summary>
            <param name="conn">连接</param>
            <param name="runner">启动人</param>
            <param name="trans">事务</param>
            <returns>启动结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.StartProcessByMessageAsync(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            异步流程启动
            </summary>
            <param name="conn">连接</param>
            <param name="runner">启动人</param>
            <param name="trans">事务</param>
            <returns>启动结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Run">
            <summary>
            运行流程(业务处理)
            编码示例：
            var wfResult = wfService.CreateRunner(runner.UserID, runner.UserName)
                            .UseApp(runner.AppInstanceID, runner.AppName, runner.AppInstanceCode)
                            .UseProcess(runner.ProcessGUID, runner.Version)
                            .Run();
            </summary>
            <returns>运行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Run(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            运行流程
            编码示例：
            var wfResult = wfService.CreateRunner(runner.UserID, runner.UserName)
                            .UseApp(runner.AppInstanceID, runner.AppName, runner.AppInstanceCode)
                            .UseProcess(runner.ProcessGUID, runner.Version)
                            .Run(conn, trans);
            </summary>
            <param name="conn">连接</param>
            <param name="trans">事务</param>
            <returns>运行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.RunProcessApp(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            流程流转
            说明：新方法统一调用RunProcess()
            </summary>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.RunProcessApp(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            流程流转
            说明：新方法统一调用RunProcess()
            </summary>
            <param name="conn">连接</param>
            <param name="runner">运行人</param>
            <param name="trans">事务</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.RunProcess(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            流程流转
            </summary>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.RunProcessAsync(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            异步执行流程
            </summary>
            <param name="runner">执行人</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.RunProcess(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            流程流转
            </summary>
            <param name="conn">连接</param>
            <param name="runner">运行人</param>
            <param name="trans">事务</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.RunProcessAsync(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            异步流程流转
            </summary>
            <param name="conn">连接</param>
            <param name="runner">运行人</param>
            <param name="trans">事务</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.RunAuto">
            <summary>
            运行流程(业务处理)
            </summary>
            <returns>运行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.RunAuto(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            运行自动流程
            </summary>
            <param name="conn">连接</param>
            <param name="trans">事务</param>
            <returns>运行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.RunProcessAuto(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            流程流转
            </summary>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.RunProcessAutoAsync(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            异步执行流程
            </summary>
            <param name="runner">执行人</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.RunProcessAuto(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            流程流转
            </summary>
            <param name="conn">连接</param>
            <param name="runner">运行人</param>
            <param name="trans">事务</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.RunProcessAutoAsync(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            异步流程流转
            </summary>
            <param name="conn">连接</param>
            <param name="runner">运行人</param>
            <param name="trans">事务</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Withdraw">
            <summary>
            流程撤销
            </summary>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Withdraw(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            流程撤销
            </summary>
            <param name="conn">连接</param>
            <param name="trans">事务</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.WithdrawProcess(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            流程撤销
            </summary>
            <param name="runner">撤销人</param>
            <returns>撤销结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.WithdrawProcessAsync(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            异步撤销流程
            </summary>
            <param name="runner">执行人</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.WithdrawProcess(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            撤销流程
            </summary>
            <param name="conn">连接</param>
            <param name="runner">撤销人</param>
            <param name="trans">事务</param>
            <returns>撤销结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.WithdrawProcessAsync(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            异步撤销流程
            </summary>
            <param name="conn">连接</param>
            <param name="runner">运行人</param>
            <param name="trans">事务</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SendBack">
            <summary>
            流程退回
            </summary>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SendBack(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            流程退回
            </summary>
            <param name="conn">连接</param>
            <param name="trans">事务</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SendBackProcess(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            退回到上一步
            </summary>
            <param name="runner">退回操作人</param>
            <returns>退回结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SendBackProcessAsync(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            异步退回流程
            </summary>
            <param name="runner">执行人</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SendBackProcess(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            退回到上一步
            </summary>
            <param name="conn">连接</param>
            <param name="runner">退回人</param>
            <param name="trans">事务</param>
            <returns>退回结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SendBackProcessAsync(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            异步退回流程
            </summary>
            <param name="conn">连接</param>
            <param name="runner">运行人</param>
            <param name="trans">事务</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Resend">
            <summary>
            流程返送
            </summary>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Resend(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            流程返送
            </summary>
            <param name="conn">连接</param>
            <param name="trans">事务</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.ResendProcess(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            从新返送(来自sendback的节点)
            </summary>
            <param name="runner">运行者</param>
            <returns>返送结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.ResendProcessAsync(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            异步返送流程
            </summary>
            <param name="runner">执行人</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.ResendProcess(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            从新返送(来自sendback的节点)
            </summary>
            <param name="conn">链接</param>
            <param name="runner">运行者</param>
            <param name="trans">事务</param>
            <returns>返送结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.ResendProcessAsync(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            异步返送流程
            </summary>
            <param name="conn">连接</param>
            <param name="runner">运行人</param>
            <param name="trans">事务</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Revise">
            <summary>
            流程修订
            </summary>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Revise(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            流程修订
            </summary>
            <param name="conn">连接</param>
            <param name="trans">事务</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.ReviseProcess(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            从新修订(来自sendback的节点)
            </summary>
            <param name="runner">运行者</param>
            <returns>返送结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.ReviseProcessAsync(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            异步修订流程
            </summary>
            <param name="runner">执行人</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.ReviseProcess(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            从新修订(来自sendback的节点)
            </summary>
            <param name="conn">链接</param>
            <param name="runner">运行者</param>
            <param name="trans">事务</param>
            <returns>返送结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.ReviseProcessAsync(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            异步修订流程
            </summary>
            <param name="conn">连接</param>
            <param name="runner">运行人</param>
            <param name="trans">事务</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Reverse">
            <summary>
            流程返签
            </summary>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Reverse(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            流程返签
            </summary>
            <param name="conn">连接</param>
            <param name="trans">事务</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.ReverseProcess(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            流程返签
            </summary>
            <param name="runner">结束人</param>
            <returns>返签结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.ReverseProcessAsync(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            异步返签流程
            </summary>
            <param name="runner">执行人</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.ReverseProcess(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            流程返签
            </summary>
            <param name="conn">连接</param>
            <param name="runner">结束人</param>
            <param name="trans">事务</param>
            <returns>返签结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.ReverseProcessAsync(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            异步返签流程
            </summary>
            <param name="conn">连接</param>
            <param name="runner">运行人</param>
            <param name="trans">事务</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Reject">
            <summary>
            流程驳回
            </summary>
            <returns>驳回结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Reject(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            流程驳回
            </summary>
            <param name="conn">连接</param>
            <param name="trans">事务</param>
            <returns>驳回结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.RejectProcess(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            流程驳回
            </summary>
            <param name="runner">执行操作人</param>
            <returns>驳回结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.RejectProcessAsync(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            异步驳回流程
            </summary>
            <param name="runner">执行人</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.RejectProcess(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            流程驳回
            </summary>
            <param name="conn">连接</param>
            <param name="runner">执行操作人</param>
            <param name="trans">事务</param>
            <returns>驳回结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.RejectProcessAsync(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            异步驳回流程
            </summary>
            <param name="conn">连接</param>
            <param name="runner">运行人</param>
            <param name="trans">事务</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Close">
            <summary>
            流程关闭
            </summary>
            <returns>关闭结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Close(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            流程关闭
            </summary>
            <param name="conn">连接</param>
            <param name="trans">事务</param>
            <returns>关闭结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.CloseProcess(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            流程关闭
            </summary>
            <param name="runner">执行操作人</param>
            <returns>关闭结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.CloseProcessAsync(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            异步关闭流程
            </summary>
            <param name="runner">执行人</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.CloseProcess(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            流程关闭
            </summary>
            <param name="conn">连接</param>
            <param name="runner">执行操作人</param>
            <param name="trans">事务</param>
            <returns>关闭结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.CloseProcessAsync(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            异步关闭流程
            </summary>
            <param name="conn">连接</param>
            <param name="runner">运行人</param>
            <param name="trans">事务</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Jump(Slickflow.Engine.Common.JumpOptionEnum)">
            <summary>
            流程跳转
            </summary>
            <param name="jumpOption">跳转类型</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Jump(System.Data.IDbConnection,System.Data.IDbTransaction,Slickflow.Engine.Common.JumpOptionEnum)">
            <summary>
            流程跳转
            </summary>
            <param name="conn">连接</param>
            <param name="trans">事务</param>
            <param name="jumpOption">跳转类型</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.JumpProcess(Slickflow.Engine.Common.WfAppRunner,Slickflow.Engine.Common.JumpOptionEnum)">
            <summary>
            流程跳转
            </summary>
            <param name="runner">执行操作人</param>
            <param name="jumpOption">跳转选项</param>
            <returns>跳转结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.JumpProcessAsync(Slickflow.Engine.Common.WfAppRunner,Slickflow.Engine.Common.JumpOptionEnum)">
            <summary>
            异步流程跳转
            </summary>
            <param name="runner">执行操作人</param>
            <param name="jumpOption">跳转选项</param>
            <returns>跳转结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.JumpProcess(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction,Slickflow.Engine.Common.JumpOptionEnum)">
            <summary>
            流程跳转
            </summary>
            <param name="conn">连接</param>
            <param name="runner">执行操作人</param>
            <param name="trans">事务</param>
            <param name="jumpOption">跳转选项</param>
            <returns>跳转结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.JumpProcessAsync(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction,Slickflow.Engine.Common.JumpOptionEnum)">
            <summary>
            异步流程跳转
            </summary>
            <param name="conn">连接</param>
            <param name="runner">执行操作人</param>
            <param name="trans">事务</param>
            <param name="jumpOption">跳转选项</param>
            <returns>跳转结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.FillNextActivityPerforms(Slickflow.Engine.Common.WfAppRunner,Slickflow.Engine.Common.JumpOptionEnum)">
            <summary>
            重新生成跳转活动的执行人员列表
            </summary>
            <param name="runner">当前运行用户</param>
            <param name="jumpOption">跳转选项</param>
            <returns>执行人员列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SignForward">
            <summary>
            流程加签
            </summary>
            <returns>加签结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SignForward(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            流程加签
            </summary>
            <param name="conn">链接</param>
            <param name="trans">事务</param>
            <returns>加签结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SignForwardProcess(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            加签
            </summary>
            <param name="runner">结束人</param>
            <returns>加签结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SignForwardProcessAsync(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            异步流程加签
            </summary>
            <param name="runner">结束人</param>
            <returns>加签结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SignForwardProcess(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            流程加签
            </summary>
            <param name="conn">连接</param>
            <param name="runner">结束人</param>
            <param name="trans">事务</param>
            <returns>加签结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SignForwardProcessAsync(System.Data.IDbConnection,Slickflow.Engine.Common.WfAppRunner,System.Data.IDbTransaction)">
            <summary>
            异步流程加签
            </summary>
            <param name="conn">连接</param>
            <param name="runner">结束人</param>
            <param name="trans">事务</param>
            <returns>加签结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.ResumeProcess(System.Int32,Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            恢复流程实例(只针对挂起操作）
            </summary>
            <param name="processInstanceId">挂起操作的实例ID</param>
            <param name="runner">执行者</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SuspendProcess(System.Int32,Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            挂起流程实例
            </summary>
            <param name="taskId">任务ID</param>
            <param name="runner">执行者</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.CancelProcess(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            取消流程
            </summary>
            <param name="runner">执行操作的用户</param>
            <returns>执行结果的标志</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.DiscardProcess(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            废弃流程
            </summary>
            <param name="runner">执行操作的用户</param>
            <returns>执行结果的标志</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.TerminateProcess(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            终结流程
            </summary>
            <param name="runner">执行操作的用户</param>
            <returns>执行结果的标志</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.TerminateProcess(System.Data.IDbConnection,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            终结流程实例
            </summary>
            <param name="conn">链接</param>
            <param name="entity">流程实例</param>
            <param name="userID">用户ID</param>
            <param name="userName">用户名称</param>
            <param name="trans">事务</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.AgreeTask(System.Int32)">
            <summary>
            同意
            </summary>
            <param name="taskID">任务ID</param>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.RefuseTask(System.Int32)">
            <summary>
            拒绝
            </summary>
            <param name="taskID">任务ID</param>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SetTaskRead(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            设置任务为已读状态(根据任务ID获取任务)
            </summary>
            <param name="runner">执行人</param>
            <returns>任务读取的标志</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SetTaskEMailSent(System.Int32)">
            <summary>
            更新任务邮件发送状态
            </summary>
            <param name="taskID">任务ID</param>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetTaskView(System.Int32)">
            <summary>
            获取任务视图
            </summary>
            <param name="taskID">任务ID</param>
            <returns>任务视图</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetTaskView(System.Int32,System.Int32)">
            <summary>
            获取任务视图
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <param name="activityInstanceID">活动实例ID</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetTaskView(System.Data.IDbConnection,System.String,System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            获取任务视图
            </summary>
            <param name="conn">数据库连接</param>
            <param name="appInstanceID">应用实例ID</param>
            <param name="processGUID">流程GUID</param>
            <param name="userID">用户ID</param>
            <param name="trans">数据库事务</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetRunningTasks(Slickflow.Engine.Business.Entity.TaskQuery)">
            <summary>
            获取运行中的任务
            </summary>
            <param name="query">查询实体</param>
            <returns>任务列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetFirstRunningTask(System.Int32)">
            <summary>
            获取活动实例下的第一个任务记录
            </summary>
            <param name="activityInstanceID">活动实例</param>
            <returns>任务视图</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetReadyTasks(Slickflow.Engine.Business.Entity.TaskQuery)">
            <summary>
            获取待办任务
            </summary>
            <param name="query">查询对象</param>
            <returns>任务列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetCompletedTasks(Slickflow.Engine.Business.Entity.TaskQuery)">
            <summary>
            获取办结任务列表
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetTaskListEMailUnSent">
            <summary>
            获取未发送邮件通知的待办任务列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetProcessByVersion(System.String,System.String)">
            <summary>
            流程定义数据读取
            </summary>
            <param name="processGUID">流程定义GUID</param>
            <param name="version">版本号</param>
            <returns>流程</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetProcessByName(System.String,System.String)">
            <summary>
            流程定义数据读取
            </summary>
            <param name="processName">流程名称</param>
            <param name="version">版本号</param>
            <returns>流程</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetProcessByCode(System.String,System.String)">
            <summary>
            流程定义数据读取
            </summary>
            <param name="processCode">流程代码</param>
            <param name="version">版本号</param>
            <returns>流程</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetProcessUsing(System.String)">
            <summary>
            获取当前版本的流程定义记录
            </summary>
            <param name="processGUID">流程GUID</param>
            <returns>流程</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetProcessByID(System.Int32)">
            <summary>
            获取流程定义记录
            </summary>
            <param name="processID">流程主键ID</param>
            <returns>流程</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetProcessFileByID(System.Int32)">
            <summary>
            获取流程定义文件
            </summary>
            <param name="id">流程ID</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetProcessList">
            <summary>
            获取流程定义数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetProcessListSimple">
            <summary>
            获取流程定义数据（只包括基本属性）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetProcessFile(System.String,System.String)">
            <summary>
            流程定义的XML文件获取
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <returns>流程文件</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SaveProcessFile(Slickflow.Engine.Business.Entity.ProcessFileEntity)">
            <summary>
            保存流程定义的xml文件
            </summary>
            <param name="entity">流程文件实体</param>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.InsertProcess(Slickflow.Engine.Business.Entity.ProcessEntity)">
            <summary>
            创建流程定义记录
            </summary>
            <param name="entity">流程定义实体</param>
            <returns>新ID</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.CreateProcess(Slickflow.Engine.Business.Entity.ProcessEntity)">
            <summary>
            创建流程定义记录
            </summary>
            <param name="entity">流程定义实体</param>
            <returns>新ID</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.CreateProcessVersion(Slickflow.Engine.Business.Entity.ProcessEntity)">
            <summary>
            创建流程定义记录新版本
            </summary>
            <param name="entity">流程</param>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.UpdateProcess(Slickflow.Engine.Business.Entity.ProcessEntity)">
            <summary>
            更新流程定义记录
            </summary>
            <param name="entity">流程</param>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.UpdateProcessUsingState(System.String,System.String,System.Byte)">
            <summary>
            更新流程使用状态
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <param name="usingState">使用状态</param>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.UpgradeProcess(System.String,System.String,System.String)">
            <summary>
            升级流程记录
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">流程版本</param>
            <param name="newVersion">新版本编号</param>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.DeleteProcess(System.String,System.String)">
            <summary>
            删除流程定义记录
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.DeleteProcess(System.String)">
            <summary>
            删除流程定义记录
            </summary>
            <param name="processGUID">流程GUID</param>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.DeleteInstanceInt(System.String,System.String)">
            <summary>
            删除流程实例包括其关联数据
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <returns>是否删除</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.ImportProcess(System.String)">
            <summary>
            导入流程XML文件，并生成新流程
            </summary>
            <param name="xmlContent">流程XML文档</param>
            <returns>新流程ID</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.ValidateProcess(Slickflow.Engine.Business.Entity.ProcessEntity)">
            <summary>
            流程校验
            </summary>
            <param name="entity">流程校验实体</param>
            <returns>流程校验结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.ResetCache(System.String,System.String)">
            <summary>
            重置缓存中的流程定义信息
            </summary>
            <param name="processGUID">流程Guid编号</param>
            <param name="version">流程版本</param>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetProcessInstance(System.Int32)">
            <summary>
            获取流程实例数据
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <returns>流程实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetProcessInstance(System.Data.IDbConnection,System.Int32,System.Data.IDbTransaction)">
            <summary>
            获取流程实例数据
            </summary>
            <param name="conn">链接</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="trans">事务</param>
            <returns>流程实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetProcessInstance(System.String)">
            <summary>
            获取流程实例数据
            </summary>
            <param name="appInstanceID">业务实例ID</param>
            <returns>流程实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetProcessInstanceByActivity(System.Int32)">
            <summary>
            获取流程实例数据
            </summary>
            <param name="activityInstanceID">活动实例ID</param>
            <returns>流程实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetRunningProcessInstance(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            获取运行中的流程实例
            </summary>
            <param name="runner">运行者</param>
            <returns>流程实例实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetProcessInstanceCount(System.String,System.String)">
            <summary>
            判断流程实例是否存在
            </summary>
            <param name="processGUID">流程定义ID</param>
            <param name="version">流程定义版本</param>
            <returns>流程实例记录数</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetProcessInitiator(System.Int32)">
            <summary>
            获取流程发起人信息
            </summary>
            <param name="processInstanceID">流程实例Id</param>
            <returns>执行者</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetActivityInstance(System.Int32)">
            <summary>
            获取活动实例数据
            </summary>
            <param name="activityInstanceID"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetActivityInstances(System.Int32)">
            <summary>
            获取一个流程实例下的所有活动实例
            </summary>
            <param name="processInstanceID"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetTargetActivityInstanceList(System.Int32)">
            <summary>
            获取当前节点的下一步已经发出的活动实例列表(transition实例表)
            名称更改：GetNextActivityInstanceList --> GetTargetActivityInstanceList
            更改用户：Besley
            更改日期：20190326
            </summary>
            <param name="fromActivityInstanceID">活动实例ID</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetTaskPerformers(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            获取当前等待办理节点的任务分配人列表
            </summary>
            <param name="runner">执行者</param>
            <returns>执行者列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.IsLastTask(System.Int32)">
            <summary>
            判断当前任务是否是最后一个任务
            (适应于简单节点或者多实例节点的场景)
            </summary>
            <param name="taskID">任务ID</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.EntrustTask(Slickflow.Engine.Business.Entity.TaskEntrustedEntity,System.Boolean)">
            <summary>
            创建新的委托任务
            </summary>
            <param name="entrusted">被委托任务信息</param>
            <param name="cancalOriginalTask">是否取消原委托任务办理</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SetProcessOverdue(System.Int32,System.DateTime,Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            设置流程实例的过期时间
            </summary>
            <param name="processInstanceID">流程实例ID</param>
            <param name="overdueDateTime">过期时间</param>
            <param name="runner">当前运行用户</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SetProcessJobTimerCompleted(System.Data.IDbConnection,System.Int32,System.Data.IDbTransaction)">
            <summary>
            设置活动实例的定时作业为完成状态
            (用于HangFire后台轮询任务)
            </summary>
            <param name="conn">链接</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="trans">事务</param>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SetActivityJobTimerCompleted(System.Data.IDbConnection,System.Int32,System.Data.IDbTransaction)">
            <summary>
            设置活动实例的定时作业为完成状态
            (用于HangFire后台轮询任务)
            </summary>
            <param name="conn">链接</param>
            <param name="activityInstanceID">活动实例ID</param>
            <param name="trans">事务</param>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetRunningNode(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            获取流程当前运行节点信息
            </summary>
            <param name="runner"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.IsMineTask(Slickflow.Engine.Business.Entity.ActivityInstanceEntity,System.String)">
            <summary>
            判断是否是我的任务
            </summary>
            <param name="entity"></param>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetRunningActivityInstance(Slickflow.Engine.Business.Entity.TaskQuery)">
            <summary>
            获取正在运行中的活动实例
            </summary>
            <param name="query">任务查询</param>
            <returns>活动实例列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetProcessVariable(System.Int32)">
            <summary>
            获取流程变量
            </summary>
            <param name="variableID">变量ID</param>
            <returns>变量实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetProcessVariable(Slickflow.Engine.Business.Entity.ProcessVariableQuery)">
            <summary>
            获取流程变量
            </summary>
            <param name="query">查询</param>
            <returns>变量实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetProcessVariableList(Slickflow.Engine.Business.Entity.ProcessVariableQuery)">
            <summary>
            获取变量列表
            </summary>
            <param name="query">变量查询</param>
            <returns>活动实例列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.DeleteProcessVariable(System.Int32)">
            <summary>
            删除流程变量
            </summary>
            <param name="variableID">变量ID</param>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.ValidateProcessVariable(System.Int32,System.String)">
            <summary>
            验证触发表达式是否满足
            </summary>
            <param name="conn">链接</param>
            <param name="processInstanceID">流程实例ID</param>
            <param name="expression">表达式</param>
            <param name="trans">事务</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.UpdateProcessInstance(Slickflow.Engine.Business.Entity.ProcessInstanceEntity)">
            <summary>
            更新流程实例实体
            </summary>
            <param name="entity">流程实例实体</param>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SaveProcessVariable(Slickflow.Engine.Business.Entity.ProcessVariableEntity)">
            <summary>
            保存流程变量
            </summary>
            <param name="entity">流程实体</param>
            <returns>流程变量ID</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetRoleAll">
            <summary>
            获取所有角色数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetRoleByProcess(System.String,System.String)">
            <summary>
            获取流程定义文件中的角色信息
            </summary>
            <param name="processGUID">流程定义GUID</param>
            <param name="version">版本</param>
            <returns>角色列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetRoleUserListByProcess(System.String,System.String)">
            <summary>
            获取流程文件中角色用户的列表数据
            </summary>
            <param name="processGUID">流程定义GUID</param>
            <param name="version">版本</param>
            <returns>角色列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetUserAll">
            <summary>
            获取所有用户数据
            </summary>
            <returns>用户列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetUserListByRole(System.String)">
            <summary>
            根据角色获取用户列表
            </summary>
            <param name="roleID">角色ID</param>
            <returns>用户列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.GetPerformerList(Slickflow.Engine.Common.NodeView)">
            <summary>
            获取节点上的执行者列表
            </summary>
            <param name="nextNode">节点</param>
            <returns>执行用户列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.CreateRunner(Slickflow.Engine.Common.WfAppRunner)">
            <summary>
            创建运行用户身份
            </summary>
            <param name="runner">运行用户</param>
            <returns>服务类</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.CreateRunner(System.String,System.String)">
            <summary>
            创建运行用户身份
            </summary>
            <param name="userID">用户ID</param>
            <param name="userName">用户名称</param>
            <returns>服务类</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.UseApp(System.String,System.String,System.String)">
            <summary>
            绑定业务票据
            </summary>
            <param name="appInstanceID">业务实例ID</param>
            <param name="appName">业务应用名称</param>
            <param name="appCode">业务应用编码</param>
            <returns>服务类</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.UseProcess(System.String,System.String)">
            <summary>
            Use Process Definition
            </summary>
            <param name="processCodeOrProcessGUID">ProcessCode/ProcessGUId</param>
            <param name="version">Version</param>
            <returns>Workflow Service</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.NextStepInt(Slickflow.Engine.Common.PerformerList)">
            <summary>
            下一步活动
            内部测试时用到此方法
            特别注意：正式生产环境，不要使用该方法
            </summary>
            <param name="performerList">执行用户列表</param>
            <returns>服务类</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.NextStepInt(System.String,System.String)">
            <summary>
            下一步活动
            内部测试时用到此方法
            特别注意：正式生产环境，不要使用该方法
            </summary>
            <param name="userID">用户ID</param>
            <param name="userName">用户名称</param>
            <returns>服务类</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.NextStep(System.Collections.Generic.IDictionary{System.String,Slickflow.Engine.Common.PerformerList})">
            <summary>
            下一步活动
            </summary>
            <param name="nextActivityPerformers">
            activity->performerlist 字典类型待办用户列表
            </param>
            <returns>服务类</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.NextStep(System.String,Slickflow.Engine.Common.PerformerList)">
            <summary>
            下一步活动
            </summary>
            <param name="activityGUID">活动节点GUID</param>
            <param name="performerList">执行用户列表</param>
            <returns>服务类</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.PrevStepInt">
            <summary>
            指定上一步类型
            </summary>
            <returns>服务类</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.IfCondition(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            设置变量条件
            </summary>
            <param name="variables">变量列表</param>
            <returns>服务类</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.IfCondition(System.String,System.String)">
            <summary>
            添加条件变量
            </summary>
            <param name="name">名称</param>
            <param name="value">数值</param>
            <returns>服务类</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.OnTask(System.Int32)">
            <summary>
            传递任务ID
            </summary>
            <param name="taskID">任务ID</param>
            <returns>服务类</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SetVariable(System.String,System.String)">
            <summary>
            添加动态变量
            </summary>
            <param name="name">名称</param>
            <param name="value">数值</param>
            <returns>服务类</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.SetVariable(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            添加动态变量
            </summary>
            <param name="variables">变量列表</param>
            <returns>服务类</returns>
        </member>
        <member name="M:Slickflow.Engine.Service.WorkflowService.Subscribe(Slickflow.Engine.Delegate.EventFireTypeEnum,System.Func{Slickflow.Engine.Delegate.DelegateContext,Slickflow.Engine.Delegate.IDelegateService,System.Boolean})">
            <summary>
            活动事件订阅
            </summary>
            <param name="eventType">活动事件类型</param>
            <param name="func">回调方法</param>
            <returns>服务类</returns>
        </member>
        <member name="T:Slickflow.Engine.Storage.XPDLLocalStorage">
            <summary>
            流程定义文件存储
            1） 默认本地文件，可以实现数据库读取，云端存储文件读取等方式
            2） 此继承类是实现数据库存储方式
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Storage.XPDLLocalStorage.Read(Slickflow.Engine.Business.Entity.ProcessEntity)">
            <summary>
            本地文件存储读取方法
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Storage.XPDLLocalStorage.Save(System.String,System.Xml.XmlDocument)">
            <summary>
            XML文件本地存储
            </summary>
            <param name="filePath">文件存储路径</param>
            <param name="xmlDoc">XML文档</param>
        </member>
        <member name="T:Slickflow.Engine.Storage.XPDLStorageFactory">
            <summary>
            外部存储的工厂方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Storage.XPDLStorageFactory.CreateXPDLStorage">
            <summary>
            创建外部存储方法实例
            </summary>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Utility.CachedHelper">
            <summary>
            流程定义文件Cache
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Utility.CachedHelper.SetXpdlCache(System.String,System.String,System.Xml.XmlDocument)">
            <summary>
            设置流程文件缓存
            </summary>
            <param name="processGUID"></param>
            <param name="xmlDoc"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.CachedHelper.GetXpdlCache(System.String,System.String)">
            <summary>
            读取流程文件的缓存
            </summary>
            <param name="processGUID"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.CachedHelper.TryUpdate(System.String,System.String,System.Xml.XmlDocument)">
            <summary>
            更新流程缓存
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <param name="xmlDoc">xml文本</param>
            <returns>更新状态</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.CachedHelper.SetEntityCache(System.Int32,System.Object)">
            <summary>
            设置实体Reader转换的动态映射方法缓存
            </summary>
            <param name="id"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.CachedHelper.GetEntityCache(System.Int32)">
            <summary>
            读取实体Reader转换的动态映射方法缓存
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Utility.ConfigHelper">
            <summary>
            配置帮助类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Utility.ConfigHelper.GetAppSettingString(System.String)">
            <summary>
            获取应用配置的节点信息
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.ConfigHelper.GetConnectionString(System.String)">
            <summary>
            获取连接串的节点信息
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.ConfigHelper.GetExecutingDirectory">
            <summary>
            获取当前应用程序的执行路径
            </summary>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Utility.EnumHelper">
            <summary>
            根据字符串转换枚举类型
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Utility.EnumHelper.ParseEnum``1(System.String)">
            <summary>
            枚举类型解析
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="value">值</param>
            <returns>枚举</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.EnumHelper.TryParseEnum``1(System.String)">
            <summary>
            枚举类型解析
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="value">值</param>
            <returns>枚举</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.EnumHelper.GetFirst``1(System.Collections.Generic.List{``0})">
            <summary>
            获取非空列表的首个元素
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <returns>首元素</returns>
        </member>
        <member name="T:Slickflow.Engine.Utility.MimeFormat">
            <summary>
            Mime内容格式
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Utility.HttpClientHelper">
            <summary>
            HttpClient 帮助类
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Utility.HttpClientHelper.URL">
            <summary>
            URL 属性
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.#cctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.CreateHelper(System.String)">
            <summary>
            创建基本HttpClientHelper类
            </summary>
            <param name="url">URL</param>
            <returns>帮助类</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.CreateHelper(System.String,System.String)">
            <summary>
            创建HttpClientHelper类
            </summary>
            <param name="url"></param>
            <param name="ticket"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.Get">
            <summary>
            返回请求结果
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.Get``1">
            <summary>
            获取
            </summary>
            <typeparam name="T1">类型</typeparam>
            <returns>对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.GetAsync``1">
            <summary>
            异步获取
            </summary>
            <typeparam name="T1">类型</typeparam>
            <returns>对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.Post``2(``0)">
            <summary>
            提交
            </summary>
            <typeparam name="T1">类型1</typeparam>
            <typeparam name="T2">类型2</typeparam>
            <param name="t">对象t</param>
            <returns>对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.PostAsync``2(``0)">
            <summary>
            异步提交
            </summary>
            <typeparam name="T1">类型1</typeparam>
            <typeparam name="T2">类型2</typeparam>
            <param name="t">对象t</param>
            <returns>对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.Post(System.String)">
            <summary>
            Post提交
            </summary>
            <param name="json">Json格式对象</param>
            <returns>任意结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.PostAsync(System.String)">
            <summary>
            Post提交
            </summary>
            <param name="json">Json格式对象</param>
            <returns>任意结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.Query``2(``0)">
            <summary>
            Post获取分页数据
            </summary>
            <typeparam name="T1">类型1</typeparam>
            <typeparam name="T2">类型2</typeparam>
            <param name="t">对象t</param>
            <returns>对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.QueryAsync``2(``0)">
            <summary>
            异步查询列表
            </summary>
            <typeparam name="T1">类型1</typeparam>
            <typeparam name="T2">类型2</typeparam>
            <param name="t">对象t</param>
            <returns>对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.Insert``2(``0)">
            <summary>
            插入
            </summary>
            <typeparam name="T1">类型1</typeparam>
            <typeparam name="T2">类型2</typeparam>
            <param name="t">对象t</param>
            <returns>对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.InsertAsync``2(``0)">
            <summary>
            异步插入
            </summary>
            <typeparam name="T1">类型1</typeparam>
            <typeparam name="T2">类型2</typeparam>
            <param name="t">对象t</param>
            <returns>对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.Put``2(``0)">
            <summary>
            更新
            </summary>
            <typeparam name="T1">类型1</typeparam>
            <typeparam name="T2">类型2</typeparam>
            <param name="t">对象t</param>
            <returns>对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.PutAsync``2(``0)">
            <summary>
            异步更新
            </summary>
            <typeparam name="T1">类型1</typeparam>
            <typeparam name="T2">类型2</typeparam>
            <param name="t">对象t</param>
            <returns>对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.Put(System.String)">
            <summary>
            Post提交
            </summary>
            <param name="json">Json格式对象</param>
            <returns>任意结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.Update``2(``0)">
            <summary>
            更新
            </summary>
            <typeparam name="T1">类型1</typeparam>
            <typeparam name="T2">类型2</typeparam>
            <param name="t">对象t</param>
            <returns>对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.UpdateAsync``2(``0)">
            <summary>
            异步更新
            </summary>
            <typeparam name="T1">类型1</typeparam>
            <typeparam name="T2">类型2</typeparam>
            <param name="t">对象t</param>
            <returns>对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.Delete">
            <summary>
            返回请求结果
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.Delete``1">
            <summary>
            删除
            </summary>
            <typeparam name="T1">类型</typeparam>
            <returns>对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.HttpClientHelper.DeleteAsync``1">
            <summary>
            异步删除
            </summary>
            <typeparam name="T1">类型</typeparam>
            <returns>对象</returns>
        </member>
        <member name="T:Slickflow.Engine.Utility.MD5Helper">
            <summary>
            MD5 签名的帮助类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Utility.MD5Helper.ComputeMD5(System.IO.Stream)">
            <summary>
            计算文件内容的MD5值
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.MD5Helper.GetMD5(System.String)">
            <summary>
            计算文本类型的MD5值
            </summary>
            <param name="sDataIn"></param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Utility.RandomSequenceGenerator">
            <summary>
            随机序列生成器
            https://www.c-sharpcorner.com/article/generating-random-number-and-string-in-C-Sharp/
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Utility.RandomSequenceGenerator.GetRandomNumber(System.Int32,System.Int32)">
            <summary>
            获取随机数字
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.RandomSequenceGenerator.GetRandomInt4">
            <summary>
            获得随机整数，默认4位整数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.RandomSequenceGenerator.GetRandomString(System.Int32,System.Boolean)">
            <summary>
            获取随机字符串
            </summary>
            <param name="size"></param>
            <param name="lowerCase"></param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.RandomSequenceGenerator.GetRandomSequece">
            <summary>
            获取字符串和数字的混合序列
            </summary>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Utility.ReflectionHelper">
            <summary>
            反射帮助类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Utility.ReflectionHelper.GetSpecialInstance``1(System.String)">
            <summary>
            获取特别类型的实例
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="fullName">名称</param>
            <returns>实例</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.ReflectionHelper.GetProperty(System.Linq.Expressions.LambdaExpression)">
            <summary>
            获取属性
            </summary>
            <param name="lambda">表达式</param>
            <returns>成员信息</returns>
        </member>
        <member name="T:Slickflow.Engine.Utility.ResponseResult">
            <summary>
            响应结果类
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Utility.ResponseResult.Status">
            <summary>
            状态(0-default, 1-success, -1-error)
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Utility.ResponseResult.Message">
            <summary>
            消息内容
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Utility.ResponseResult.NewID">
            <summary>
            新ID值
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Utility.ResponseResult.ExtraData">
            <summary>
            消息额外数据
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Utility.ResponseResult.Default(System.String)">
            <summary>
            响应消息封装类
            </summary>
            <param name="message">消息内容</param>
            <returns>响应结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.ResponseResult.Success(System.String)">
            <summary>
            响应消息封装类
            </summary>
            <param name="message">消息内容</param>
            <returns>响应结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.ResponseResult.Success(System.Object,System.String)">
            <summary>
            响应消息封装类，用于插入操作，返回新ID
            </summary>
            <param name="newId">新实体ID</param>
            <param name="message">消息内容</param>
            <returns>响应结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.ResponseResult.Error(System.String)">
            <summary>
            响应消息封装类
            </summary>
            <param name="errorMessage">消息内容</param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Utility.ResponseResult`1">
            <summary>
            响应消息类(泛型)
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Utility.ResponseResult`1.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Utility.ResponseResult`1.Message">
            <summary>
            消息内容
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Utility.ResponseResult`1.NewID">
            <summary>
            新GUID值
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Utility.ResponseResult`1.Entity">
            <summary>
            业务实体
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Utility.ResponseResult`1.TotalPages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Utility.ResponseResult`1.TotalRowsCount">
            <summary>
            总行数
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Utility.ResponseResult`1.Default">
            <summary>
            响应消息封装类
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.ResponseResult`1.Success(`0,System.String)">
            <summary>
            响应消息封装类
            </summary>
            <param name="t">实体</param>
            <param name="message">消息内容</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.ResponseResult`1.Success(System.Int32,System.String)">
            <summary>
            响应消息封装类，用于插入操作，返回新ID
            </summary>
            <param name="newId">新实体ID</param>
            <param name="message">消息内容</param>
            <returns>响应结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.ResponseResult`1.Error(System.String)">
            <summary>
            Http 响应消息封装类
            </summary>
            <param name="message">消息内容</param>
            <returns>响应结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Utility.SerializationHelper">
            <summary>
            序列化帮助类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Utility.SerializationHelper.Serialize(System.Type,System.Object)">
            <summary>
            DataContractSerializer序列化一个对象
            </summary>
            <param name="type">对象类型</param>
            <param name="obj">实例对象</param>
            <returns>序列化后的文本</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.SerializationHelper.Deserialize(System.Type,System.String)">
            <summary>
            反序列化一个对象
            </summary>
            <param name="type">对象类型</param>
            <param name="strObject">实例对象</param>
            <returns>序列化后的对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.SerializationHelper.SplitStrings(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            添加分隔符
            </summary>
            <param name="list">列表</param>
            <param name="seperator">分隔符</param>
            <returns>字符串</returns>
        </member>
        <member name="T:Slickflow.Engine.Utility.XMLHelper">
            <summary>
            XMLHelper XML文档操作管理器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Utility.XMLHelper.GetXmlNodeByXpath(System.Xml.XmlDocument,System.String)">
            <summary>
            选择匹配XPath表达式的第一个节点XmlNode.
            </summary>
            <param name="xmlDoc">XML文档</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名")</param>
            <returns>返回XmlNode</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.XMLHelper.GetXmlNodeByXpath(System.Xml.XmlDocument,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
            选择匹配XPath表达式的第一个节点XmlNode.
            </summary>
            <param name="xmlDoc">XML文档</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名")</param>
            <param name="nsmgr">命名空间</param>
            <returns>返回XmlNode</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.XMLHelper.GetXmlNodeListByXpath(System.Xml.XmlDocument,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
            选择匹配XPath表达式的节点列表XmlNodeList.
            </summary>
            <param name="xmlDoc">XML文档</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名")</param>
            <param name="nsmgr">命名空间</param> 
            <returns>返回的XmlNodeList</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.XMLHelper.GetXmlNodeText(System.Xml.XmlNode,System.String)">
            <summary>
            获取节点文本
            </summary>
            <param name="xmlNode">XML节点</param>
            <param name="childNodeName">子节点名称</param>
            <returns>文本</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.XMLHelper.GetXmlAttribute(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            选择节点的某一个xml属性名称
            </summary>
            <param name="xmlNode">xml节点</param>
            <param name="attributeName">属性名称</param>
            <param name="isLowerCase">属性小写</param>
            <returns>属性值</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.XMLHelper.SetXmlAttribute(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            设置节点属性的文本
            </summary>
            <param name="xmlNode">节点</param>
            <param name="name">属性名称</param>
            <param name="value">文本</param>
        </member>
        <member name="M:Slickflow.Engine.Utility.XMLHelper.SetXmlAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            设置节点属性的文本
            </summary>
            <param name="xmlNode">节点</param>
            <param name="name">属性名称</param>
            <param name="value">文本</param>
        </member>
        <member name="M:Slickflow.Engine.Utility.XMLHelper.CreateXmlDocument(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            创建一个XML文档
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="rootNodeName">XML文档根节点名称(须指定一个根节点名称)</param>
            <param name="version">XML文档版本号(必须为:"1.0")</param>
            <param name="encoding">XML文档编码方式</param>
            <param name="standalone">该值必须是"yes"或"no",如果为null,Save方法不在XML声明上写出独立属性</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.XMLHelper.CreateXmlNodeByXPath(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            依据匹配XPath表达式的第一个节点来创建它的子节点(如果此节点已存在则追加一个新的同名节点
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlNodeName">要匹配xmlNodeName的节点名称</param>
            <param name="innerText">节点文本值</param>
            <param name="xmlAttributeName">要匹配xmlAttributeName的属性名称</param>
            <param name="value">属性值</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.XMLHelper.CreateOrUpdateXmlNodeByXPath(System.String,System.String,System.String,System.String)">
            <summary>
            依据匹配XPath表达式的第一个节点来创建或更新它的子节点(如果节点存在则更新,不存在则创建)
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlNodeName">要匹配xmlNodeName的节点名称</param>
            <param name="innerText">节点文本值</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.XMLHelper.CreateOrUpdateXmlAttributeByXPath(System.String,System.String,System.String,System.String)">
            <summary>
            依据匹配XPath表达式的第一个节点来创建或更新它的属性(如果属性存在则更新,不存在则创建)
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlAttributeName">要匹配xmlAttributeName的属性名称</param>
            <param name="value">属性值</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.XMLHelper.DeleteXmlNodeByXPath(System.String,System.String)">
            <summary>
            删除匹配XPath表达式的第一个节点(节点中的子元素同时会被删除)
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.XMLHelper.DeleteXmlAttributeByXPath(System.String,System.String,System.String)">
            <summary>
            删除匹配XPath表达式的第一个节点中的匹配参数xmlAttributeName的属性
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlAttributeName">要删除的xmlAttributeName的属性名称</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:Slickflow.Engine.Utility.XMLHelper.DeleteAllXmlAttributeByXPath(System.String,System.String)">
            <summary>
            删除匹配XPath表达式的第一个节点中的所有属性
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.CollaborationModelHelper">
            <summary>
            协作模型转换成实体
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.CollaborationModelHelper.ConvertCollaborationFromXml(System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            转换为Collaboration实体
            </summary>
            <param name="xmlDoc">XML文档</param>
            <param name="xmlNodeCollaboration">协作节点</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.CollaborationModelHelper.ConvertCollaboration(System.Xml.XmlNode)">
            <summary>
            转换协作节点
            </summary>
            <param name="xmlNodeCollaboration">XML协作节点</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.CollaborationModelHelper.ConvertParticipant(System.Xml.XmlNode)">
            <summary>
            转换参与者节点
            </summary>
            <param name="xmlNodeParticipant">XML参与者节点</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.CollaborationModelHelper.ConvertProcess(System.Xml.XmlNode)">
            <summary>
            转换流程节点
            </summary>
            <param name="xmlProcess">XML流程节点</param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Common.ActionMethodEnum">
            <summary>
            操作方法类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ActionMethodEnum.None">
            <summary>
            空类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ActionMethodEnum.LocalService">
            <summary>
            本地服务程序
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ActionMethodEnum.CSharpLibrary">
            <summary>
            C# 代码
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ActionMethodEnum.WebApi">
            <summary>
            外部插件方法
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ActionMethodEnum.SQL">
            <summary>
            SQL 语句
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ActionMethodEnum.StoreProcedure">
            <summary>
            存储过程
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ActionMethodEnum.Script">
            <summary>
            执行脚本
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ActionMethodEnum.Python">
            <summary>
            Python 脚本
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ActionMethodEnum.PlugIn">
            <summary>
            WebAPI 服务
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Common.SubMethodEnum">
            <summary>
            子方法類型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.SubMethodEnum.None">
            <summary>
            空白
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.SubMethodEnum.HttpGet">
            <summary>
            Get方法
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.SubMethodEnum.HttpPost">
            <summary>
            Post方法
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.SubMethodEnum.HttpPut">
            <summary>
            Put方法
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.SubMethodEnum.HttpDelete">
            <summary>
            Delete方法
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Common.ActionTypeEnum">
            <summary>
            操作基本类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ActionTypeEnum.None">
            <summary>
            空类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ActionTypeEnum.Event">
            <summary>
            事件
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Common.CompareTypeEnum">
            <summary>
            会签节点的通过率设置类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.CompareTypeEnum.Count">
            <summary>
            个数
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.CompareTypeEnum.Percentage">
            <summary>
            百分比
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Common.ComplexTypeEnum">
            <summary>
            节点的其它附属类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ComplexTypeEnum.SignTogether">
            <summary>
            多实例-会签节点
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ComplexTypeEnum.SignForward">
            <summary>
            多实例-加签节点
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Common.FireTypeEnum">
            <summary>
            事件发生类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.FireTypeEnum.None">
            <summary>
            空类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.FireTypeEnum.Before">
            <summary>
            执行前
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.FireTypeEnum.After">
            <summary>
            执行后
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Common.MergeTypeEnum">
            <summary>
            会签节点合并类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.MergeTypeEnum.Sequence">
            <summary>
            串行
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.MergeTypeEnum.Parallel">
            <summary>
            并行
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Common.ProcessValidateResult">
            <summary>
            流程校验结果
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Common.ProcessValidateResult.ProcessValidatedResultType">
            <summary>
            流程校验结果类型
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Common.ProcessValidateResultTypeEnum">
            <summary>
            流程校验错误类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ProcessValidateResultTypeEnum.None">
            <summary>
            默认没有校验错误
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ProcessValidateResultTypeEnum.Successed">
            <summary>
            校验成功
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ProcessValidateResultTypeEnum.WithoutStartEvent">
            <summary>
            没有开始节点
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ProcessValidateResultTypeEnum.WithoutEndEvent">
            <summary>
            没有结束节点
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ProcessValidateResultTypeEnum.WithoutStartEndPath">
            <summary>
            存在孤立活动
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Common.ScriptMethodEnum">
            <summary>
            操作方法类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ScriptMethodEnum.None">
            <summary>
            空类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ScriptMethodEnum.SQL">
            <summary>
            SQL 语句
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ScriptMethodEnum.JavaScript">
            <summary>
            执行脚本
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ScriptMethodEnum.Python">
            <summary>
            Python 脚本
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Common.ServiceMethodEnum">
            <summary>
            操作方法类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ServiceMethodEnum.None">
            <summary>
            空类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ServiceMethodEnum.WebApi">
            <summary>
            外部插件方法
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ServiceMethodEnum.LocalService">
            <summary>
            本地服务程序
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ServiceMethodEnum.CSharpLibrary">
            <summary>
            C# 代码
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.ServiceMethodEnum.StoreProcedure">
            <summary>
            存储过程
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Common.SignForwardTypeEnum">
            <summary>
            加签类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.SignForwardTypeEnum.None">
            <summary>
            不加签
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.SignForwardTypeEnum.SignForwardBefore">
            <summary>
            前加签
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.SignForwardTypeEnum.SignForwardBehind">
            <summary>
            后加签
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.SignForwardTypeEnum.SignForwardParallel">
            <summary>
            并行加签
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Common.TriggerTypeEnum">
            <summary>
            触发器类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.TriggerTypeEnum.None">
            <summary>
            默认是没有定时器
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.TriggerTypeEnum.EMail">
            <summary>
            邮件
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.TriggerTypeEnum.Timer">
            <summary>
            定时器
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.TriggerTypeEnum.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.TriggerTypeEnum.Signal">
            <summary>
            信号
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Common.TriggerTypeEnum.Conditional">
            <summary>
            条件
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.ConvertHelper">
            <summary>
            XML节点转为为活动实体对象
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ConvertHelper.ConvertXmlActivityNodeToActivityEntity(System.Xml.XmlNode,System.Xml.XmlNamespaceManager,System.String)">
            <summary>
            Convert XmlNode to Activity Entity
            </summary>
            <param name="xmlNode">Xml Node</param>
            <param name="xnpmgr">XML命名空间管理</param>
            <param name="processGUID">ProcessGUID</param>
            <returns>Activity Entity</returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.ConvertorFactory">
            <summary>
            转变器工厂类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ConvertorFactory.CreateConvertor(System.Xml.XmlNode,System.Xml.XmlNamespaceManager,Slickflow.Engine.Common.ActivityTypeEnum@)">
            <summary>
            转变器构造工厂方法
            </summary>
            <param name="xmlNode">XML节点</param>
            <param name="xnpmgr">XML命名空间管理</param>
            <param name="activityType">节点类型</param>
            <returns>IConvert接口</returns>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ConvertorFactory.GetActivityTypeByNodeName(System.Xml.XmlNode)">
            <summary>
            获取活动节点类型
            </summary>
            <param name="node">XML节点</param>
            <returns>活动节点类型</returns>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Convertor.ConvertorBase">
            <summary>
            转换器基类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder">
            <summary>
            转换器构建类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.GetActionsNode">
            <summary>
            获取Action的XML节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.GetBoundariesNode">
            <summary>
            获取Boundary的XML节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.GetSectionsNode">
            <summary>
            获取Section的XML节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.GetPerformersNode">
            <summary>
            获取Performer的XML节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.GetServicesNode">
            <summary>
            获取Services的XML节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.GetScriptsNode">
            <summary>
            获取Scripts的XML节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.GetNotificationsNode">
            <summary>
            获取Notifications的XML节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.ConvertGeneral">
            <summary>
            转换通用属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.ConvertActions">
            <summary>
            转换Action节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.ConvertBoundires">
            <summary>
            转换Boundaries节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.ConvertPartakers">
            <summary>
            转换Performers节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.ConvertServices">
            <summary>
            转换Services节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.ConvertScripts">
            <summary>
            转换Scripts节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.ConvertSections">
            <summary>
            转换Sections节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.ConvertNotifications">
            <summary>
            转换Notificaitons节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.ConvertXmlActionNodeToActionEntity(System.Xml.XmlNode)">
            <summary>
            转换Action实体
            </summary>
            <param name="node">XML节点</param>
            <returns>操作实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.ConvertXmlServiceNodeToServiceEntity(System.Xml.XmlNode)">
            <summary>
            转换Service实体
            </summary>
            <param name="node">XML节点</param>
            <returns>操作实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.ConvertXmlScriptNodeToScriptEntity(System.Xml.XmlNode)">
            <summary>
            转换脚本任务节点
            </summary>
            <param name="node">XML节点</param>
            <returns>脚本对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.ConvertXmlPerformerNodeToPartakerEntity(System.Xml.XmlNode)">
            <summary>
            转换Partaker节点
            </summary>
            <param name="node">xml节点</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.ConvertXmlBoundaryNodeToBoundaryEntity(System.Xml.XmlNode)">
            <summary>
            转换Boundary节点
            </summary>
            <param name="node">xml节点</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.ConvertXmlSectionNodeToSectionEntity(System.Xml.XmlNode)">
            <summary>
            转换Section节点
            </summary>
            <param name="node">xml节点</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.ConvertXmlNotificationNodeToPartakerEntity(System.Xml.XmlNode)">
            <summary>
            转换Partaker节点
            </summary>
            <param name="node">xml节点</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.ConvertorBuilder.Create(System.Xml.XmlNode,System.Xml.XmlNamespaceManager,Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            创建方法
            </summary>
            <param name="xmlNode">XML节点</param>
            <param name="xnpmgr">XML命名空间</param>
            <param name="activityEntity">活动实体</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Convertor.DefaultlConvertor">
            <summary>
            网关转换器
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Convertor.EventConvertor">
            <summary>
            事件节点转换器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.EventConvertor.GetEventDefinitionNode(System.Xml.XmlNode,Slickflow.Engine.Xpdl.Common.TriggerTypeEnum@)">
            <summary>
            获得事件定义节点
            </summary>
            <param name="eventNode">事件街道</param>
            <param name="triggerType">触发类型</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.EventConvertor.GetMessageDirectionFromEventNode(System.Xml.XmlNode)">
            <summary>
            获取消息Throw/Catch 类型
            </summary>
            <param name="eventNode"></param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Convertor.GatewayConvertor">
            <summary>
            网关转换器
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Convertor.IConvert">
            <summary>
            节点转变实体
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.IConvert.Convert">
            <summary>
            转变方法
            </summary>
            <param name="entity">活动实体</param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Convertor.MultiSignConvertor">
            <summary>
            多实例转换器
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Convertor.SubProcessConvertor">
            <summary>
            子流程转换器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.SubProcessConvertor.ConvertSubInfoes">
            <summary>
            转换子流程对象列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.SubProcessConvertor.GetSubInfoesNode">
            <summary>
            获取SubInfo的XML节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Convertor.SubProcessConvertor.ConvertXmlSubInfoNodeToSubInfoEntity(System.Xml.XmlNode)">
            <summary>
            转换SubInfo节点
            </summary>
            <param name="node">xml节点</param>
            <returns>实体对象</returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.Action">
            <summary>
            操作实体
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Action.ActionType">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Action.FireType">
            <summary>
            事件触发类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Action.ActionMethod">
            <summary>
            方法类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Action.SubMethod">
            <summary>
            子方法类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Action.Arguments">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Action.Expression">
            <summary>
            表达式
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Action.MethodInfo">
            <summary>
            反射方法配置信息
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Action.CodeInfo">
            <summary>
            文本脚本代码
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.MethodInfo">
            <summary>
            反射组件方法
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.MethodInfo.AssemblyFullName">
            <summary>
            Assembly Full Name
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.MethodInfo.TypeFullName">
            <summary>
            Class Full Name
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.MethodInfo.ConstructorParameters">
            <summary>
            Class Constructor Parameter
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.MethodInfo.MethodName">
            <summary>
            Method Name
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.MethodInfo.MethodParameters">
            <summary>
            Method Parameters
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.CodeInfo">
            <summary>
            Code Info
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.CodeInfo.CodeText">
            <summary>
            Code Script Text
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.Activity">
            <summary>
            活动节点属性定义
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.ID">
            <summary>
            标识ID
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.ActivityGUID">
            <summary>
            活动GUID
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.ActivityName">
            <summary>
            活动名称
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.ActivityCode">
            <summary>
            活动代码
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.ActivityUrl">
            <summary>
            活动关联页面的URL
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.ProcessGUID">
            <summary>
            流程GUID
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.ActivityType">
            <summary>
            活动类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.WorkItemType">
            <summary>
            工作项类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.TriggerDetail">
            <summary>
            触发Detail
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.GatewayDetail">
            <summary>
            网关类型Detail
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.MultiSignDetail">
            <summary>
            会签类型Detail
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.SkipDetail">
            <summary>
            跳转信息
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.Node">
            <summary>
            节点
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.SectionList">
            <summary>
            自定义章节
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.MyProperties">
            <summary>
            活动关联的自定义属性
            JSON数据格式
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.ActionList">
            <summary>
            操作列表
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.ServiceList">
            <summary>
            服务列表
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.ScriptList">
            <summary>
            脚本列表
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.BoundaryList">
            <summary>
            边界列表
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.PartakerList">
            <summary>
            参与者列表
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Activity.NotificationList">
            <summary>
            通知用户列表
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.ActivityView">
            <summary>
            活动视图
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.Boundary">
            <summary>
            边界实体对象
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.Collaboration">
            <summary>
            协作流程总图
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.ConditionDetail">
            <summary>
            Transition上的条件类
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.ConditionDetail.ConditionType">
            <summary>
            条件类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.ConditionDetail.ConditionText">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.GatewayDetail">
            <summary>
            网关详细
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.GatewayDetail.SplitJoinType">
            <summary>
            网关分支合并类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.GatewayDetail.DirectionType">
            <summary>
            网关方向类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.GatewayDetail.JoinPassType">
            <summary>
            合并节点通过类型
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.GroupBehaviour">
            <summary>
            连线上的行为属性实体
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.GroupBehaviour.DefaultBranch">
            <summary>
            默认分支(OrSplit，其它分支不满足条件，选择默认分支)
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.GroupBehaviour.Priority">
            <summary>
            优先级(用于XOrSplit分支类型）
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.GroupBehaviour.Forced">
            <summary>
            强制必需选项(用于EOrJoin合并类型)
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.GroupBehaviour.Approval">
            <summary>
            审批选项(用于ApprovalOrSplit, 1-同意;-1-拒绝)
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.MultiSignDetail">
            <summary>
            会签节点详细类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.MultiSignDetail.ComplexType">
            <summary>
            会签加签类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.MultiSignDetail.MergeType">
            <summary>
            串行并行类型(会签加签)
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.MultiSignDetail.CompareType">
            <summary>
            会签加签节点的通过率设置类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.MultiSignDetail.CompleteOrder">
            <summary>
            会签主节点记录的通过率
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.MultiSignDetail.SignForwardType">
            <summary>
            加签类型
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.Participant">
            <summary>
            参与者流程
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.Process">
            <summary>
            流程对象
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.Receiver">
            <summary>
            接收者
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Receiver.ReceiverType">
            <summary>
            接收者类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Receiver.Candidates">
            <summary>
            数目限制
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.ScriptDetail">
            <summary>
            服务清单
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.SectionDetail">
            <summary>
            自定义属性
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.ServiceDetail">
            <summary>
            服务详细
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.ServiceDetail.MethodInfo">
            <summary>
            反射方法配置信息
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.SkipDetail">
            <summary>
            节点类型上描述的跳转信息
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.SkipDetail.IsSkip">
            <summary>
            是否跳转
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.SkipDetail.Skipto">
            <summary>
            跳转到的节点
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.TaskImplementDetail">
            <summary>
            任务实现详细类
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.TaskImplementDetail.ImplementationType">
            <summary>
            任务实现类型定义
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.Transition">
            <summary>
            转移定义
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Transition.ID">
            <summary>
            SequenceFlow ID
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Transition.TransitionGUID">
            <summary>
            转移GUID
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Transition.Description">
            <summary>
            转移描述
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Transition.FromActivityGUID">
            <summary>
            起始活动GUID
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Transition.ToActivityGUID">
            <summary>
            到达活动GUID
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Transition.DirectionType">
            <summary>
            方向类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Transition.Receiver">
            <summary>
            接收者类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Transition.Condition">
            <summary>
            条件
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Transition.GroupBehaviours">
            <summary>
            群体行为类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Transition.FromActivity">
            <summary>
            起始活动
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.Transition.ToActivity">
            <summary>
            到达活动
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.TransitonList">
            <summary>
            转移列表类
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.TransitionPriorityCompare">
            <summary>
            按连线的优先级比较
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Entity.TransitionPriorityCompare.Compare(Slickflow.Engine.Xpdl.Entity.Transition,Slickflow.Engine.Xpdl.Entity.Transition)">
            <summary>
            比较实现
            </summary>
            <param name="x">实体X</param>
            <param name="y">实体Y</param>
            <returns>比较结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Entity.TriggerDetail">
            <summary>
            触发器类型信息
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.TriggerDetail.TriggerType">
            <summary>
            触发器类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.TriggerDetail.MessageDirection">
            <summary>
            消息捕获抛出类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Entity.TriggerDetail.Expression">
            <summary>
            事件类型表达式
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.ExpressionParser">
            <summary>
            条件表达式解析器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ExpressionParser.Parse(System.String)">
            <summary>
            解析条件表达式
            </summary>
            <param name="expressionReplaced">字符串</param>
            <returns>解析结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ExpressionParser.ReplaceParameterToValue(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            取代条件表达式中的参数值
            </summary>
            <param name="expression">表达式</param>
            <param name="dictoinary">列表</param>
            <returns>表达式</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ExpressionParser.IsNumeric(System.String)">
            <summary>
            判断字符串是否是数字类型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.IDynamicRunable">
            <summary>
            动态运行接口
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.IDynamicRunable.InvokeMethod(Slickflow.Engine.Xpdl.Entity.TaskImplementDetail,System.Object[])">
            <summary>
            调用外部方法
            </summary>
            <param name="implementation"></param>
            <param name="userParameters"></param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.IProcessModel">
            <summary>
            流程模型解析
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.NextActivityTreeResult">
            <summary>
            下一步节点树对象
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Node.MultipleInstanceNode">
            <summary>
            多实例节点类型
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Node.NodeBase">
            <summary>
            节点的基类
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Node.NodeBase.Activity">
            <summary>
            节点定义属性
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Node.NodeBase.ActivityInstance">
            <summary>
            节点实例
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Node.NodeBase.#ctor(Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            构造函数
            </summary>
            <param name="currentActivity"></param>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Node.SubProcessNode">
            <summary>
            子流程节点
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Node.SubProcessNode.SubProcessID">
            <summary>
            子流程ID
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Node.SubProcessNode.SubProcessGUID">
            <summary>
            子流程节点GUID
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Node.SubProcessNode.SubVarName">
            <summary>
            子流程ID的动态绑定变量名称
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Node.SubProcessNode.SubProcessNested">
            <summary>
            内嵌子流程
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.ProcessModelBPMN">
            <summary>
            BPMN2流程模型类
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.ProcessModelBPMN.Process">
            <summary>
            流程实体
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.ProcessModelBPMN.ProcessEntity">
            <summary>
            流程实体
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.ConvertProcessModelFromXML(Slickflow.Engine.Business.Entity.ProcessEntity)">
            <summary>
            从XML转换流程实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.#ctor(Slickflow.Engine.Business.Entity.ProcessEntity)">
            <summary>
            构造函数
            </summary>
            <param name="entity">流程实体</param>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetActivity(System.String)">
            <summary>
            获取当前节点信息
            </summary>
            <param name="activityGUID">活动节点GUID</param>
            <returns>活动实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetActivityList">
            <summary>
            获得活动列表
            </summary>
            <returns>活动列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.TranverseTransitionList(System.Collections.Generic.List{Slickflow.Engine.Xpdl.Entity.Activity},System.String)">
            <summary>
            递归遍历转移上的前置节点
            </summary>
            <param name="activityList">活动列表</param>
            <param name="fromActivityGUID">起始活动GUID</param>
            <returns>节点实体列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetAllTaskActivityList">
            <summary>
            获取任务类型的节点(包含会签节点和子流程节点)，按照Transition顺序组成序列
            </summary>
            <returns>节点实体列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.TranverseTaskTransitionList(System.Collections.Generic.List{Slickflow.Engine.Xpdl.Entity.Activity},System.String)">
            <summary>
            递归遍历转移上的前置节点
            </summary>
            <param name="activityList">活动列表</param>
            <param name="fromActivityGUID">起始活动GUID</param>
            <returns>节点实体列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetTaskActivityList">
            <summary>
            获取任务类型的节点
            </summary>
            <returns>节点实体列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetAllTaskActivityList(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            获取分支和合并之间的任务节点列表
            </summary>
            <param name="splitActivity">分支节点</param>
            <param name="joinActivity">合并节点</param>
            <returns>节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.TranverseTransitionListBetweenSplitJoin(System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.Activity},System.String,System.String)">
            <summary>
            递归遍历转移上的前置节点
            </summary>
            <param name="activityList">活动列表</param>
            <param name="fromActivityGUID">起始活动GUID</param>
            <param name="finalActivityGUID">截止活动GUID</param>
            <returns>节点实体列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.AppendActivity(System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.Activity},Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            添加节点到节点列表中，去掉有重复的节点
            </summary>
            <param name="activityList">节点列表</param>
            <param name="toActivity">节点</param>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetStartActivity">
            <summary>
            Get Start Activity
            </summary>
            <returns></returns>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetFirstActivity">
            <summary>
            获取第一个节点
            </summary>
            <returns>活动节点</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetFirstActivityList(Slickflow.Engine.Xpdl.Entity.Activity,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            获取流程起始的活动节点列表(开始节点之后，可能有多个节点)
            </summary>
            <param name="startActivity">开始节点</param>
            <param name="conditionKeyValuePair">条件表达式的参数名称-参数值的集合</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetEndActivity">
            <summary>
            获取结束节点
            </summary>
            <returns>结束节点</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetForcedBranchesCountBeforeEOrJoin(Slickflow.Engine.Xpdl.Entity.Activity,System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.Transition}@)">
            <summary>
            获取合并节点的前置分支连线上的属性的强制分支数目
            </summary>
            <param name="gatewayActivity">合并节点</param>
            <param name="forcedTransitionList">强制合并分支</param>
            <returns>强制分支数目</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetForwardTransition(System.String,System.String)">
            <summary>
            获取连线实体
            </summary>
            <param name="fromActivityGUID">起始节点GUID</param>
            <param name="toActivityGUID">到达节点GUID</param>
            <returns>转移实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetForwardTransitionList(System.String)">
            <summary>
            获取当前节点的后续连线的集合
            </summary>
            <param name="fromActivityGUID">起始节点ID</param>
            <returns>转移节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetForwardTransitionList(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            获取当前节点的后续连线的集合（使用条件过滤）
            </summary>
            <param name="fromActivityGUID">起始节点ID</param>
            <param name="conditionKeyValuePair">条件</param>
            <returns>转移实体列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetFromActivityList(System.String)">
            <summary>
            根据XML上的转移获取来源节点列表
            </summary>
            <param name="toActivityGUID">目标节点GUID</param>
            <returns>来源节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetNextActivity(System.String)">
            <summary>
            获取当前节点的下一个节点信息
            </summary>
            <param name="activityGUID">活动GUID</param>
            <returns>节点实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetFirstActivityTree(Slickflow.Engine.Xpdl.Entity.Activity,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            获取下一步活动节点树，供流转界面使用
            </summary>
            <param name="startActivity">起始节点</param>
            <param name="conditions">条件参数</param>
            <returns>下一步列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetFirstActivityTree(Slickflow.Engine.Xpdl.Entity.Activity,System.Collections.Generic.IDictionary{System.String,System.String},Slickflow.Data.IDbSession)">
            <summary>
            获取下一步活动节点树，供流转界面使用
            </summary>
            <param name="startActivity">起始节点</param>
            <param name="conditions">条件参数</param>
            <param name="session">数据会话</param>
            <returns>下一步列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetFirstActivityList(Slickflow.Engine.Xpdl.Entity.Activity,System.Collections.Generic.IDictionary{System.String,System.String},Slickflow.Data.IDbSession)">
            <summary>
            获取下一步节点列表，伴随运行时条件信息
            </summary>
            <param name="startEntity">开始节点</param>
            <param name="conditionKeyValuePair">条件对</param>
            <param name="session">会话</param>
            <returns>下一步匹配结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetNextActivityTree(System.String)">
            <summary>
            获取下一步活动节点树，供流转界面使用
            </summary>
            <param name="currentActivityGUID">活动GUID</param>
            <returns>下一步列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetNextActivityTree(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            获取下一步活动节点树，供流转界面使用
            </summary>
            <param name="currentActivityGUID">活动GUID</param>
            <param name="conditions">条件参数</param>
            <returns>下一步列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetNextActivityTree(System.String,System.Nullable{System.Int32},System.Collections.Generic.IDictionary{System.String,System.String},Slickflow.Data.IDbSession)">
            <summary>
            获取下一步活动节点树，供流转界面使用
            </summary>
            <param name="currentActivityGUID">活动GUID</param>
            <param name="taskID">任务ID</param>
            <param name="conditions">条件</param>
            <param name="session">会话</param>
            <returns>下一步列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.Tranverse(Slickflow.Engine.Xpdl.Schedule.NextActivityComponent,System.Collections.Generic.IList{Slickflow.Engine.Common.NodeView})">
            <summary>
            迭代遍历
            </summary>
            <param name="root">根节点</param>
            <param name="treeNodeList">树节点信息</param>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetNextActivityList(System.String,System.Nullable{System.Int32},System.Collections.Generic.IDictionary{System.String,System.String},Slickflow.Data.IDbSession)">
            <summary>
            获取下一步节点列表，伴随运行时条件信息
            </summary>
            <param name="currentActivityGUID">当前节点GUID</param>
            <param name="taskID">任务ID</param>
            <param name="conditionKeyValuePair">条件对</param>
            <param name="session">会话</param>
            <returns>下一步匹配结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetNextActivityList(System.String,System.Nullable{System.Int32},System.Collections.Generic.IDictionary{System.String,System.String},Slickflow.Engine.Common.ActivityResource,System.Linq.Expressions.Expression{System.Func{Slickflow.Engine.Common.ActivityResource,Slickflow.Engine.Xpdl.Entity.Activity,System.Boolean}},Slickflow.Data.IDbSession)">
            <summary>
            获取下一步节点列表（伴随条件和资源）
            </summary>
            <param name="currentActivityGUID">当前节点GUID</param>
            <param name="taskID">任务ID</param>
            <param name="conditionKeyValuePair">条件对</param>
            <param name="activityResource">活动资源</param>
            <param name="expression">表达式</param>
            <param name="session">数据会话</param>
            <returns>下一步匹配结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetNextActivityListByExpressionRecurisivly(Slickflow.Engine.Xpdl.Schedule.NextActivityComponent,Slickflow.Engine.Common.ActivityResource,System.Linq.Expressions.Expression{System.Func{Slickflow.Engine.Common.ActivityResource,Slickflow.Engine.Xpdl.Entity.Activity,System.Boolean}})">
            <summary>
            递归获取满足条件的下一步节点列表
            </summary>
            <param name="parent">父节点</param>
            <param name="activityResource">活动资源</param>
            <param name="expression">表达式</param>
            <returns>下一步节点</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.AddChildToNewGatewayComponent(Slickflow.Engine.Xpdl.Schedule.NextActivityComponent,Slickflow.Engine.Xpdl.Schedule.NextActivityComponent,Slickflow.Engine.Xpdl.Schedule.NextActivityComponent)">
            <summary>
            添加子节点到网关节点
            </summary>
            <param name="newParent">新父节点</param>
            <param name="parent">父节点</param>
            <param name="child">子节点</param>
            <returns>下一步活动节点</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.IsInternalNextPerformerType(Slickflow.Engine.Common.NextPerformerIntTypeEnum)">
            <summary>
            判断是否是内部定义的执行者类型
            </summary>
            <param name="performerType">执行者类型</param>
            <returns>是否</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetNextActivityListWithoutCondition(System.String)">
            <summary>
            不加条件获取下一步节点列表
            </summary>
            <param name="activityGUID">当前节点GUID</param>
            <returns>节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetNextActivityListWithoutConditionRecurily(System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.Activity},System.String)">
            <summary>
            递归获取下一步节点列表
            </summary>
            <param name="activityList">节点列表</param>
            <param name="activityGUID">当前节点GUID</param>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetPreviousActivityList(System.String)">
            <summary>
            获取下一步节点列表，伴随运行时条件信息
            （不包含多实例节点内部的判断，因为没有相应的Transition记录）
            </summary>
            <param name="currentActivityGUID">当前节点信息</param>
            <returns>活动列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetPreviousActivityList(System.String,System.Boolean@)">
            <summary>
            获取前置节点列表（不包含多实例节点内部的判断，因为没有相应的Transition记录）
            </summary>
            <param name="currentActivityGUID">当前运行节点GUID</param>
            <param name="hasGatewayPassed">是否经过网关</param>
            <returns>前置节点列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetPreviousActivityList(System.String,System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.Activity},System.Boolean@)">
            <summary>
            获取前置节点列表（不包含多实例节点内部的判断，因为没有相应的Transition记录）
            </summary>
            <param name="currentActivityGUID">当前运行节点GUID</param>
            <param name="previousActivityList">前置节点列表</param>
            <param name="hasGatewayPassed">是否经过网关</param>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetPreviousActivityTree(System.String)">
            <summary>
            获取上一步
            </summary>
            <param name="currentActivityGUID">当前节点列表</param>
            <returns>步骤列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetActivityPerformers(System.String)">
            <summary>
            根据活动定义获取办理人员列表
            </summary>
            <param name="activityGUID">活动GUID</param>
            <returns>下一步办理人员列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetActivityPerformers(System.Collections.Generic.IList{Slickflow.Engine.Common.NodeView})">
            <summary>
            根据活动定义获取办理人员列表
            </summary>
            <param name="nextActivityTree">活动列表</param>
            <returns>下一步办理人员列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetActivityRoles(System.String)">
            <summary>
            获取节点上定义的角色code集合
            </summary>
            <param name="activityGUID">活动GUID</param>
            <returns>角色列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetActivityPartakers(System.String)">
            <summary>
            获取节点上定义的角色及人员集合
            </summary>
            <param name="activityGUID">活动GUID</param>
            <returns>参与者列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetRoles">
            <summary>
            获取流程下的角色列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetActivityNotifications(System.String)">
            <summary>
            获取节点上定义的通知用户列表
            </summary>
            <param name="activityGUID">活动GUID</param>
            <returns>通知用户列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.ParseCondition(Slickflow.Engine.Xpdl.Entity.Transition,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            用LINQ解析条件表达式
            </summary>
            <param name="transition">转移</param>
            <param name="conditionKeyValuePair">条件参数</param>
            <returns>解析结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.IsValidTransition(Slickflow.Engine.Xpdl.Entity.Transition,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            是否是满足条件的Transition，如果条件为空，默认是有效的。
            </summary>
            <param name="transition">转移</param>
            <param name="conditionKeyValuePair">条件对</param>
            <returns>解析结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.IsMIParallel(Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            是否并行会签节点
            </summary>
            <param name="activity">节点</param>
            <returns>是否并行</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.IsMISequence(Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            是否串行会签节点
            </summary>
            <param name="activity">节点</param>
            <returns>是否串行</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.IsMINode(Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            判断是否会签节点
            </summary>
            <param name="activity">节点</param>
            <returns>是否会签</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.IsMINode(Slickflow.Engine.Business.Entity.ActivityInstanceEntity)">
            <summary>
            判断是否会签节点
            </summary>
            <param name="activityInstance">活动实例</param>
            <returns>是否会签</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.IsTaskNode(Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            是否任务节点
            </summary>
            <param name="activity">节点</param>
            <returns>是否任务</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.IsTaskNode(Slickflow.Engine.Business.Entity.ActivityInstanceEntity)">
            <summary>
            是否任务节点
            </summary>
            <param name="activityInstance">节点</param>
            <returns>是否任务</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.IsAndSplitMI(Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            是否并行容器节点
            </summary>
            <param name="activity">节点</param>
            <returns>是否</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetBackwardTransitionList(System.String)">
            <summary>
            获取节点的前驱连线
            </summary>
            <param name="toActivityGUID">目标节点GUID</param>
            <returns>转移列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetBackwardGatewayActivity(Slickflow.Engine.Xpdl.Entity.Activity,System.Int32@,System.Int32@)">
            <summary>
            获取与合并节点相对应的分支节点
            </summary>
            <param name="fromActivity">合并节点</param>
            <param name="joinCount">经过的合并节点个数</param>
            <param name="splitCount">经过的分支节点个数</param>
            <returns>对应的分支节点</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetBackwardTransitionList(System.String,System.Linq.Expressions.Expression{System.Func{Slickflow.Engine.Xpdl.Entity.Transition,System.Boolean}})">
            <summary>
            获取节点的前驱节点列表(Lambda表达式)
            </summary>
            <param name="activityGUID">活动GUID</param>
            <param name="expression">表达式</param>
            <returns>转移列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetBackwardTransitionList(System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.Transition},System.Linq.Expressions.Expression{System.Func{Slickflow.Engine.Xpdl.Entity.Transition,System.Boolean}})">
            <summary>
            获取节点的前驱节点列表(Lambda表达式)
            </summary>
            <param name="transitionList">转移列表</param>
            <param name="expression">表达式</param>
            <returns>转移实体列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetBackworkTransitionListWithCondition(System.String)">
            <summary>
            根据流程定义文件，获取带有条件的节点前驱连线列表，（带有条件，可以用Lambda表达式重构）
            </summary>
            <param name="toActivityGUID">目标节点GUID</param>
            <returns>转移列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelBPMN.GetBackwardTransitionListCount(System.String)">
            <summary>
            获取节点前驱连线的数目
            </summary>
            <param name="toActivityGUID">目标节点GUID</param>
            <returns>个数</returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.ProcessModelConvertor">
            <summary>
            流程模型转换类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelConvertor.ConvertProcessModelFromXML(System.Xml.XmlNode)">
            <summary>
            流程实体转换
            </summary>
            <param name="xmlNodeProcess">流程XML节点</param>
            <returns>流程模型</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelConvertor.ConvertProcessAttribute(System.Xml.XmlNode)">
            <summary>
            转换流程属性
            </summary>
            <param name="xmlNode">XML节点</param>
            <returns>流程模型</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelConvertor.ConvertXmlChildNode(System.Xml.XmlNode,Slickflow.Engine.Xpdl.Entity.Process)">
            <summary>
            转换XML节点
            </summary>
            <param name="node">XML节点</param>
            <param name="process">流程</param>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelConvertor.GetWorkItemType(Slickflow.Engine.Common.ActivityTypeEnum)">
            <summary>
            根据活动类型获取工作项类型
            </summary>
            <param name="activityType">活动类型</param>
            <returns>工作项类型</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelConvertor.ConvertSubProcess(System.Xml.XmlNode)">
            <summary>
            转换子流程节点
            </summary>
            <param name="node">子流程节点</param>
            <returns>流程实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelConvertor.ConvertTransition(System.Xml.XmlNode,Slickflow.Engine.Xpdl.Entity.Process)">
            <summary>
            从XML节点转换为转移节点
            </summary>
            <param name="node">XML节点</param>
            <param name="process">流程对象</param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.ProcessModelFactory">
            <summary>
            流程模型工厂类
            1. 流程模型创建的4种类型(按流程, 按流程实例, 按任务视图, 按子流程节点)
            2. 区分出子流程的创建模式(子流程嵌入到主流程里面的情况处理)
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelFactory.CreateByProcess(Slickflow.Engine.Business.Entity.ProcessEntity)">
            <summary>
            创建流程模型实例
            </summary>
            <param name="entity">流程实体</param>
            <returns>流程模型</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelFactory.CreateByProcess(System.String,System.String)">
            <summary>
            创建流程模型实例
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <returns>流程模型</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelFactory.CreateByProcess(System.Data.IDbConnection,System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            创建流程模型实例
            </summary>
            <param name="conn">链接</param>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <param name="trans">事务</param>
            <returns>流程模型</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelFactory.CreateByProcessInstance(Slickflow.Engine.Business.Entity.ProcessInstanceEntity)">
            <summary>
            创建流程模型实例
            </summary>
            <param name="processInstance">流程实例</param>
            <returns>流程模型</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelFactory.CreateByProcessInstance(System.Data.IDbConnection,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.Data.IDbTransaction)">
            <summary>
            创建流程模型
            </summary>
            <param name="conn">数据库链接</param>
            <param name="processInstance">流程实例</param>
            <param name="trans">事务</param>
            <returns>流程模型</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelFactory.CreateByTask(Slickflow.Engine.Business.Entity.TaskViewEntity)">
            <summary>
            创建流程模型实例
            </summary>
            <param name="taskView">任务视图</param>
            <returns>流程模型</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelFactory.CreateByTask(System.Data.IDbConnection,Slickflow.Engine.Business.Entity.TaskViewEntity,System.Data.IDbTransaction)">
            <summary>
            创建流程模型
            </summary>
            <param name="conn">数据库链接</param>
            <param name="taskView">任务视图</param>
            <param name="trans">事务</param>
            <returns>流程模型</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelFactory.CreateSubByNode(System.Data.IDbConnection,Slickflow.Engine.Xpdl.Node.SubProcessNode,System.Data.IDbTransaction)">
            <summary>
            创建流程模型实例
            </summary>
            <param name="conn">链接</param>
            <param name="subProcessNode">子流程节点</param>
            <param name="trans">事务</param>
            <returns>流程模型</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelFactory.BuildProcessEntityFromXpdl(Slickflow.Engine.Xpdl.Entity.Process)">
            <summary>
            构建内嵌子流程的流程对象
            </summary>
            <param name="subProcess">子流程</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelFactory.CreateSubByProcessInstance(System.Data.IDbConnection,Slickflow.Engine.Business.Entity.ProcessInstanceEntity,System.Data.IDbTransaction)">
            <summary>
            创建流程模型实例
            </summary>
            <param name="conn">数据库链接</param>
            <param name="processInstance">流程实例</param>
            <param name="trans">数据库交易</param>
            <returns>流程模型</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelFactory.CreateSubByTask(System.Data.IDbConnection,Slickflow.Engine.Business.Entity.TaskViewEntity,System.Data.IDbTransaction)">
            <summary>
            创建流程模型实例
            </summary>
            <param name="conn">数据库链接</param>
            <param name="taskView">任务视图</param>
            <param name="trans">数据库交易</param>
            <returns>流程模型</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelFactory.CreateSubInternal(System.Data.IDbConnection,System.String,System.String,System.Nullable{Slickflow.Engine.Common.SubProcessTypeEnum},System.Int32,System.String,System.Data.IDbTransaction)">
            <summary>
            创建流程模型实例
            </summary>
            <param name="conn">链接</param>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <param name="subProcessID">子流程ID</param>
            <param name="subProcessGUID">子流程GUID</param>
            <param name="subProcessType">子流程类型</param>
            <param name="trans">事务</param>
            <returns>流程模型</returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.ProcessModelHelper">
            <summary>
            流程模型帮助类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelHelper.GetStartActivity(Slickflow.Engine.Xpdl.Entity.Process)">
            <summary>
            获取开始节点
            </summary>
            <param name="process">流程</param>
            <returns>开始节点</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelHelper.GetEndActivity(Slickflow.Engine.Xpdl.Entity.Process)">
            <summary>
            获取开始节点
            </summary>
            <param name="process">流程</param>
            <returns>开始节点</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelHelper.GetActivity(Slickflow.Engine.Xpdl.Entity.Process,System.String)">
            <summary>
            获取活动节点
            </summary>
            <param name="process">流程</param>
            <param name="activityGUID">活动GUID</param>
            <returns>活动节点</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelHelper.GetFirstActivity(Slickflow.Engine.Xpdl.Entity.Process)">
            <summary>
            获取第一个办理节点
            </summary>
            <param name="process">流程</param>
            <returns>开始节点</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelHelper.GetNextActivity(Slickflow.Engine.Xpdl.Entity.Process,System.String)">
            <summary>
            获取第一个办理节点
            </summary>
            <param name="process">流程</param>
            <param name="fromActivityGUID">起始活动节点</param>
            <returns>下一步节点</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelHelper.ConvertFromActivityEntity(Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            从活动节点转换为活动视图
            </summary>
            <param name="entity">活动实体</param>
            <returns>活动视图</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelHelper.GetForwardTransitionList(Slickflow.Engine.Xpdl.Entity.Process,System.String)">
            <summary>
            获取连线列表
            </summary>
            <param name="process">流程</param>
            <param name="fromActivityGUID">活动GUID</param>
            <returns>连线列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelHelper.GetForwardTransition(Slickflow.Engine.Xpdl.Entity.Process,System.String,System.String)">
            <summary>
            获取连线实体
            </summary>
            <param name="process">流程</param>
            <param name="fromActivityGUID">起始节点GUID</param>
            <param name="toActivityGUID">到达节点GUID</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelHelper.GetBackwardTransitionList(Slickflow.Engine.Xpdl.Entity.Process,System.String)">
            <summary>
            获取连线列表
            </summary>
            <param name="process">流程</param>
            <param name="toActivityGUID">活动GUID</param>
            <returns>连线列表</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelHelper.ConvertFromXmlNodeProcess(System.Xml.XmlNode)">
            <summary>
            转换流程基本实体
            </summary>
            <param name="xmlNodeProcess">流程XML节点</param>
            <returns>流程实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessModelHelper.ConvertToXPDLProcess(System.Xml.XmlDocument)">
            <summary>
            校验时，转换流程实体对象
            </summary>
            <param name="xmlDoc">xml文档</param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.ProcessValidator">
            <summary>
            流程校验器
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessValidator.Validate(Slickflow.Engine.Business.Entity.ProcessEntity)">
            <summary>
            校验方法
            </summary>
            <param name="entity">实体</param>
            <returns>校验结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.ProcessValidator.TranverseTransitonList(Slickflow.Engine.Xpdl.Entity.Process,System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.Activity},System.Collections.Generic.IList{Slickflow.Engine.Xpdl.Entity.Transition},System.String)">
            <summary>
            迭代验证方法
            </summary>
            <param name="process">流程实体</param>
            <param name="activityList">活动列表</param>
            <param name="transitionList">转移列表</param>
            <param name="activityGUID">活动GUID</param>
            <returns>是否存在关键路径</returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Schedule.ApprovedTransitionValidatedTypeEnum">
            <summary>
            审批转移检验类型
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Schedule.ApprovedTransitionValidatedResult">
            <summary>
            审批转移检验结果对象
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Schedule.NextActivityComponent">
            <summary>
            下一步节点的抽象类
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Schedule.NextActivityComponent.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Schedule.NextActivityComponent.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Schedule.NextActivityComponent.Transition">
            <summary>
            转移
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Schedule.NextActivityComponent.Activity">
            <summary>
            活动节点
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Schedule.NextActivityComponent.HasChildren">
            <summary>
            是否有子节点
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityComponent.GetEnumerator">
            <summary>
            枚举
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityComponent.Add(Slickflow.Engine.Xpdl.Schedule.NextActivityComponent)">
            <summary>
            添加子节点
            </summary>
            <param name="nextActivity"></param>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityComponent.Remove(Slickflow.Engine.Xpdl.Schedule.NextActivityComponent)">
            <summary>
            删除子节点
            </summary>
            <param name="nextActivity"></param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Schedule.NextActivityComponentFactory">
            <summary>
            下一步节点的工厂类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityComponentFactory.CreateNextActivityComponent(Slickflow.Engine.Xpdl.Entity.Transition,Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            创建下一步活动的节点
            </summary>
            <param name="transition">转移</param>
            <param name="activity">活动</param>
            <returns>下一步节点封装</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityComponentFactory.CreateNextActivityComponent(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            创建跳转节点(强制拉取跳转方式，后续节点状态可以强制拉取前置节点到当前节点[后续节点])
            </summary>
            <param name="fromActivity">要拉取的节点</param>
            <param name="toActivity">拉取到节点</param>
            <returns>下一步节点封装</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityComponentFactory.CreateJumpforwardEmptyTransition(Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            创建跳转Transition实体对象
            </summary>
            <param name="fromActivity">来源节点</param>
            <param name="toActivity">目标节点</param>
            <returns>转移实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityComponentFactory.CreateNextActivityComponent">
            <summary>
            创建下一步根显示节点
            </summary>
            <returns>根节点</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityComponentFactory.CreatePreviousActivityComponent">
            <summary>
            创建上一步根显示节点
            </summary>
            <returns>根节点</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityComponentFactory.CreateNextActivityComponent(Slickflow.Engine.Xpdl.Schedule.NextActivityComponent)">
            <summary>
            根据现有下一步节点列表，创建新的下一步节点列表对象
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Schedule.NextActivityIntermediate">
            <summary>
            网关类型的下一步节点（其下包含子节点)
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityIntermediate.#ctor(System.String,Slickflow.Engine.Xpdl.Entity.Transition,Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            构造方法
            </summary>
            <param name="name">名称</param>
            <param name="transition">转移</param>
            <param name="activity">活动</param>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityIntermediate.Add(Slickflow.Engine.Xpdl.Schedule.NextActivityComponent)">
            <summary>
            添加子节点
            </summary>
            <param name="nextActivity">活动节点</param>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityIntermediate.Remove(Slickflow.Engine.Xpdl.Schedule.NextActivityComponent)">
            <summary>
            移除子节点
            </summary>
            <param name="nextActivity">活动节点</param>
            <returns>删除状态</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityIntermediate.GetEnumerator">
            <summary>
            获取枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Schedule.NextActivityIntermediate.NextActivityList">
            <summary>
            下一步步骤节点列表
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Schedule.NextActivityItem">
            <summary>
            单一下一步节点(不包含子节点）
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityItem.#ctor(System.String,Slickflow.Engine.Xpdl.Entity.Transition,Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            构造方法
            </summary>
            <param name="name">节点名称</param>
            <param name="transition">转移</param>
            <param name="activity">活动</param>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityItem.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedResult">
            <summary>
            执行活动的可选类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedResult.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedResult.MatchedType">
            <summary>
            匹配类型
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedResult.Root">
            <summary>
            根节点
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedResult.#ctor(Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType,Slickflow.Engine.Xpdl.Schedule.NextActivityComponent)">
            <summary>
            构造函数
            </summary>
            <param name="matchedType">匹配类型</param>
            <param name="root">根节点</param>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedResult.CreateNextActivityMatchedResultObject(Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType,Slickflow.Engine.Xpdl.Schedule.NextActivityComponent)">
            <summary>
            创建方法
            </summary>
            <param name="matchedType">匹配类型</param>
            <param name="root">根节点</param>
            <returns>下一步匹配结果</returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType">
            <summary>
            下一步活动的调度状态
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType.Unknown">
            <summary>
            发生错误
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType.Failed">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType.Successed">
            <summary>
            执行成功
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType.NoneTransitionFilteredByCondition">
            <summary>
            被表达式过滤
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType.WaitingForOtherSplitting">
            <summary>
            需要其他必需的并行分支
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType.WaitingForAgreedOrRefused">
            <summary>
            等待同意或者拒绝操作(ApprovalOrSplit)
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType.NoneTransitionMatchedToSplit">
            <summary>
            没有任何满足条件的路径（OrSplit, XOrSplit)
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType.FailedPassRateOfMulitipleInstance">
            <summary>
            会签节点未满足通过率
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType.WaitingForOthersJoin">
            <summary>
            等待其它需要合并的分支
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType.NotMadeItselfToJoin">
            <summary>
            条件没有匹配(OrJoin, XOrJoin)
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType.CannotContinueRunning">
            <summary>
            不能继续运行
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Schedule.NextActivityRouteChoiceEnum">
            <summary>
            下一步分支选择的类型
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Schedule.NextActivityRouteChoiceEnum.Single">
            <summary>
            单一选择
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Schedule.NextActivityRouteChoiceEnum.OrMultiple">
            <summary>
            或多选
            </summary>
        </member>
        <member name="F:Slickflow.Engine.Xpdl.Schedule.NextActivityRouteChoiceEnum.MustAll">
            <summary>
            必全选
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Schedule.NextActivityRouter">
            <summary>
            下一步节点列表（其下包含子节点)
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityRouter.#ctor(System.String,Slickflow.Engine.Xpdl.Entity.Transition,Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            构造方法
            </summary>
            <param name="name">名称</param>
            <param name="transition">转移</param>
            <param name="activity">活动</param>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityRouter.Add(Slickflow.Engine.Xpdl.Schedule.NextActivityComponent)">
            <summary>
            添加子节点
            </summary>
            <param name="nextActivity">活动节点</param>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityRouter.Remove(Slickflow.Engine.Xpdl.Schedule.NextActivityComponent)">
            <summary>
            移除子节点
            </summary>
            <param name="nextActivity">活动节点</param>
            <returns>删除状态</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityRouter.GetEnumerator">
            <summary>
            获取枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Schedule.NextActivityRouter.NextActivityList">
            <summary>
            下一步步骤节点列表
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Schedule.NextActivityRouteResult">
            <summary>
            下一步的活动结果类：
            1. 如果RouteChoiceType为单一，则对NextActivity属性赋值；
            2. 如果RouteChoiceType为或多选、必全选，则对NestedNextActivityList 属性赋值。
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Schedule.NextActivityRouteResult.RouteChoiceType">
            <summary>
            路由选择类型的枚举
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Schedule.NextActivityRouteResult.NormalActivity">
            <summary>
            下一步节点
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Schedule.NextActivityRouteResult.GatewayActivity">
            <summary>
            下一个路由节点
            </summary>
        </member>
        <member name="P:Slickflow.Engine.Xpdl.Schedule.NextActivityRouteResult.Children">
            <summary>
            下一步的节点列表
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityRouteResult.#ctor(Slickflow.Engine.Xpdl.Schedule.NextActivityRouteChoiceEnum)">
            <summary>
            下一步活动结果
            </summary>
            <param name="routeChoiceType">路由选择类型</param>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Schedule.NextActivityRouteResultHelper">
            <summary>
            下一步活动路由列表的帮助类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityRouteResultHelper.AddNewNextActivityToRoutedList(Slickflow.Engine.Xpdl.Schedule.NextActivityRouteResult@,Slickflow.Engine.Xpdl.Schedule.NextActivityRouteResult)">
            <summary>
            给下一步列表中继续添加子节点
            </summary>
            <param name="nextActivityRoutedResult"></param>
            <param name="child"></param>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Schedule.NextActivityScheduleBase">
            <summary>
            节点调度基类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityScheduleBase.GetNextActivityListFromGateway(Slickflow.Engine.Xpdl.Entity.Transition,Slickflow.Engine.Xpdl.Entity.Activity,System.Collections.Generic.IDictionary{System.String,System.String},Slickflow.Data.IDbSession,Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType@)">
            <summary>
            根据网关类型获取下一步节点列表的抽象方法
            </summary>
            <param name="fromTransition">转移</param>
            <param name="currentGatewayActivity">活动</param>
            <param name="conditionKeyValuePair">条件kv对</param>
            <param name="session">会话</param>
            <param name="resultType">匹配类型</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityScheduleBase.GetNextActivityListFromGatewayCore(Slickflow.Engine.Xpdl.Entity.Transition,System.Collections.Generic.IDictionary{System.String,System.String},Slickflow.Data.IDbSession,Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType@)">
            <summary>
            根据Transition，获取下一步节点列表
            </summary>
            <param name="forwardTransition">转移实体</param>
            <param name="conditionKeyValuePair">条件kv对</param>
            <param name="session">会话</param>
            <param name="resultType">结果类型</param>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityScheduleBase.AddChildToGatewayComponent(Slickflow.Engine.Xpdl.Entity.Transition,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Xpdl.Schedule.NextActivityComponent,Slickflow.Engine.Xpdl.Schedule.NextActivityComponent)">
            <summary>
            把子节点添加到网关路由节点，根据网关节点和子节点是否为空处理
            </summary>
            <param name="fromTransition">起始转移</param>
            <param name="currentGatewayActivity">当前网关节点</param>
            <param name="gatewayComponent">网关Component</param>
            <param name="child">子节点</param>
            <returns>下一步Component</returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Schedule.NextActivityScheduleFactory">
            <summary>
            ActivitySchedule的工厂类
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityScheduleFactory.CreateActivitySchedule(Slickflow.Engine.Xpdl.IProcessModel,Slickflow.Engine.Common.GatewaySplitJoinTypeEnum,System.Nullable{System.Int32})">
            <summary>
            创建ActivitySchedule
            </summary>
            <param name="processModel">流程模型</param>
            <param name="splitJoinType">分支合并类型</param>
            <param name="taskID">任务ID</param>
            <returns>下一步调度类</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityScheduleFactory.CreateActivityScheduleIntermediate(Slickflow.Engine.Xpdl.IProcessModel)">
            <summary>
            创建ActivitySchedule
            </summary>
            <param name="processModel">流程模型</param>
            <returns>下一步调度类</returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Schedule.NextActivityScheduleIntermediate">
            <summary>
            中间事件节点下一步调度
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityScheduleIntermediate.GetNextActivityListFromGateway(Slickflow.Engine.Xpdl.Entity.Transition,Slickflow.Engine.Xpdl.Entity.Activity,System.Collections.Generic.IDictionary{System.String,System.String},Slickflow.Data.IDbSession,Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType@)">
            <summary>
            获取下一步节点列表
            </summary>
            <param name="fromTransition">起始转移</param>
            <param name="currentGatewayActivity">当前节点</param>
            <param name="conditionKeyValuePair">条件对</param>
            <param name="session">会话</param>
            <param name="resultType">结果类型</param>
            <returns>下一步组件类型</returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Schedule.NextActivityScheduleJoin">
            <summary>
            合并类型，获取下一步节点列表
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityScheduleJoin.GetNextActivityListFromGateway(Slickflow.Engine.Xpdl.Entity.Transition,Slickflow.Engine.Xpdl.Entity.Activity,System.Collections.Generic.IDictionary{System.String,System.String},Slickflow.Data.IDbSession,Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType@)">
            <summary>
            获取下一步节点列表
            </summary>
            <param name="fromTransition">起始转移</param>
            <param name="currentGatewayActivity">当前节点</param>
            <param name="conditionKeyValuePair">条件对</param>
            <param name="session">会话</param>
            <param name="resultType">结果类型</param>
            <returns>下一步组件类型</returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Schedule.NextActivityScheduleSplit">
            <summary>
            分支类型，获取下一步节点列表
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.Schedule.NextActivityScheduleSplit.GetNextActivityListFromGateway(Slickflow.Engine.Xpdl.Entity.Transition,Slickflow.Engine.Xpdl.Entity.Activity,System.Collections.Generic.IDictionary{System.String,System.String},Slickflow.Data.IDbSession,Slickflow.Engine.Xpdl.Schedule.NextActivityMatchedType@)">
            <summary>
            获取下一步节点列表
            </summary>
            <param name="fromTransition">起始转移</param>
            <param name="currentGatewayActivity">当前节点</param>
            <param name="conditionKeyValuePair">条件</param>
            <param name="session">会话</param>
            <param name="resultType">结果类型</param>
            <returns>返回节点</returns>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.Schedule.PreviousActivityMatchedResult">
            <summary>
            上一步节点匹配结果
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.XPDLDefinition">
            <summary>
            流程定义的XML文件中，用到的常量定义
            </summary>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.XPDLHelper">
            <summary>
            常用的一些帮助方法
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.XPDLHelper.IsSimpleComponentNode(Slickflow.Engine.Common.ActivityTypeEnum)">
            <summary>
            是否简单组件节点
            </summary>
            <param name="activityType">活动类型</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.XPDLHelper.IsGatewayComponentNode(Slickflow.Engine.Common.ActivityTypeEnum)">
            <summary>
            是否复合逻辑处理节点
            </summary>
            <param name="activityType">活动类型</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.XPDLHelper.IsCrossOverComponentNode(Slickflow.Engine.Common.ActivityTypeEnum)">
            <summary>
            是否中间事件或服务类型节点
            </summary>
            <param name="activityType">活动类型</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.XPDLHelper.IsInterTimerEventComponentNode(Slickflow.Engine.Xpdl.Entity.Activity)">
            <summary>
            判断是否是中间Timer事件节点
            </summary>
            <param name="activity">活动节点</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.XPDLHelper.IsWorkItem(Slickflow.Engine.Common.ActivityTypeEnum)">
            <summary>
            是否是可办理的任务节点
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.XPDLHelper.GetWorkItemType(Slickflow.Engine.Common.ActivityTypeEnum)">
            <summary>
            根据活动类型获取工作项类型
            </summary>
            <param name="activityType">活动类型</param>
            <returns>工作项类型</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.XPDLHelper.GetMessageCatchActivity(Slickflow.Engine.Business.Entity.ProcessInstanceEntity,Slickflow.Engine.Xpdl.Entity.Activity,Slickflow.Engine.Business.Entity.ActivityInstanceEntity,Slickflow.Engine.Business.Entity.ProcessEntity@)">
            <summary>
            获取跨流程XML的消息节点实体对象
            </summary>
            <param name="processInstance">流程实例</param>
            <param name="throwActivity">消息抛出节点</param>
            <param name="throwActivityInstance">消息抛出节点活动实例</param>
            <param name="catchProcessEntity">消息捕获流程实体对象</param>
            <returns>消息接收节点实体</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.XPDLHelper.GetSlickflowXmlNamespaceManager(System.Xml.XmlDocument,System.Boolean)">
            <summary>
            添加XML文档的命名空间
            </summary>
            <param name="document">XML文档</param>
            <param name="isBPMNDIContained">是否包含Shape节点</param>
            <returns>XML命名空间管理</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.XPDLHelper.GetXmlPathOfProcess(System.Boolean)">
            <summary>
            获取流程节点的查找路径
            </summary>
            <param name="isSubProcess">是否子流程</param>
            <returns>XML路径</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.XPDLHelper.IsOrGateway(System.Xml.XmlNode)">
            <summary>
            判断是否或网关
            </summary>
            <param name="gatewayNode">网关节点</param>
            <returns></returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.XPDLHelper.IsXOrGateway(System.Xml.XmlNode)">
            <summary>
            判断是否或网关
            </summary>
            <param name="gatewayNode">网关节点</param>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.XPDLHelper.IsAndGateway(System.Xml.XmlNode)">
            <summary>
            判断是否或网关
            </summary>
            <param name="gatewayNode">网关节点</param>
        </member>
        <member name="T:Slickflow.Engine.Xpdl.XPDLMemoryCachedHelper">
            <summary>
            流程文件缓存
            </summary>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.XPDLMemoryCachedHelper.SetXpdlCache(System.String,System.String,Slickflow.Engine.Xpdl.Entity.Process)">
            <summary>
            设置流程缓存
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <param name="process">流程</param>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.XPDLMemoryCachedHelper.GetXpdlCache(System.String,System.String)">
            <summary>
            获取流程缓存
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <returns>流程</returns>
        </member>
        <member name="M:Slickflow.Engine.Xpdl.XPDLMemoryCachedHelper.TryUpdate(System.String,System.String,Slickflow.Engine.Xpdl.Entity.Process)">
            <summary>
            更新流程缓存
            </summary>
            <param name="processGUID">流程GUID</param>
            <param name="version">版本</param>
            <param name="process">流程</param>
            <returns></returns>
        </member>
        <member name="T:System.Linq.Dynamic.DynamicProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicProperty.#ctor(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="P:System.Linq.Dynamic.DynamicProperty.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.DynamicProperty.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.DynamicClass">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicClass.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExpression.Parse(System.Type,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="resultType"></param>
            <param name="expression"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExpression.ParseLambda(System.Type,System.Type,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="itType"></param>
            <param name="resultType"></param>
            <param name="expression"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExpression.ParseLambda(System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="resultType"></param>
            <param name="expression"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExpression.ParseLambda``2(System.String,System.Object[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="S"></typeparam>
            <param name="expression"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExpression.CreateClass(System.Linq.Dynamic.DynamicProperty[])">
            <summary>
            
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExpression.CreateClass(System.Collections.Generic.IEnumerable{System.Linq.Dynamic.DynamicProperty})">
            <summary>
            
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="T:System.Linq.Dynamic.ParseException">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.ParseException.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="position"></param>
        </member>
        <member name="P:System.Linq.Dynamic.ParseException.Position">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.ParseException.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
